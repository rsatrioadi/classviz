{
  "elements": {
    "nodes": [
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghosts",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "isAlive",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.setAlive(boolean).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "Indicates whether the player should be alive or not."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getSquare()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
            "docComment": "\r\n@return The square for this node.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the square associated with a node.",
            "howItWorks": "The method returns the private field 'square' of the current instance.",
            "howToUse": "Call this method on an instance of Navigation.Node to get its associated square.",
            "layer": "Logic",
            "postConditions": [
              "The returned Square is not null."
            ],
            "preConditions": [
              "The instance has been properly initialized with a non-null square."
            ],
            "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
            "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getGhostFactory()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.npc.ghost.GhostFactory getGhostFactory() {\r\n    return new nl.tudelft.jpacman.npc.ghost.GhostFactory(this.getSpriteStore());\r\n}",
            "docComment": "\r\n@return A new factory using the sprites from {@link #getSpriteStore()}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the ghost factory used in the game.",
            "howItWorks": "The method creates a new GhostFactory object by passing the sprite store obtained from getSpriteStore() as a parameter.",
            "howToUse": "Call this method to obtain an instance of GhostFactory that can be used to create ghost entities in the game.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of GhostFactory is returned with the sprite store properly initialized."
            ],
            "preConditions": [
              "getSpriteStore() must return a valid instance of nl.tudelft.jpacman.sprite.PacManSprites."
            ],
            "reason": "This method is responsible for creating ghost objects, which are a key component of the game logic.",
            "returns": "An instance of nl.tudelft.jpacman.npc.ghost.GhostFactory.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "boolean",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "boolean",
            "qualifiedName": "boolean",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "/**\r\n * Moves the specified player one square in the given direction.\r\n *\r\n * @param player\r\n * \t\tThe player to move.\r\n * @param direction\r\n * \t\tThe direction to move in.\r\n */\r\npublic void move(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Direction direction) {\r\n    if (this.isInProgress()) {\r\n        // execute player move.\r\n        this.getLevel().move(player, direction);\r\n        this.pointCalculator.pacmanMoved(player, direction);\r\n    }\r\n}",
            "docComment": "Moves the specified player one square in the given direction.\r\n\r\n@param player\r\n\t\tThe player to move.\r\n@param direction\r\n\t\tThe direction to move in.\r\n",
            "metaSrc": "source code",
            "description": "Moves a Pacman player in a given direction if the game is in progress.",
            "howItWorks": "Checks if the game is in progress. If so, it moves the player on the level and updates the point calculator for the move.",
            "howToUse": "Call this method with a Player object and a Direction enum to move the player in that direction if the game is active.",
            "layer": "Logic",
            "postConditions": [
              "The player's position on the board will have changed if possible.",
              "The player's points may have been updated based on the move."
            ],
            "preConditions": [
              "The game must be in progress (isInProgress() returns true)."
            ],
            "reason": "This method is part of the game logic layer, handling the movement of a player within the game rules and state.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.Action.doAction()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "doAction()",
            "qualifiedName": "nl.tudelft.jpacman.ui.Action.doAction()",
            "kind": "method",
            "sourceText": "/**\r\n * Executes the action.\r\n */\r\nvoid doAction();",
            "docComment": "Executes the action.\r\n",
            "metaSrc": "source code",
            "description": "Handles user interface interactions.",
            "howItWorks": "This method is declared as part of the Action interface, which suggests it is intended to be implemented by classes that handle specific UI actions.",
            "howToUse": "Call this method to perform an action in the user interface context.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [],
            "reason": "The method is part of the UI layer and does not return any value, indicating it performs an action without returning a result.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The game instance to be stopped."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidedOn",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit that the player collided with."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Draws the sprite on the provided graphics context.\r\n *\r\n * @param graphics\r\n * \t\tThe graphics context to draw.\r\n * @param x\r\n * \t\tThe destination x coordinate to start drawing.\r\n * @param y\r\n * \t\tThe destination y coordinate to start drawing.\r\n * @param width\r\n * \t\tThe width of the destination draw area.\r\n * @param height\r\n * \t\tThe height of the destination draw area.\r\n */\r\nvoid draw(java.awt.Graphics graphics, int x, int y, int width, int height);",
            "docComment": "Draws the sprite on the provided graphics context.\r\n\r\n@param graphics\r\n\t\tThe graphics context to draw.\r\n@param x\r\n\t\tThe destination x coordinate to start drawing.\r\n@param y\r\n\t\tThe destination y coordinate to start drawing.\r\n@param width\r\n\t\tThe width of the destination draw area.\r\n@param height\r\n\t\tThe height of the destination draw area.\r\n",
            "metaSrc": "source code",
            "description": "Draws the sprite on a graphics context at a specified position and size.",
            "howItWorks": "The method takes a Graphics object and draws the sprite at the given coordinates (x, y) with the specified width and height.",
            "howToUse": "Call this method with a Graphics object and the desired position and dimensions to render the sprite on the screen.",
            "layer": "UI",
            "postConditions": [
              "The sprite is drawn on the provided Graphics object at the specified position and size."
            ],
            "preConditions": [],
            "reason": "This method is necessary for rendering the sprite in the game, which falls under UI responsibilities.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "handler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "setAlive(boolean)",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
            "kind": "method",
            "sourceText": "/**\r\n * Sets whether this player is alive or not.\r\n *\r\n * If the player comes back alive, the {@link killer} will be reset.\r\n *\r\n * @param isAlive\r\n * \t\t<code>true</code> iff this player is alive.\r\n */\r\npublic void setAlive(boolean isAlive) {\r\n    if (isAlive) {\r\n        this.deathSprite.setAnimating(false);\r\n        this.killer = null;\r\n    }\r\n    if (!isAlive) {\r\n        this.deathSprite.restart();\r\n    }\r\n    this.alive = isAlive;\r\n}",
            "docComment": "Sets whether this player is alive or not.\r\n\r\nIf the player comes back alive, the {@link killer} will be reset.\r\n\r\n@param isAlive\r\n\t\t<code>true</code> iff this player is alive.\r\n",
            "metaSrc": "source code",
            "description": "Sets the player's alive status.",
            "howItWorks": "The method checks if the player is set to be alive or not. If the player is alive, it stops the death sprite animation and clears any killer reference. If the player is not alive, it restarts the death sprite animation. Finally, it updates the player's alive status.",
            "howToUse": "Call this method with a boolean value indicating whether the player should be alive or not.",
            "layer": "Logic",
            "postConditions": [
              "The player's death sprite animation is stopped if it is set to be alive.",
              "Any killer reference is cleared if the player is set to be alive.",
              "The player's death sprite animation is restarted if it is set to be not alive.",
              "The player's alive status is updated."
            ],
            "preConditions": [
              "None"
            ],
            "reason": "This method is necessary for managing the player's state in the game, ensuring that the player can be revived or killed as required by the game logic.",
            "returns": "Void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getGameFactory()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getGameFactory()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A new factory using the players from {@link #getPlayerFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.game.GameFactory getGameFactory() {\r\n    return new nl.tudelft.jpacman.game.GameFactory(this.getPlayerFactory());\r\n}",
            "docComment": "\r\n@return A new factory using the players from {@link #getPlayerFactory()}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the game factory used in the game.",
            "howItWorks": "The method instantiates a new GameFactory and passes the PlayerFactory obtained from getPlayerFactory() as a parameter.",
            "howToUse": "Call this method from an instance of nl.tudelft.jpacman.Launcher to get a GameFactory object.",
            "layer": "Logic",
            "postConditions": [
              "A new GameFactory instance is returned with the PlayerFactory set up correctly."
            ],
            "preConditions": [
              "The Launcher instance must be properly initialized.",
              "getPlayerFactory() must return a valid PlayerFactory instance."
            ],
            "reason": "This method is responsible for creating a GameFactory, which is essential for setting up the game logic. It depends on the PlayerFactory to be created first, indicating it's part of the application logic rather than data access or user interface.",
            "returns": "An instance of nl.tudelft.jpacman.game.GameFactory.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "format(nl.tudelft.jpacman.level.Player)",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
            "kind": "method",
            "sourceText": "/**\r\n * Format the score of a given player.\r\n *\r\n * @param player\r\n * \t\tThe player and its score\r\n * @return Formatted score.\r\n */\r\njava.lang.String format(nl.tudelft.jpacman.level.Player player);",
            "docComment": "Format the score of a given player.\r\n\r\n@param player\r\n\t\tThe player and its score\r\n@return Formatted score.\r\n",
            "metaSrc": "source code",
            "description": "Formats the score of a player in a Pacman game.",
            "howItWorks": "The method accesses the player's score and formats it into a readable string.",
            "howToUse": "Call this method with an instance of Player to get its score formatted as a string.",
            "layer": "UI",
            "postConditions": [
              "A non-null string representing the formatted score is returned."
            ],
            "preConditions": [
              "The player object must not be null."
            ],
            "reason": "This method is responsible for formatting the score of a player, which is part of the user interface functionality.",
            "returns": "java.lang.String",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startSquareIndex",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The start current selected starting square.\r\n */\r\nprivate int startSquareIndex;",
            "visibility": "private",
            "simpleName": "startSquareIndex",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.startSquareIndex",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getInheritance(java.lang.Class)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a list of all classes and interfaces the class inherits.\r\n *\r\n * @param clazz\r\n * \t\tThe class to create a list of super classes and interfaces\r\n * \t\tfor.\r\n * @return A list of all classes and interfaces the class inherits.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\nprivate java.util.List<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>> getInheritance(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> clazz) {\r\n    java.util.List<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>> found = new java.util.ArrayList<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>>();\r\n    found.add(clazz);\r\n    int index = 0;\r\n    while (found.size() > index) {\r\n        java.lang.Class<? extends java.lang.Object> current = found.get(index);\r\n        java.lang.Class<? extends java.lang.Object> superClass = current.getSuperclass();\r\n        if ((superClass != null) && nl.tudelft.jpacman.board.Unit.class.isAssignableFrom(superClass)) {\r\n            found.add(((java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>) (superClass)));\r\n        }\r\n        for (java.lang.Class<? extends java.lang.Object> classInterface : current.getInterfaces()) {\r\n            if (nl.tudelft.jpacman.board.Unit.class.isAssignableFrom(classInterface)) {\r\n                found.add(((java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>) (classInterface)));\r\n            }\r\n        }\r\n        index++;\r\n    } \r\n    return found;\r\n}",
            "docComment": "Returns a list of all classes and interfaces the class inherits.\r\n\r\n@param clazz\r\n\t\tThe class to create a list of super classes and interfaces\r\n\t\tfor.\r\n@return A list of all classes and interfaces the class inherits.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves a list of all classes that are subclasses or implementors of the given class.",
            "howItWorks": "The method iterates through the superclass and implemented interfaces of the given class, adding them to a list if they extend or implement nl.tudelft.jpacman.board.Unit.",
            "howToUse": "Call this method with a specific class extending nl.tudelft.jpacman.board.Unit to get all related classes.",
            "layer": "Logic",
            "postConditions": [
              "The returned list contains all classes that are subclasses or implementors of the given class."
            ],
            "preConditions": [
              "The input class must be a subclass or implementor of nl.tudelft.jpacman.board.Unit."
            ],
            "reason": "This method is used to determine all possible interactions a unit can have based on its inheritance and interfaces.",
            "returns": "A list of classes that are subclasses or implementors of the given class.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.sprites",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite map, one sprite for each direction.\r\n */\r\nprivate final java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprites;",
            "visibility": "private",
            "simpleName": "sprites",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.sprites",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getHeight()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the height of this sprite.\r\n *\r\n * @return The height of this sprite in pixels.\r\n */\r\nint getHeight();",
            "docComment": "Returns the height of this sprite.\r\n\r\n@return The height of this sprite in pixels.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the height of a sprite.",
            "howItWorks": "The method returns the height value stored within the sprite object.",
            "howToUse": "Call getHeight() on an instance of Sprite to retrieve its height.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is a non-negative integer representing the height of the sprite."
            ],
            "preConditions": [],
            "reason": "This method is used to get the dimensions of a sprite, which is essential for rendering and collision detection in the game.",
            "returns": "int - The height of the sprite in pixels.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "visited",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "A set of squares that have already been visited by the ghost."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The y-coordinate to check."
          }
        }
      },
      {
        "data": {
          "id": "char",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "char",
            "qualifiedName": "char",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.pointCalculator",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private nl.tudelft.jpacman.points.PointCalculator pointCalculator;",
            "visibility": "private",
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.pointCalculator",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.NORTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * North, or up.\r\n */\r\nNORTH(0, -1)",
            "visibility": "public",
            "simpleName": "NORTH",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.NORTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The destination y coordinate to start drawing."
          }
        }
      },
      {
        "data": {
          "id": "long",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "long",
            "qualifiedName": "long",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A list of supported ghost colors.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "GhostColor",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostColor",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Represents the different colors of ghosts in a Pacman game.",
            "howItWorks": "The enum contains four constants representing the colors of the ghosts.",
            "howToUse": "Access the enum values using their names (e.g., GhostColor.PINK).",
            "layer": "Domain",
            "parameters": [],
            "postConditions": [],
            "preConditions": [],
            "reason": "This enum is used to define the different colors that can be assigned to ghosts in the game.",
            "returns": "A GhostColor enum value representing one of the four ghost colors: PINK, ORANGE, RED, or CYAN.",
            "stereotype": "Other",
            "keywords": [
              "GhostColor",
              "enum",
              "Pacman"
            ],
            "roleStereotype": "Information Holder"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
            "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the square adjacent to the current square in a given direction.",
            "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
            "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
            "layer": "Logic",
            "postConditions": [
              "The returned Square is the one located in the specified direction from the current square."
            ],
            "preConditions": [
              "The 'direction' parameter must be a valid Direction enum value.",
              "The 'neighbours' map must contain an entry for the provided direction."
            ],
            "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
            "returns": "nl.tudelft.jpacman.board.Square",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.PINKY",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int PINKY = 2;",
            "visibility": "private",
            "simpleName": "PINKY",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.PINKY",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprites for every direction."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The x-coordinate of the top-left corner of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new animating sprite that will change frames every interval. By\r\n * default the sprite is not animating.\r\n *\r\n * @param frames\r\n * \t\tThe frames of this animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether or not this sprite should be looping.\r\n */\r\npublic AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[] frames, int delay, boolean loop) {\r\n    this(frames, delay, loop, false);\r\n}",
            "docComment": "Creates a new animating sprite that will change frames every interval. By\r\ndefault the sprite is not animating.\r\n\r\n@param frames\r\n\t\tThe frames of this animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether or not this sprite should be looping.\r\n",
            "metaSrc": "source code",
            "description": "Initializes an AnimatedSprite with a sequence of frames, delay, looping behavior, and animation status.",
            "howItWorks": "The method calls another constructor with additional parameters set to default values. It initializes the AnimatedSprite with the provided frames, delay, and looping behavior.",
            "howToUse": "Create an instance of AnimatedSprite by passing in an array of Sprite objects, a delay value, and a boolean indicating whether the animation should loop.",
            "layer": "Logic",
            "postConditions": [
              "An instance of AnimatedSprite is created with the specified properties."
            ],
            "preConditions": [
              "frames must not be null",
              "delay must be non-negative"
            ],
            "reason": "This method initializes an AnimatedSprite, which is a component of the game's visual representation. It sets up the necessary properties for the sprite to animate correctly.",
            "returns": "Void.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code",
            "description": "The height of the destination draw area."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "directions",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A list of directions to follow."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getPacmanSprites()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A map of animated Pac-Man sprites for all directions.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getPacmanSprites() {\r\n    return this.directionSprite(\"/sprite/pacman.png\", nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES);\r\n}",
            "docComment": "\r\n@return A map of animated Pac-Man sprites for all directions.\r\n",
            "metaSrc": "source code",
            "description": "Creates a map of direction sprites for PacMan from a resource file.",
            "howItWorks": "The method reads the sprite image from the specified resource path, splits it into multiple frames based on the provided number of animation frames, and creates an animated sprite for each direction using these frames. The resulting map is then returned.",
            "howToUse": "Call this method with the path to the sprite image file and the number of animation frames. It will return a map where each key is a direction and each value is the corresponding animated sprite.",
            "layer": "Logic",
            "postConditions": [
              "A non-null map containing direction-specific animated sprites for PacMan is returned.",
              "Each key in the map corresponds to a direction (e.g., UP, DOWN, LEFT, RIGHT)."
            ],
            "preConditions": [
              "The resource file at the specified path must exist and contain a valid PacMan sprite image.",
              "The number of animation frames must be greater than zero."
            ],
            "reason": "This method is responsible for loading and creating direction-specific sprites for PacMan, which are essential for rendering the game's visual elements.",
            "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getSprites()",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
            "kind": "method",
            "sourceText": "/**\r\n * The sprites created by the factory.\r\n *\r\n * @return The sprites for the player created.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSprites() {\r\n    return this.sprites;\r\n}",
            "docComment": "The sprites created by the factory.\r\n\r\n@return The sprites for the player created.\r\n",
            "metaSrc": "source code",
            "description": "Returns the PacManSprites instance used by the PlayerFactory.",
            "howItWorks": "The method simply returns a private member variable 'sprites' of type nl.tudelft.jpacman.sprite.PacManSprites.",
            "howToUse": "Call this method on an instance of PlayerFactory to get the PacManSprites object.",
            "layer": "Logic",
            "postConditions": [
              "The returned object is an instance of nl.tudelft.jpacman.sprite.PacManSprites."
            ],
            "preConditions": [],
            "reason": "This method provides a way to access the sprite resources needed for rendering Pacman and other game elements, which is part of the core game logic.",
            "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "addStartButton(nl.tudelft.jpacman.game.Game)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a button with the caption {@value #START_CAPTION} that starts the\r\n * game.\r\n *\r\n * @param game\r\n * \t\tThe game to start.\r\n */\r\nprivate void addStartButton(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION, game::start);\r\n}",
            "docComment": "Adds a button with the caption {@value #START_CAPTION} that starts the\r\ngame.\r\n\r\n@param game\r\n\t\tThe game to start.\r\n",
            "metaSrc": "source code",
            "description": "Adds a start button to the PacMan UI that starts the game when clicked.",
            "howItWorks": "The method checks if the game object is not null, then adds a button labeled 'START' to the UI. Clicking this button invokes the start method on the provided game instance.",
            "howToUse": "Call this method with an instance of Game to add a start button that will begin the game when clicked.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [
              {
                "condition": "game != null",
                "description": "The game parameter must be a non-null instance of Game."
              }
            ],
            "reason": "This method is responsible for adding a start button to the UI, which triggers the game's start action.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createPinky()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new Pinky / Speedy, the pink Ghost.\r\n *\r\n * @see Pinky\r\n * @return A new Pinky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createPinky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Pinky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.PINK));\r\n}",
            "docComment": "Creates a new Pinky / Speedy, the pink Ghost.\r\n\r\n@see Pinky\r\n@return A new Pinky.\r\n",
            "metaSrc": "source code",
            "description": "Creates a Pinky ghost using the provided sprite factory.",
            "howItWorks": "The method retrieves the sprite for the Pink color from the sprite factory and uses it to create a new Pinky ghost object.",
            "howToUse": "Call this method on an instance of GhostFactory to get a Pinky ghost.",
            "layer": "Logic",
            "postConditions": [
              "A new Pinky ghost object is created and returned."
            ],
            "preConditions": [
              "The sprite factory must be properly initialized with ghost sprites for all colors."
            ],
            "reason": "This method is necessary for creating a Pinky ghost, which is an essential part of the game logic.",
            "returns": "A new instance of nl.tudelft.jpacman.npc.Ghost representing a Pinky ghost.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Utility to load {@link Sprite}s.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "SpriteStore",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "The SpriteStore class manages a collection of sprites and provides methods to load and create animated sprites.",
            "howItWorks": "Calls the superclass constructor and initializes a HashMap to store sprite mappings.",
            "howToUse": "Create an instance of SpriteStore by calling its default constructor.",
            "layer": "Data",
            "parameters": [
              {
                "description": "A map to store sprite mappings.",
                "name": "spriteMap",
                "type": "java.util.Map<java.lang.String, nl.tudelft.jpacman.sprite.Sprite>"
              }
            ],
            "reason": "This class is responsible for managing sprite loading and caching, which is a core functionality of the game.",
            "returns": "nl.tudelft.jpacman.sprite.SpriteStore - The newly created instance of SpriteStore.",
            "stereotype": "Creational",
            "contains Functions": {
              "<init>()": {
                "description": "Initializes a new instance of the SpriteStore class.",
                "docComment": "Create a new sprite store.",
                "howItWorks": "Calls the superclass constructor and initializes a HashMap to store sprite mappings.",
                "howToUse": "Create an instance of SpriteStore by calling its default constructor.",
                "layer": "Data",
                "reason": "This method initializes the necessary data structure for storing sprites, which is a core functionality of the SpriteStore class.",
                "returns": "The newly created instance of SpriteStore.",
                "stereotype": "Creational"
              },
              "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)": {
                "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                "docComment": "Creates a new {@link AnimatedSprite} from a base image.",
                "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                "layer": "Logic",
                "params": [
                  {
                    "name": "baseImage",
                    "type": "nl.tudelft.jpacman.sprite.Sprite"
                  },
                  {
                    "name": "frames",
                    "type": "int"
                  },
                  {
                    "name": "delay",
                    "type": "int"
                  },
                  {
                    "name": "loop",
                    "type": "boolean"
                  }
                ],
                "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                "returns": "Nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                "stereotype": "Creational"
              },
              "loadSprite(java.lang.String)": {
                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                "docComment": "Loads a sprite from a resource on the class path. Sprites are loaded once, and then stored in the store so that they can be efficiently retrieved.",
                "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                "layer": "Logic",
                "params": [
                  {
                    "name": "resource",
                    "type": "java.lang.String"
                  }
                ],
                "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                "returns": "Nl.tudelft.jpacman.sprite.Sprite.",
                "stereotype": "Accessor"
              },
              "loadSpriteFromResource(java.lang.String)": {
                "description": "Loads a sprite from a resource file.",
                "docComment": "Loads a sprite from a resource on the class path.",
                "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                "layer": "Logic",
                "params": [
                  {
                    "name": "resource",
                    "type": "java.lang.String"
                  }
                ],
                "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                "returns": "Nl.tudelft.jpacman.sprite.Sprite.",
                "stereotype": "Creational"
              }
            },
            "contains Variables": [
              {
                "name": "spriteMap",
                "type": "java.util.Map<java.lang.String, nl.tudelft.jpacman.sprite.Sprite>"
              }
            ],
            "project Description": "a Pacman implementation in Java",
            "project Name": "jpacman",
            "structure Inhertis From": [],
            "structure Name": "nl.tudelft.jpacman.sprite.SpriteStore",
            "structure Type": "class",
            "keywords": [
              "Sprite",
              "Animation",
              "Resource Loading"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "invariant(nl.tudelft.jpacman.board.Square)",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
            "kind": "method",
            "sourceText": "/**\r\n * Verifies that all occupants on this square have indeed listed this square\r\n * as the square they are currently occupying.\r\n *\r\n * @return <code>true</code> iff all occupants of this square have this\r\nsquare listed as the square they are currently occupying.\r\n */\r\nprotected final boolean invariant(nl.tudelft.jpacman.board.Square this) {\r\n    for (nl.tudelft.jpacman.board.Unit occupant : this.occupants) {\r\n        if (occupant.hasSquare() && (occupant.getSquare() != this)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
            "docComment": "Verifies that all occupants on this square have indeed listed this square\r\nas the square they are currently occupying.\r\n\r\n@return <code>true</code> iff all occupants of this square have this\r\nsquare listed as the square they are currently occupying.\r\n",
            "metaSrc": "source code",
            "description": "Checks if a square in the game board is invariant by ensuring no unit occupies another square except itself.",
            "howItWorks": "Iterates through all occupants of the square and verifies that each occupant's square reference points back to the current square. If any occupant does not meet this condition, the method returns false; otherwise, it returns true.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.board.Square to verify its invariance.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if no unit occupies another square except itself.",
              "Returns false if any occupant's square reference does not point back to the current square."
            ],
            "preConditions": [],
            "reason": "Ensures that each unit is correctly placed on its designated square, maintaining the integrity of the game board state.",
            "returns": "A boolean indicating whether the square is invariant or not.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The variation in intervals, this makes the ghosts look more dynamic and\r\n * less predictable.\r\n */\r\nprivate static final int INTERVAL_VARIATION = 50;",
            "visibility": "private",
            "simpleName": "INTERVAL_VARIATION",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.looping",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Whether is animation should be looping or not.\r\n */\r\nprivate final boolean looping;",
            "visibility": "private",
            "simpleName": "looping",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.looping",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A pellet, one of the little dots Pac-Man has to collect.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Pellet",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "Represents a pellet in the Pacman game, which is a collectible item that provides points when collected.",
            "howItWorks": "The constructor initializes the Pellet object by calling the superclass constructor, setting the image property to the provided sprite, and setting the value property to the provided points.",
            "howToUse": "Create a new Pellet object by passing the number of points and a sprite to its constructor.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The point value of this pellet.",
                "name": "points",
                "type": "int"
              },
              {
                "description": "The sprite of this pellet.",
                "name": "sprite",
                "type": "nl.tudelft.jpacman.sprite.Sprite"
              }
            ],
            "reason": "This method is responsible for creating a new pellet object with specific properties, which is part of the game logic.",
            "returns": "A new instance of the Pellet class.",
            "stereotype": "Creational",
            "keywords": [
              "Pellet",
              "Pacman",
              "Game Logic",
              "Collectible",
              "Points"
            ],
            "roleStereotype": "Information Holder"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.sprites",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The animations for every direction.\r\n */\r\nprivate final java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprites;",
            "visibility": "private",
            "simpleName": "sprites",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.sprites",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.util.Map)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new \"Pinky\", a.k.a. \"Speedy\".\r\n *\r\n * @param spriteMap\r\n * \t\tThe sprites for this ghost.\r\n */\r\npublic Pinky(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> spriteMap) {\r\n    super(spriteMap, nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL, nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION);\r\n}",
            "docComment": "Creates a new \"Pinky\", a.k.a. \"Speedy\".\r\n\r\n@param spriteMap\r\n\t\tThe sprites for this ghost.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Pinky class with sprite map.",
            "howItWorks": "The method calls the superclass constructor with the sprite map, move interval, and interval variation for Pinky.",
            "howToUse": "Create an instance of Pinky by passing a Map containing Direction-Sprite pairs.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of Pinky is created with the provided sprite map."
            ],
            "preConditions": [
              "spriteMap must not be null."
            ],
            "reason": "This method is responsible for creating a new Pinky ghost with the provided sprite map. It initializes the Pinky object by calling its superclass constructor with specific parameters related to movement intervals and sprite mapping.",
            "returns": "A new instance of the Pinky class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createGround()",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
            "docComment": "Creates a new square that can be occupied by any unit.\r\n\r\n@return A new square that can be occupied by any unit.\r\n",
            "metaSrc": "source code",
            "description": "Creates a ground square in the board.",
            "howItWorks": "The method retrieves a ground sprite using PacManSprites.getGroundSprite() and then creates a new Ground object with this sprite. The newly created ground square is returned.",
            "howToUse": "Call this method on an instance of BoardFactory to get a new ground square.",
            "layer": "Logic",
            "postConditions": [
              "A new nl.tudelft.jpacman.board.Square representing the ground should be returned."
            ],
            "preConditions": [
              "PacManSprites.getGroundSprite() must be called successfully to retrieve a valid sprite."
            ],
            "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
            "returns": "nl.tudelft.jpacman.board.Square",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "levelLost()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
            "kind": "method",
            "sourceText": "/**\r\n * The level has been lost. Typically the level should be stopped when\r\n * this event is received.\r\n */\r\nvoid levelLost();",
            "docComment": "The level has been lost. Typically the level should be stopped when\r\nthis event is received.\r\n",
            "metaSrc": "source code",
            "description": "A method that indicates the level has been lost in a Pacman game.",
            "howItWorks": "This method is called when the player loses a level. It does not take any parameters and does not return anything.",
            "howToUse": "Call this method whenever the game logic determines that the player has lost the current level.",
            "layer": "Logic",
            "postConditions": [
              "The game state should reflect that the player has lost the current level."
            ],
            "preConditions": [
              "The game should be in progress and the player's actions have led to losing the level."
            ],
            "reason": "This method is necessary for managing the flow of the game when a player loses a level.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code",
            "description": "The width of the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "<init>(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Create a new single player game for the provided level and player.\r\n *\r\n * @param player\r\n * \t\tThe player.\r\n * @param level\r\n * \t\tThe level.\r\n * @param pointCalculator\r\n * \t\tThe way to calculate points upon collisions.\r\n */\r\nprotected SinglePlayerGame(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.level.Level level, nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    super(pointCalculator);\r\n    assert player != null;\r\n    assert level != null;\r\n    this.player = player;\r\n    this.level = level;\r\n    this.level.registerPlayer(player);\r\n}",
            "docComment": "Create a new single player game for the provided level and player.\r\n\r\n@param player\r\n\t\tThe player.\r\n@param level\r\n\t\tThe level.\r\n@param pointCalculator\r\n\t\tThe way to calculate points upon collisions.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new single-player game with a player, level, and point calculator.",
            "howItWorks": "The constructor initializes the base Game class with the provided point calculator, asserts that the player and level are not null, assigns the player and level to instance variables, and registers the player in the level.",
            "howToUse": "Create an instance of SinglePlayerGame by passing a Player, Level, and PointCalculator to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "The player is registered in the level",
              "The game is initialized with the provided components"
            ],
            "preConditions": [
              "player is not null",
              "level is not null"
            ],
            "reason": "This method initializes a single-player game by setting up the necessary components and registering the player in the level.",
            "returns": "A new instance of SinglePlayerGame with the provided player, level, and point calculator.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "delay",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The delay between frames."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getMostSpecificClass(java.util.Map,java.lang.Class)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
            "kind": "method",
            "sourceText": "/**\r\n * Figures out the most specific class that is listed in the map. I.e. if A\r\n * extends B and B is listed while requesting A, then B will be returned.\r\n *\r\n * @param map\r\n * \t\tThe map with the key collection to find a matching class in.\r\n * @param key\r\n * \t\tThe class to search the most suitable key for.\r\n * @return The most specific class from the key collection.\r\n */\r\nprivate java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> getMostSpecificClass(java.util.Map<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, ? extends java.lang.Object> map, java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> key) {\r\n    java.util.List<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>> collideeInheritance = this.getInheritance(key);\r\n    for (java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> pointer : collideeInheritance) {\r\n        if (map.containsKey(pointer)) {\r\n            return pointer;\r\n        }\r\n    }\r\n    return null;\r\n}",
            "docComment": "Figures out the most specific class that is listed in the map. I.e. if A\r\nextends B and B is listed while requesting A, then B will be returned.\r\n\r\n@param map\r\n\t\tThe map with the key collection to find a matching class in.\r\n@param key\r\n\t\tThe class to search the most suitable key for.\r\n@return The most specific class from the key collection.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the most specific class from a map based on a given key.",
            "howItWorks": "The method retrieves a list of all classes that are subclasses or implementors of the given key class using another method `getInheritance`. It then iterates through this list and checks if each class is contained in the map. The first matching class is returned. If no match is found, it returns null.",
            "howToUse": "Call this method with a map and a key class. It will return the most specific class found in the map that extends or implements the key class.",
            "layer": "Logic",
            "postConditions": [
              "If a matching class is found, it will be returned.",
              "If no matching class is found, null will be returned."
            ],
            "preConditions": [
              "The map must not be null.",
              "The key class must not be null."
            ],
            "reason": "This method is used to determine the most specific class that matches a given key from a map, which is essential for collision handling in the game logic.",
            "returns": "java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createPellet()",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new pellet.\r\n *\r\n * @return The new pellet.\r\n */\r\npublic nl.tudelft.jpacman.level.Pellet createPellet() {\r\n    return new nl.tudelft.jpacman.level.Pellet(nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE, this.sprites.getPelletSprite());\r\n}",
            "docComment": "Creates a new pellet.\r\n\r\n@return The new pellet.\r\n",
            "metaSrc": "source code",
            "description": "Creates a new pellet in the game.",
            "howItWorks": "The method creates a new Pellet object with a predefined value and sprite using the PelletSprite obtained from PacManSprites.",
            "howToUse": "Call this method on an instance of LevelFactory to create a new pellet.",
            "layer": "Logic",
            "postConditions": [
              "A new Pellet object is created and returned."
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating pellets, which are collectible items in Pacman. It needs to be part of the logic layer as it involves game mechanics and object creation.",
            "returns": "nl.tudelft.jpacman.level.Pellet",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The y-coordinate of the top-left corner where the sprite should be drawn."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "withinBorders(int,int)",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Determines whether the given <code>x,y</code> position is on this board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (row) to test.\r\n * @param y\r\n * \t\tThe <code>y</code> position (column) to test.\r\n * @return <code>true</code> iff the position is on this board.\r\n */\r\npublic boolean withinBorders(int x, int y) {\r\n    return (((x >= 0) && (x < this.getWidth())) && (y >= 0)) && (y < this.getHeight());\r\n}",
            "docComment": "Determines whether the given <code>x,y</code> position is on this board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (row) to test.\r\n@param y\r\n\t\tThe <code>y</code> position (column) to test.\r\n@return <code>true</code> iff the position is on this board.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given coordinates are within the borders of the board.",
            "howItWorks": "The method checks if both x is greater than or equal to 0 and less than the width of the board, and if y is greater than or equal to 0 and less than the height of the board. It returns true if all conditions are met, otherwise false.",
            "howToUse": "Call this method with x and y coordinates to check if they are within the board's boundaries.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if x and y are within the board's borders.",
              "The method returns false if x or y are outside the board's borders."
            ],
            "preConditions": [
              "x >= 0",
              "y >= 0"
            ],
            "reason": "This method is used to ensure that operations on the board occur only within valid positions, preventing out-of-bounds errors.",
            "returns": "A boolean indicating whether the coordinates are within the board's borders.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextAiMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
            "kind": "method",
            "sourceText": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * When the ghosts are not patrolling in their home corners (Blinky:\r\n * top-right, Pinky: top-left, Inky: bottom-right, Clyde: bottom-left),\r\n * Blinky will attempt to shorten the distance between Pac-Man and himself.\r\n * If he has to choose between shortening the horizontal or vertical\r\n * distance, he will choose to shorten whichever is greatest. For example,\r\n * if Pac-Man is four grid spaces to the left, and seven grid spaces above\r\n * Blinky, he'll try to move up towards Pac-Man before he moves to the left.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    // TODO Blinky should patrol his corner every once in a while\r\n    // TODO Implement his actual behaviour instead of simply chasing.\r\n    nl.tudelft.jpacman.board.Unit nearest = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (nearest == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert nearest.hasSquare();\r\n    nl.tudelft.jpacman.board.Square target = nearest.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), target, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "Calculates the shortest path from this ghost to the nearest player and returns the first direction of that path. If no player is found or no path can be calculated, it returns an empty Optional.",
            "metaSrc": "source code",
            "description": "Calculates the next AI move for Blinky in a Pacman game.",
            "howItWorks": "Finds the nearest player, calculates the shortest path to that player, and returns the first direction of that path. If no player is found or no path can be calculated, it returns an empty Optional.",
            "otherScriptsUsed": {
              "nl.tudelft.jpacman.board.Unit.getSquare()": "Retrieves the square that a unit is currently occupying.",
              "nl.tudelft.jpacman.board.Unit.hasSquare()": "Checks if the unit has a square.",
              "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)": "Finds the nearest unit of a specific type from the current location on the game board.",
              "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)": "Calculates the shortest path from one square to another on a board for a given unit."
            },
            "possibleLayers": [
              "Logic"
            ],
            "postconditions": [],
            "preconditions": [
              "this.hasSquare() must return true"
            ],
            "returns": "An Optional containing the next direction for Blinky's AI move, or an empty Optional if no valid move can be determined."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a two-way collision interaction to this collection, i.e. the\r\n * collision handler will be used for both C1 versus C2 and C2 versus C1.\r\n *\r\n * @param <C1>\r\n * \t\tThe collider type.\r\n * @param <C2>\r\n * \t\tThe collidee (unit that was moved into) type.\r\n * @param collider\r\n * \t\tThe collider type.\r\n * @param collidee\r\n * \t\tThe collidee type.\r\n * @param handler\r\n * \t\tThe handler that handles the collision.\r\n */\r\npublic <C1 extends nl.tudelft.jpacman.board.Unit, C2 extends nl.tudelft.jpacman.board.Unit> void onCollision(java.lang.Class<C1> collider, java.lang.Class<C2> collidee, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<C1, C2> handler) {\r\n    this.onCollision(collider, collidee, true, handler);\r\n}",
            "docComment": "Adds a two-way collision interaction to this collection, i.e. the\r\ncollision handler will be used for both C1 versus C2 and C2 versus C1.\r\n\r\n@param <C1>\r\n\t\tThe collider type.\r\n@param <C2>\r\n\t\tThe collidee (unit that was moved into) type.\r\n@param collider\r\n\t\tThe collider type.\r\n@param collidee\r\n\t\tThe collidee type.\r\n@param handler\r\n\t\tThe handler that handles the collision.\r\n",
            "metaSrc": "source code",
            "description": "Adds a collision handler to the CollisionInteractionMap and optionally adds a symmetric handler if symetric is true.",
            "howItWorks": "The method adds a collision handler for the specified collider and collidee types. If symetric is true, it also adds a symmetric handler.",
            "howToUse": "Call this method with the appropriate classes and handler to add collision interactions to the CollisionInteractionMap.",
            "layer": "Logic",
            "postConditions": [
              "The specified collision handler will be added to the CollisionInteractionMap.",
              "If symetric is true, a symmetric handler will also be added."
            ],
            "preConditions": [
              "The collider and collidee classes must be subclasses of nl.tudelft.jpacman.board.Unit.",
              "A valid CollisionHandler instance must be provided."
            ],
            "reason": "This method is part of the logic layer as it deals with handling collisions between different units in the game, which is a core gameplay mechanic.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A top-down view of a matrix of {@link Square}s.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Board",
            "qualifiedName": "nl.tudelft.jpacman.board.Board",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Creates and launches the JPacMan UI.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Launcher",
            "qualifiedName": "nl.tudelft.jpacman.Launcher",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.game",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private nl.tudelft.jpacman.game.Game game;",
            "visibility": "private",
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.game",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "occupant",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit to be added to the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(java.util.Map)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Create a new key listener based on a set of keyCode-action pairs.\r\n *\r\n * @param keyMappings\r\n * \t\tThe mappings of keyCode to action.\r\n */\r\nPacKeyListener(java.util.Map<java.lang.Integer, nl.tudelft.jpacman.ui.Action> keyMappings) {\r\n    super();\r\n    assert keyMappings != null;\r\n    this.mappings = keyMappings;\r\n}",
            "docComment": "Create a new key listener based on a set of keyCode-action pairs.\r\n\r\n@param keyMappings\r\n\t\tThe mappings of keyCode to action.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getParent()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getParent()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getParent()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The parent node, or <code>null</code> if this node is a root\r\nnode.\r\n */\r\nprivate nl.tudelft.jpacman.npc.ghost.Navigation.Node getParent() {\r\n    return this.parent;\r\n}",
            "docComment": "\r\n@return The parent node, or <code>null</code> if this node is a root\r\nnode.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "split(int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
            "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
            "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
            "layer": "Logic",
            "postConditions": [
              "If the specified coordinates are within bounds, the returned sprite will represent a sub-section of the current sprite with the specified dimensions. If out of bounds, an empty sprite is returned.",
              "The returned sprite will have its own BufferedImage that does not affect the original sprite."
            ],
            "preConditions": [
              "The x and y coordinates must be non-negative integers."
            ],
            "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
            "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "clazz",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "level",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The level on which the game is played."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "handler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The handler to be invoked when a collision occurs between the collider and collidee."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The destination x coordinate to start drawing."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "graphics",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The graphics context to draw on."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The class of the unit being collided with."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.background;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a game for a single level with one player.\r\n *\r\n * @param level\r\n * \t\tThe level to create a game for.\r\n * @param pointCalculator\r\n * \t\tThe way to calculate points upon collisions.\r\n * @return A new single player game.\r\n */\r\npublic nl.tudelft.jpacman.game.Game createSinglePlayerGame(nl.tudelft.jpacman.level.Level level, nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    return new nl.tudelft.jpacman.game.SinglePlayerGame(this.playerFactory.createPacMan(), level, pointCalculator);\r\n}",
            "docComment": "Creates a game for a single level with one player.\r\n\r\n@param level\r\n\t\tThe level to create a game for.\r\n@param pointCalculator\r\n\t\tThe way to calculate points upon collisions.\r\n@return A new single player game.\r\n",
            "metaSrc": "source code",
            "description": "Creates a single-player game instance.",
            "howItWorks": "The method instantiates a new SinglePlayerGame using the provided Level and PointCalculator, along with a PacMan player created by calling PlayerFactory.createPacMan().",
            "howToUse": "Call this method with a Level object and a PointCalculator object to create a new single-player game.",
            "layer": "Logic",
            "postConditions": [
              "A new SinglePlayerGame instance is returned.",
              "The game is ready to be started."
            ],
            "preConditions": [
              "A valid Level object must be provided.",
              "A valid PointCalculator object must be provided."
            ],
            "reason": "This method is responsible for setting up a single-player game environment, which involves creating a PacMan player and combining it with a level and point calculator to form a complete game instance.",
            "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "node",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The current node in the pathfinding algorithm."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * We only need to load images once, so we keep track\r\n * of them in a hash map.\r\n */\r\nprivate final java.util.Map<java.lang.String, nl.tudelft.jpacman.sprite.Sprite> spriteMap;",
            "visibility": "private",
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.lastUpdate",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The {@link System#currentTimeMillis()} stamp of the last update.\r\n */\r\nprivate long lastUpdate;",
            "visibility": "private",
            "simpleName": "lastUpdate",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.lastUpdate",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "sprite",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprite to be used as the background of the wall."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The y-coordinate of the top-left corner of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isAnyPlayerAlive()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns <code>true</code> iff at least one of the players in this level\r\n * is alive.\r\n *\r\n * @return <code>true</code> if at least one of the registered players is\r\nalive.\r\n */\r\npublic boolean isAnyPlayerAlive() {\r\n    for (nl.tudelft.jpacman.level.Player player : this.players) {\r\n        if (player.isAlive()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
            "docComment": "Returns <code>true</code> iff at least one of the players in this level\r\nis alive.\r\n\r\n@return <code>true</code> if at least one of the registered players is\r\nalive.\r\n",
            "metaSrc": "source code",
            "description": "Checks if any player in the game is alive.",
            "howItWorks": "The method iterates through each player in the list and checks if they are alive using the isAlive() method. If any player is found to be alive, the method returns true; otherwise, it returns false after checking all players.",
            "howToUse": "Call this method to check if there are any players left in the game that are still alive.",
            "layer": "Logic",
            "postConditions": [
              "The returned boolean indicates whether any player in the game is still alive."
            ],
            "preConditions": [
              "The list of players should not be null."
            ],
            "reason": "This method is used to determine if the game should continue running or if all players have been defeated.",
            "returns": "A boolean indicating whether any player is alive.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The class of the unit that collides with another unit."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.start()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "start()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.start()",
            "kind": "method",
            "sourceText": "/**\r\n * Starts or resumes this level, allowing movement and (re)starting the\r\n * NPCs.\r\n */\r\npublic void start() {\r\n    synchronized(this.startStopLock) {\r\n        if (this.isInProgress()) {\r\n            return;\r\n        }\r\n        this.startNPCs();\r\n        this.inProgress = true;\r\n        this.updateObservers();\r\n    }\r\n}",
            "docComment": "Starts or resumes this level, allowing movement and (re)starting the\r\nNPCs.\r\n",
            "metaSrc": "source code",
            "description": "Starts the movement of NPCs (Ghosts) in a Pacman level and sets the game as in progress.",
            "howItWorks": "The method checks if the level is already in progress. If not, it starts the NPCs and sets the 'inProgress' flag to true. It then notifies observers about the game's state.",
            "howToUse": "Call this method on an instance of the Level class when you want to start the game or resume it after a pause.",
            "layer": "Logic",
            "postConditions": [
              "NPCs should start moving.",
              "The 'inProgress' flag should be set to true.",
              "Observers should be notified of the game's state."
            ],
            "preConditions": [
              "The Level instance should be properly initialized."
            ],
            "reason": "This method is responsible for initiating the movement of NPCs and setting the game state to 'in progress'. It ensures that these actions are synchronized to avoid race conditions.",
            "returns": "Void. The method does not return any value.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "resource",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The resource path."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collisions",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final nl.tudelft.jpacman.level.CollisionMap collisions = this.defaultCollisions();",
            "visibility": "private",
            "simpleName": "collisions",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collisions",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "delay",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The delay between each frame in milliseconds."
          }
        }
      },
      {
        "data": {
          "id": "int",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "int",
            "qualifiedName": "int",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
            "kind": "method",
            "sourceText": "private nl.tudelft.jpacman.board.Square followPath(java.util.List<nl.tudelft.jpacman.board.Direction> directions, nl.tudelft.jpacman.board.Square start) {\r\n    nl.tudelft.jpacman.board.Square destination = start;\r\n    for (nl.tudelft.jpacman.board.Direction d : directions) {\r\n        destination = destination.getSquareAt(d);\r\n    }\r\n    return destination;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the destination square by following a list of directions from a starting square.",
            "howItWorks": "The method iterates through each direction in the list, updating the current square to the next adjacent square until all directions are processed. The final square is returned as the destination.",
            "howToUse": "Call this method with a list of directions and a starting square to get the destination square.",
            "layer": "Logic",
            "postConditions": [
              "The returned square will be one of the squares adjacent to the starting square in the order specified by the directions list."
            ],
            "preConditions": [
              "The list of directions should not be null or empty.",
              "The starting square should not be null."
            ],
            "reason": "This method is part of the logic layer as it processes application and domain logic related to moving a ghost in Pacman.",
            "returns": "nl.tudelft.jpacman.board.Square",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.background;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "ghost",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code",
            "description": "The height of the sprite to draw."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a key listener to the UI.\r\n *\r\n * @param keyCode\r\n * \t\tThe key code of the key as used by {@link java.awt.event.KeyEvent}.\r\n * @param action\r\n * \t\tThe action to perform when the key is pressed.\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder addKey(java.lang.Integer keyCode, nl.tudelft.jpacman.ui.Action action) {\r\n    assert keyCode != null;\r\n    assert action != null;\r\n    this.keyMappings.put(keyCode, action);\r\n    return this;\r\n}",
            "docComment": "Adds a key listener to the UI.\r\n\r\n@param keyCode\r\n\t\tThe key code of the key as used by {@link java.awt.event.KeyEvent}.\r\n@param action\r\n\t\tThe action to perform when the key is pressed.\r\n@return The builder.\r\n",
            "metaSrc": "source code",
            "description": "Adds a key mapping to the PacManUiBuilder.",
            "howItWorks": "The method checks if the keyCode and action are not null, then adds them to the keyMappings map. It returns the current instance of PacManUiBuilder to allow for method chaining.",
            "howToUse": "Call this method with a key code and an action to map that key to a specific action in the game.",
            "layer": "UI",
            "postConditions": [
              "The key code is mapped to the specified action in the keyMappings map."
            ],
            "preConditions": [
              "keyCode != null",
              "action != null"
            ],
            "reason": "This method allows for customizing user input handling in the Pacman game.",
            "returns": "nl.tudelft.jpacman.ui.PacManUiBuilder",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "source",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The input stream containing the map data."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghost",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The ghost involved in the collision."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.image",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite of this unit.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.Sprite image;",
            "visibility": "private",
            "simpleName": "image",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet.image",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "/**\r\n * Links this square to a neighbour in the given direction. Note that this\r\n * is a one-way connection.\r\n *\r\n * @param neighbour\r\n * \t\tThe neighbour to link.\r\n * @param direction\r\n * \t\tThe direction the new neighbour is in, as seen from this cell.\r\n */\r\npublic void link(nl.tudelft.jpacman.board.Square neighbour, nl.tudelft.jpacman.board.Direction direction) {\r\n    this.neighbours.put(direction, neighbour);\r\n    assert this.invariant();\r\n}",
            "docComment": "Links this square to a neighbour in the given direction. Note that this\r\nis a one-way connection.\r\n\r\n@param neighbour\r\n\t\tThe neighbour to link.\r\n@param direction\r\n\t\tThe direction the new neighbour is in, as seen from this cell.\r\n",
            "metaSrc": "source code",
            "description": "Links a neighboring square in a specific direction.",
            "howItWorks": "The method stores the neighbor in a map using the direction as the key. It then asserts that the object's invariant holds true.",
            "howToUse": "Call this method on an instance of Square with a neighboring Square and a Direction enum value.",
            "layer": "Logic",
            "postConditions": [
              "The neighbor is stored in the neighbors map with the given direction as the key",
              "The object's invariant is asserted to be true"
            ],
            "preConditions": [
              "neighbour is not null",
              "direction is a valid Direction enum value"
            ],
            "reason": "This method is used to establish connections between squares in a grid, which is essential for the game logic.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.background",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The background for this square.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.Sprite background;",
            "visibility": "private",
            "simpleName": "background",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.background",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.awt.Image)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new sprite from an image.\r\n *\r\n * @param img\r\n * \t\tThe image to create a sprite from.\r\n */\r\npublic ImageSprite(java.awt.Image img) {\r\n    super();\r\n    this.image = img;\r\n}",
            "docComment": "Creates a new sprite from an image.\r\n\r\n@param img\r\n\t\tThe image to create a sprite from.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.neighbours",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The collection of squares adjacent to this square.\r\n */\r\nprivate final java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.board.Square> neighbours;",
            "visibility": "private",
            "simpleName": "neighbours",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.neighbours",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "args",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.main(java.lang.String[]).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "Command line arguments (not used in this method)."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.invariant()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "invariant()",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.invariant()",
            "kind": "method",
            "sourceText": "/**\r\n * Whatever happens, the squares on the board can't be null.\r\n *\r\n * @return false if any square on the board is null.\r\n */\r\nprotected final boolean invariant() {\r\n    for (nl.tudelft.jpacman.board.Square[] row : this.board) {\r\n        for (nl.tudelft.jpacman.board.Square square : row) {\r\n            if (square == null) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
            "docComment": "Whatever happens, the squares on the board can't be null.\r\n\r\n@return false if any square on the board is null.\r\n",
            "metaSrc": "source code",
            "description": "Checks if all squares in the board are non-null.",
            "howItWorks": "Iterates through each row and square in the board, returning false if any square is null, otherwise returns true.",
            "howToUse": "Call this method to verify that the board does not contain any null squares.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if all squares are non-null.",
              "The method returns false if any square is null."
            ],
            "preConditions": [
              "The board should be fully initialized before calling this method."
            ],
            "reason": "Ensures that the game board is in a valid state, preventing potential NullPointerExceptions.",
            "returns": "A boolean indicating whether all squares in the board are non-null.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "private void ghostColliding(nl.tudelft.jpacman.npc.Ghost ghost, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (collidedOn instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerVersusGhost(((nl.tudelft.jpacman.level.Player) (collidedOn)), ghost);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic for when a ghost collides with another unit in the game.",
            "howItWorks": "The method checks if the collidedOn object is an instance of Player. If it is, it calls the playerVersusGhost method with the player and ghost as arguments.",
            "howToUse": "Call this method when a collision event occurs between a ghost and another unit in the game.",
            "layer": "Logic",
            "postConditions": [
              "If the collidedOn object is a player, the playerVersusGhost method will be called to handle the collision logic."
            ],
            "preConditions": [
              "A collision event has occurred between a ghost and another unit."
            ],
            "reason": "This method is part of the game logic, specifically handling collisions between ghosts and other units in the game. It does not interact directly with the user interface or data access, making it a candidate for the Logic layer.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.direction",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The direction for this node, which is <code>null</code> for the root\r\n * node.\r\n */\r\nprivate final nl.tudelft.jpacman.board.Direction direction;",
            "visibility": "private",
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.direction",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "keyMappings",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "A map of key codes to actions that should be performed when those keys are pressed."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(nl.tudelft.jpacman.board.Square[][])",
            "qualifiedName": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new board.\r\n *\r\n * @param grid\r\n * \t\tThe grid of squares with grid[x][y] being the square at column\r\n * \t\tx, row y.\r\n */\r\n@java.lang.SuppressWarnings(\"PMD.ArrayIsStoredDirectly\")\r\nBoard(nl.tudelft.jpacman.board.Square[][] grid) {\r\n    super();\r\n    assert grid != null;\r\n    this.board = grid;\r\n    assert this.invariant() : \"Initial grid cannot contain null squares\";\r\n}",
            "docComment": "Creates a new board.\r\n\r\n@param grid\r\n\t\tThe grid of squares with grid[x][y] being the square at column\r\n\t\tx, row y.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new board with the given grid of squares.",
            "howItWorks": "The constructor sets the board field and validates that no square in the grid is null using assertions.",
            "howToUse": "Create an instance of Board by passing a 2D array of Square objects to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "this.board is set to the provided grid",
              "assertion checks pass, ensuring all squares are non-null"
            ],
            "preConditions": [
              "grid != null",
              "All elements in grid must be non-null"
            ],
            "reason": "This method initializes a new board instance with the provided grid, ensuring all squares are non-null.",
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "traveller",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit that is currently traversing the board."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The width of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.INKY",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int INKY = 1;",
            "visibility": "private",
            "simpleName": "INKY",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.INKY",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "unit",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit attempting to move to this square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextAiMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
            "kind": "method",
            "sourceText": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * Inky has the most complicated AI of all. Inky considers two things: Blinky's\r\n * location, and the location two grid spaces ahead of Pac-Man. Inky\r\n * draws a line from Blinky to the spot that is two squares in front of\r\n * Pac-Man and extends that line twice as far. Therefore, if Inky is\r\n * alongside Blinky when they are behind Pac-Man, Inky will usually\r\n * follow Blinky the whole time. But if Inky is in front of Pac-Man when\r\n * Blinky is far behind him, Inky tends to want to move away from Pac-Man\r\n * (in reality, to a point very far ahead of Pac-Man). Inky is affected\r\n * by a similar targeting bug that affects Speedy. When Pac-Man is moving or\r\n * facing up, the spot Inky uses to draw the line is two squares above\r\n * and left of Pac-Man.\r\n * </p>\r\n *\r\n * <p>\r\n * <b>Implementation:</b>\r\n * To actually implement this in jpacman we have the following approximation:\r\n * first determine the square of Blinky (A) and the square 2\r\n * squares away from Pac-Man (B). Then determine the shortest path from A to\r\n * B regardless of terrain and walk that same path from B. This is the\r\n * destination.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit blinky = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.npc.ghost.Blinky.class, this.getSquare());\r\n    nl.tudelft.jpacman.board.Unit player = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if ((blinky == null) || (player == null)) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert player.hasSquare();\r\n    nl.tudelft.jpacman.board.Square playerDestination = player.squaresAheadOf(nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> firstHalf = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(blinky.getSquare(), playerDestination, null);\r\n    if (firstHalf == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    nl.tudelft.jpacman.board.Square destination = this.followPath(firstHalf, playerDestination);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), destination, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "{@inheritDoc }\r\n\r\n<p>\r\nInky has the most complicated AI of all. Inky considers two things: Blinky's\r\nlocation, and the location two grid spaces ahead of Pac-Man. Inky\r\ndraws a line from Blinky to the spot that is two squares in front of\r\nPac-Man and extends that line twice as far. Therefore, if Inky is\r\nalongside Blinky when they are behind Pac-Man, Inky will usually\r\nfollow Blinky the whole time. But if Inky is in front of Pac-Man when\r\nBlinky is far behind him, Inky tends to want to move away from Pac-Man\r\n(in reality, to a point very far ahead of Pac-Man). Inky is affected\r\nby a similar targeting bug that affects Speedy. When Pac-Man is moving or\r\nfacing up, the spot Inky uses to draw the line is two squares above\r\nand left of Pac-Man.\r\n</p>\r\n\r\n<p>\r\n<b>Implementation:</b>\r\nTo actually implement this in jpacman we have the following approximation:\r\nfirst determine the square of Blinky (A) and the square 2\r\nsquares away from Pac-Man (B). Then determine the shortest path from A to\r\nB regardless of terrain and walk that same path from B. This is the\r\ndestination.\r\n</p>\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Collides the two units and handles the result of the collision, which may\r\n * be nothing at all.\r\n *\r\n * @param <C1>\r\n * \t\tThe collider type.\r\n * @param <C2>\r\n * \t\tThe collidee (unit that was moved into) type.\r\n * @param collider\r\n * \t\tThe unit that causes the collision by occupying a square with\r\n * \t\tanother unit already on it.\r\n * @param collidee\r\n * \t\tThe unit that is already on the square that is being invaded.\r\n */\r\n<C1 extends nl.tudelft.jpacman.board.Unit, C2 extends nl.tudelft.jpacman.board.Unit> void collide(C1 collider, C2 collidee);",
            "docComment": "Collides the two units and handles the result of the collision, which may\r\nbe nothing at all.\r\n\r\n@param <C1>\r\n\t\tThe collider type.\r\n@param <C2>\r\n\t\tThe collidee (unit that was moved into) type.\r\n@param collider\r\n\t\tThe unit that causes the collision by occupying a square with\r\n\t\tanother unit already on it.\r\n@param collidee\r\n\t\tThe unit that is already on the square that is being invaded.\r\n",
            "metaSrc": "source code",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method takes two unit objects as parameters and processes their interaction based on the game's rules. It may change the state of either or both units, such as moving them, changing their properties, or triggering other events.",
            "howToUse": "Call this method whenever two units need to interact within the game environment.",
            "layer": "Logic",
            "postConditions": [
              "The interaction between collider and collidee is processed according to the game's rules."
            ],
            "preConditions": [
              "Both collider and collidee must be instances of nl.tudelft.jpacman.board.Unit."
            ],
            "reason": "This method is responsible for managing the interactions between different units in the game, which falls under the logic layer as it involves application and domain rules.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "newImage(int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
            "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
            "metaSrc": "source code",
            "description": "Creates a new BufferedImage with the specified width and height.",
            "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
            "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
            "layer": "UI",
            "postConditions": [
              "A new BufferedImage is created with the specified dimensions and transparency type."
            ],
            "preConditions": [],
            "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
            "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(java.util.Map,javax.swing.JFrame)",
            "qualifiedName": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Create a new button panel with a button for every action.\r\n *\r\n * @param buttons\r\n * \t\tThe map of caption - action for each button.\r\n * @param parent\r\n * \t\tThe parent frame, used to return window focus.\r\n */\r\nButtonPanel(final java.util.Map<java.lang.String, nl.tudelft.jpacman.ui.Action> buttons, final javax.swing.JFrame parent) {\r\n    super();\r\n    assert buttons != null;\r\n    assert parent != null;\r\n    for (final java.lang.String caption : buttons.keySet()) {\r\n        javax.swing.JButton button = new javax.swing.JButton(caption);\r\n        button.addActionListener((java.awt.event.ActionEvent e) -> {\r\n            buttons.get(caption).doAction();\r\n            parent.requestFocusInWindow();\r\n        });\r\n        this.add(button);\r\n    }\r\n}",
            "docComment": "Create a new button panel with a button for every action.\r\n\r\n@param buttons\r\n\t\tThe map of caption - action for each button.\r\n@param parent\r\n\t\tThe parent frame, used to return window focus.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a ButtonPanel with a map of buttons and a parent JFrame.",
            "howItWorks": "The method iterates over each entry in the buttons map, creates a JButton for each caption, adds an ActionListener that triggers the associated action when clicked, and adds the button to the panel. Assertions ensure that both the buttons map and parent JFrame are not null.",
            "howToUse": "Create an instance of ButtonPanel by passing a map of button captions and corresponding actions, along with a parent JFrame.",
            "layer": "UI",
            "postConditions": [
              "All buttons have been added to the panel",
              "Each button has an ActionListener attached",
              "The parent JFrame has focus when a button is clicked"
            ],
            "preConditions": [
              "buttons is not null",
              "parent is not null"
            ],
            "reason": "This method initializes a user interface component, setting up buttons and their actions. It ensures that the buttons are properly configured and added to the panel.",
            "returns": "Void.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The board on which the level will be created."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.boardPanel",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The panel displaying the game.\r\n */\r\nprivate final nl.tudelft.jpacman.ui.BoardPanel boardPanel;",
            "visibility": "private",
            "simpleName": "boardPanel",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.boardPanel",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.stopNPCs()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "stopNPCs()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.stopNPCs()",
            "kind": "method",
            "sourceText": "/**\r\n * Stops all NPC movement scheduling and interrupts any movements being\r\n * executed.\r\n */\r\nprivate void stopNPCs() {\r\n    for (java.util.Map.Entry<nl.tudelft.jpacman.npc.Ghost, java.util.concurrent.ScheduledExecutorService> entry : this.npcs.entrySet()) {\r\n        java.util.concurrent.ScheduledExecutorService schedule = entry.getValue();\r\n        assert schedule != null;\r\n        schedule.shutdownNow();\r\n    }\r\n}",
            "docComment": "Stops all NPC movement scheduling and interrupts any movements being\r\nexecuted.\r\n",
            "metaSrc": "source code",
            "description": "Stops all non-player characters (NPCs) in the game level.",
            "howItWorks": "Iterates over a map of NPCs and their ScheduledExecutorServices, shutting down each service immediately.",
            "howToUse": "Call this method on an instance of Level to stop all NPCs.",
            "layer": "Logic",
            "postConditions": [
              "All ScheduledExecutorServices associated with the NPCs in the map have been shut down."
            ],
            "preConditions": [
              "The map 'npcs' must not be null."
            ],
            "reason": "This method is necessary to properly clean up resources when the game level is no longer active.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getHeight()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic int getHeight() {\r\n    assert this.currentSprite() != null;\r\n    return this.currentSprite().getHeight();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the height of the current sprite in an animation sequence.",
            "howItWorks": "The method asserts that the current sprite is not null and then returns the height of the current sprite using the getHeight() method of the Sprite class.",
            "howToUse": "Call this method on an instance of AnimatedSprite to get its current sprite's height.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "this.currentSprite() != null"
            ],
            "reason": "This method is part of the logic layer as it deals with retrieving properties of a sprite, which is a core game element.",
            "returns": "int - The height of the sprite in pixels.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
            "docComment": "Returns a map of animated ghost sprites for all directions.\r\n\r\n@param color\r\n\t\tThe colour of the ghost.\r\n@return The Sprite for the ghost.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the sprite for a given ghost color.",
            "howItWorks": "The method first asserts that the input color is not null. It then constructs the resource path based on the ghost color and calls another method `directionSprite` to create the sprite map.",
            "howToUse": "Call this method with a GhostColor enum value to get a map of direction sprites for that ghost.",
            "layer": "Logic",
            "postConditions": [
              "A map of direction sprites is returned, where each key is a Direction enum value and each value is a Sprite object representing the ghost's sprite in that direction."
            ],
            "preConditions": [
              "The input color must be a non-null value from the GhostColor enum."
            ],
            "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
            "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A task that moves an NPC and reschedules itself after it finished.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "NpcMoveTask",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "This class is responsible for managing the movement of non-player characters (NPCs) in a Pacman game. It uses a scheduled executor service to schedule NPC movements at regular intervals.",
            "howItWorks": "The method first determines the next move for the NPC. If a valid move is found, it moves the NPC in that direction and schedules itself to run again after a specified interval using the game service.",
            "howToUse": "Call this method on an instance of `Level$NpcMoveTask` with the appropriate parameters.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The service that executes the task.",
                "name": "service",
                "type": "java.util.concurrent.ScheduledExecutorService"
              },
              {
                "description": "The NPC to move.",
                "name": "npc",
                "type": "nl.tudelft.jpacman.npc.Ghost"
              }
            ],
            "postConditions": [
              "The NPC's position is updated based on its next move.",
              "The task is scheduled to run again after a specified interval."
            ],
            "preConditions": [
              "The `service` parameter must not be null.",
              "The `npc` parameter must not be null."
            ],
            "reason": "This method is responsible for updating the position of an NPC in the game and scheduling itself to run again after a certain interval.",
            "returns": "Void.",
            "stereotype": "Collaborational",
            "keywords": [
              "NpcMoveTask",
              "ScheduledExecutorService",
              "Npc"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isInProgress()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.isInProgress()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return <code>true</code> iff the game is started and in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
            "docComment": "\r\n@return <code>true</code> iff the game is started and in progress.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the game is currently in progress.",
            "howItWorks": "The method returns the value of the private field 'inProgress'.",
            "howToUse": "Call this method to determine whether the game is active or not.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be true if the game is in progress, and false otherwise."
            ],
            "preConditions": [],
            "reason": "This method provides a way to check the current state of the game, which is essential for logic operations within the application.",
            "returns": "A boolean indicating whether the game is currently in progress.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.serialVersionUID",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Default serialisation UID.\r\n */\r\nprivate static final long serialVersionUID = 1L;",
            "visibility": "private",
            "simpleName": "serialVersionUID",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.serialVersionUID",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new node.\r\n *\r\n * @param direction\r\n * \t\tThe direction, which is <code>null</code> for the root\r\n * \t\tnode.\r\n * @param square\r\n * \t\tThe square.\r\n * @param parent\r\n * \t\tThe parent node, which is <code>null</code> for the root\r\n * \t\tnode.\r\n */\r\nNode(nl.tudelft.jpacman.board.Direction direction, nl.tudelft.jpacman.board.Square square, nl.tudelft.jpacman.npc.ghost.Navigation.Node parent) {\r\n    super();\r\n    this.direction = direction;\r\n    this.square = square;\r\n    this.parent = parent;\r\n}",
            "docComment": "Creates a new node.\r\n\r\n@param direction\r\n\t\tThe direction, which is <code>null</code> for the root\r\n\t\tnode.\r\n@param square\r\n\t\tThe square.\r\n@param parent\r\n\t\tThe parent node, which is <code>null</code> for the root\r\n\t\tnode.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.lang.String,java.lang.Throwable)",
            "qualifiedName": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
            "kind": "constructor",
            "sourceText": "/**\r\n * A configuration exception with a root cause and additional explanation.\r\n *\r\n * @param message\r\n * \t\tThe explanation.\r\n * @param cause\r\n * \t\tThe root cause.\r\n */\r\npublic PacmanConfigurationException(java.lang.String message, java.lang.Throwable cause) {\r\n    super(message, cause);\r\n}",
            "docComment": "A configuration exception with a root cause and additional explanation.\r\n\r\n@param message\r\n\t\tThe explanation.\r\n@param cause\r\n\t\tThe root cause.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "window",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The dimensions of the window where the board will be rendered."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "startPositions",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "A list of squares where the ghosts can start their movement."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int SQUARES_AHEAD = 2;",
            "visibility": "private",
            "simpleName": "SQUARES_AHEAD",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
            "kind": "method",
            "sourceText": "/**\r\n * Method called whenever a player meets a ghost.\r\n * It can be used to update the player's points accordingly.\r\n *\r\n * @param player\r\n * \t\tThe player that will die.\r\n * @param ghost\r\n * \t\tThe ghost causing the player to die.\r\n */\r\nvoid collidedWithAGhost(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.npc.Ghost ghost);",
            "docComment": "Method called whenever a player meets a ghost.\r\nIt can be used to update the player's points accordingly.\r\n\r\n@param player\r\n\t\tThe player that will die.\r\n@param ghost\r\n\t\tThe ghost causing the player to die.\r\n",
            "metaSrc": "source code",
            "description": "Handles the logic for when a player collides with a ghost in the game.",
            "howItWorks": "The method updates the game state based on the collision, such as deducting points or ending the game if necessary.",
            "howToUse": "Call this method whenever a collision between a player and a ghost occurs in the game.",
            "layer": "Logic",
            "postConditions": [
              "The game state is updated to reflect the collision between the player and the ghost."
            ],
            "preConditions": [
              "A player object must be instantiated and exist in the game.",
              "A ghost object must be instantiated and exist in the game."
            ],
            "reason": "This method is part of the game logic, specifically handling interactions between players and ghosts.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "action",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The action to be performed when the key is pressed."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player making a move."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getPacManDeathAnimation()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The animation of a dying Pac-Man.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite getPacManDeathAnimation() {\r\n    java.lang.String resource = \"/sprite/dead.png\";\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(baseImage, nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, false);\r\n    animation.setAnimating(false);\r\n    return animation;\r\n}",
            "docComment": "\r\n@return The animation of a dying Pac-Man.\r\n",
            "metaSrc": "source code",
            "description": "Loads the death animation for PacMan.",
            "howItWorks": "The method loads a resource file containing the image for PacMan's death animation, creates an animated sprite from it using the specified frames and delay, sets the animation to not be animating, and returns the created sprite.",
            "howToUse": "Call this method to get the animated sprite for PacMan's death animation.",
            "layer": "Logic",
            "postConditions": [
              "An animated sprite representing PacMan's death animation is returned.",
              "The sprite is not set to animate."
            ],
            "preConditions": [
              "The resource file \"/sprite/dead.png\" must exist.",
              "The necessary methods (loadSprite, createAnimatedSprite) must be available in the class."
            ],
            "reason": "This method is responsible for creating and returning an animated sprite that represents PacMan's death animation, which is part of the game logic rather than UI or data access.",
            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The animated sprite representing PacMan's death animation.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.collisions",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The table of possible collisions between units.\r\n */\r\nprivate final nl.tudelft.jpacman.level.CollisionMap collisions;",
            "visibility": "private",
            "simpleName": "collisions",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.collisions",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "img",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "grid",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "leaveSquare()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
            "kind": "method",
            "sourceText": "/**\r\n * Leaves the currently occupying square, thus removing this unit from the board.\r\n */\r\npublic void leaveSquare() {\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n        this.square = null;\r\n    }\r\n    assert this.invariant();\r\n}",
            "docComment": "Leaves the currently occupying square, thus removing this unit from the board.\r\n",
            "metaSrc": "source code",
            "description": "Removes the unit from its current square if it is present.",
            "howItWorks": "The method checks if the unit is currently on a square. If so, it removes itself from that square and sets the square reference to null. It then asserts the invariant to ensure the unit's state remains consistent.",
            "howToUse": "Call this method on an instance of Unit to remove it from its current square.",
            "layer": "Logic",
            "postConditions": [
              "The unit is no longer associated with any square."
            ],
            "preConditions": [
              "The unit must be associated with a square."
            ],
            "reason": "This method is part of the application logic layer as it deals with the internal state and behavior of game units within the board, which is a core aspect of the game's domain logic.",
            "returns": "Void.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
            "kind": "method",
            "sourceText": "/**\r\n * Method called whenever a player consumes a pellet.\r\n * It can be used to update the player's points accordingly.\r\n *\r\n * @param player\r\n * \t\tThe player consuming a pellet\r\n * @param pellet\r\n * \t\tThe pellet consumed.\r\n */\r\nvoid consumedAPellet(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.level.Pellet pellet);",
            "docComment": "Method called whenever a player consumes a pellet.\r\nIt can be used to update the player's points accordingly.\r\n\r\n@param player\r\n\t\tThe player consuming a pellet\r\n@param pellet\r\n\t\tThe pellet consumed.\r\n",
            "metaSrc": "source code",
            "description": "Handles the logic for when a player consumes a pellet in the game.",
            "howItWorks": "The method updates the game state to reflect that the player has consumed a pellet, which may involve updating scores or other game-related logic.",
            "howToUse": "Call this method whenever a player consumes a pellet in the game.",
            "layer": "Logic",
            "postConditions": [
              "The player's score should be updated based on the value of the consumed pellet.",
              "The pellet should no longer be visible or interactable on the board."
            ],
            "preConditions": [
              "A player must be present on the board.",
              "A pellet must be present at the location where the player is standing."
            ],
            "reason": "This method is part of the game logic, specifically handling the interaction between a player and a pellet.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.mappings",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The mappings of keyCode to action.\r\n */\r\nprivate final java.util.Map<java.lang.Integer, nl.tudelft.jpacman.ui.Action> mappings;",
            "visibility": "private",
            "simpleName": "mappings",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.mappings",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new map parser.\r\n *\r\n * @param levelFactory\r\n * \t\tThe factory providing the NPC objects and the level.\r\n * @param boardFactory\r\n * \t\tThe factory providing the Square objects and the board.\r\n */\r\npublic MapParser(nl.tudelft.jpacman.level.LevelFactory levelFactory, nl.tudelft.jpacman.board.BoardFactory boardFactory) {\r\n    super();\r\n    this.levelCreator = levelFactory;\r\n    this.boardCreator = boardFactory;\r\n}",
            "docComment": "Creates a new map parser.\r\n\r\n@param levelFactory\r\n\t\tThe factory providing the NPC objects and the level.\r\n@param boardFactory\r\n\t\tThe factory providing the Square objects and the board.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player who consumes the pellet."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.PacManSprites)",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new BoardFactory that will create a board with the provided\r\n * background sprites.\r\n *\r\n * @param spriteStore\r\n * \t\tThe sprite store providing the sprites for the background.\r\n */\r\npublic BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites spriteStore) {\r\n    super();\r\n    this.sprites = spriteStore;\r\n}",
            "docComment": "Creates a new BoardFactory that will create a board with the provided\r\nbackground sprites.\r\n\r\n@param spriteStore\r\n\t\tThe sprite store providing the sprites for the background.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "clazz",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The class to retrieve its inheritance hierarchy."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.isAlive()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isAlive()",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.isAlive()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
            "docComment": "Returns whether this player is alive or not.\r\n\r\n@return <code>true</code> iff the player is alive.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the player is alive.",
            "howItWorks": "The method returns the value of the 'alive' field of the Player object.",
            "howToUse": "Call this method on an instance of Player to determine if it is still alive.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be true if the player is alive, and false otherwise."
            ],
            "preConditions": [],
            "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
            "returns": "A boolean indicating whether the player is alive.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "float",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "float",
            "qualifiedName": "float",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "private void playerColliding(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (collidedOn instanceof nl.tudelft.jpacman.npc.Ghost) {\r\n        this.playerVersusGhost(player, ((nl.tudelft.jpacman.npc.Ghost) (collidedOn)));\r\n    }\r\n    if (collidedOn instanceof nl.tudelft.jpacman.level.Pellet) {\r\n        this.playerVersusPellet(player, ((nl.tudelft.jpacman.level.Pellet) (collidedOn)));\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic for when a player collides with another unit in the game.",
            "howItWorks": "The method checks if the collidedOn object is an instance of Ghost or Pellet. Depending on the type, it calls either playerVersusGhost or playerVersusPellet methods to handle the specific collision logic.",
            "howToUse": "Call this method whenever a collision event occurs between a player and another unit in the game.",
            "layer": "Logic",
            "postConditions": [
              "The appropriate collision handling method (playerVersusGhost or playerVersusPellet) has been called based on the type of collidedOn object."
            ],
            "preConditions": [
              "A collision event must have occurred between a Player and another Unit."
            ],
            "reason": "This method is part of the game logic, specifically handling collisions between a player and other units in the game. It needs to be in the Logic layer as it deals with the rules and behavior of the game.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
            "kind": "static method",
            "sourceText": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
            "docComment": "Finds the nearest unit of the given type and returns its location. This\r\nmethod will perform a breadth first search starting from the given\r\nsquare.\r\n\r\n@param type\r\n\t\tThe type of unit to search for.\r\n@param currentLocation\r\n\t\tThe starting location for the search.\r\n@return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n",
            "metaSrc": "source code",
            "assertions": [
              {
                "code": "assert unit.hasSquare();",
                "description": "Ensures that if a unit is found, it has a square."
              }
            ],
            "description": "Finds the nearest unit of a specific type from the current location on the game board.",
            "howItWorks": "The method uses a breadth-first search (BFS) algorithm to explore squares in increasing distance from the current location until it finds a unit of the specified type or exhausts all possibilities.",
            "howToUse": "Call this method with the desired unit type and the current square to find the nearest unit of that type.",
            "possibleLayers": [
              "Logic"
            ],
            "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
            "returns": "The nearest unit of the specified type, or null if no such unit exists."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "neighbour",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The neighboring square to link."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "checkMapFormat(java.util.List)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
            "kind": "method",
            "sourceText": "/**\r\n * Check the correctness of the map lines in the text.\r\n *\r\n * @param text\r\n * \t\tMap to be checked\r\n * @throws PacmanConfigurationException\r\n * \t\tif map is not OK.\r\n */\r\nprivate void checkMapFormat(java.util.List<java.lang.String> text) {\r\n    if (text == null) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text cannot be null.\");\r\n    }\r\n    if (text.isEmpty()) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text must consist of at least 1 row.\");\r\n    }\r\n    int width = text.get(0).length();\r\n    if (width == 0) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text lines cannot be empty.\");\r\n    }\r\n    for (java.lang.String line : text) {\r\n        if (line.length() != width) {\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text lines are not of equal width.\");\r\n        }\r\n    }\r\n}",
            "docComment": "Check the correctness of the map lines in the text.\r\n\r\n@param text\r\n\t\tMap to be checked\r\n@throws PacmanConfigurationException\r\n\t\tif map is not OK.\r\n",
            "metaSrc": "source code",
            "description": "Checks the format of a map text input for a Pacman game.",
            "howItWorks": "The method checks for null input, empty input, equal width lines, and throws appropriate exceptions if any conditions are not met.",
            "howToUse": "Call this method with a list of strings where each string represents a line of the map. The method will validate the format and throw exceptions if any issues are found.",
            "layer": "Logic",
            "postConditions": [
              "If the input is valid, no exceptions will be thrown.",
              "If the input is invalid, a PacmanConfigurationException will be thrown with an appropriate error message."
            ],
            "preConditions": [
              "The input list 'text' should not be null.",
              "The input list 'text' should not be empty."
            ],
            "reason": "Ensures that the input map text is properly formatted to avoid runtime errors during game initialization.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.points.PointCalculator)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Create a simple player-based collision map, informing the\r\n * point calculator about points to be added.\r\n *\r\n * @param pointCalculator\r\n * \t\tStrategy for calculating points.\r\n */\r\npublic PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    super();\r\n    this.pointCalculator = pointCalculator;\r\n}",
            "docComment": "Create a simple player-based collision map, informing the\r\npoint calculator about points to be added.\r\n\r\n@param pointCalculator\r\n\t\tStrategy for calculating points.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The variation in intervals, this makes the ghosts look more dynamic and\r\n * less predictable.\r\n */\r\nprivate static final int INTERVAL_VARIATION = 50;",
            "visibility": "private",
            "simpleName": "INTERVAL_VARIATION",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The x-coordinate to check."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A player operated unit in our game.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Player",
            "qualifiedName": "nl.tudelft.jpacman.level.Player",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "(no description)",
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprites for every direction."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
            "kind": "method",
            "sourceText": "/**\r\n * creates a Square with the specified ghost on it\r\n * and appends the placed ghost into the ghost list.\r\n *\r\n * @param ghosts\r\n * \t\tall the ghosts in the level so far, the new ghost will be appended\r\n * @param ghost\r\n * \t\tthe newly created ghost to be placed\r\n * @return a square with the ghost on it.\r\n */\r\nprotected nl.tudelft.jpacman.board.Square makeGhostSquare(java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    nl.tudelft.jpacman.board.Square ghostSquare = this.boardCreator.createGround();\r\n    ghosts.add(ghost);\r\n    ghost.occupy(ghostSquare);\r\n    return ghostSquare;\r\n}",
            "docComment": "creates a Square with the specified ghost on it\r\nand appends the placed ghost into the ghost list.\r\n\r\n@param ghosts\r\n\t\tall the ghosts in the level so far, the new ghost will be appended\r\n@param ghost\r\n\t\tthe newly created ghost to be placed\r\n@return a square with the ghost on it.\r\n",
            "metaSrc": "source code",
            "description": "Creates a square for a ghost in the game board.",
            "howItWorks": "The method creates a ground square using `boardCreator.createGround()`, adds the ghost to the list, and then occupies the square with the ghost using `ghost.occupy(ghostSquare)`. Finally, it returns the created square.",
            "howToUse": "Call this method with a list of all ghosts on the board and the specific ghost you want to place. It will return the square where the ghost is placed.",
            "layer": "Logic",
            "postConditions": [
              "The ghost will occupy the newly created square.",
              "The ghost will be added to the list of all ghosts on the board."
            ],
            "preConditions": [
              "The board creator must be initialized and ready to create squares.",
              "The ghost must not already be occupying a square."
            ],
            "reason": "This method is responsible for creating a square where a ghost can occupy, which involves setting up the square and adding the ghost to it.",
            "returns": "nl.tudelft.jpacman.board.Square",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteStore",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "sprite",
            "qualifiedName": "nl.tudelft.jpacman.sprite",
            "kind": "package",
            "metaSrc": "source code",
            "description": "The nl.tudelft.jpacman.sprite package contains classes and interfaces related to sprite management in the Pacman game.",
            "keywords": [
              "sprite",
              "pacman",
              "game"
            ],
            "layer": "UI",
            "title": "Sprite Management Package"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher()",
            "kind": "constructor",
            "sourceText": "Launcher() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "type",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The class type of the unit to find."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.inProgress",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * <code>true</code> if the game is in progress.\r\n */\r\nprivate boolean inProgress;",
            "visibility": "private",
            "simpleName": "inProgress",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.inProgress",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "withinImage(int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
            "kind": "method",
            "sourceText": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a given coordinate is within the bounds of an image.",
            "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
            "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if both coordinates are within the image bounds.",
              "The method returns false if either coordinate is out of bounds."
            ],
            "preConditions": [
              "x must be an integer representing a valid x-coordinate.",
              "y must be an integer representing a valid y-coordinate."
            ],
            "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
            "returns": "A boolean indicating whether the coordinates are within the image bounds.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "grid",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][]).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A two-dimensional array representing the grid of squares for the board."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void pacmanMoved(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Direction direction) {\r\n    // no points for moving\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "graphics",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.npcs",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The NPCs of this level and, if they are running, their schedules.\r\n */\r\nprivate final java.util.Map<nl.tudelft.jpacman.npc.Ghost, java.util.concurrent.ScheduledExecutorService> npcs;",
            "visibility": "private",
            "simpleName": "npcs",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.npcs",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory",
          "labels": [
            "Container",
            "Structure"
          ],
          "properties": {
            "docComment": "Factory that creates levels and units.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "LevelFactory",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "This class is responsible for creating levels, pellets, and ghosts in the game Pacman.",
            "howItWorks": "The constructor sets up the sprite store, ghost factory, point calculator, and initializes constants for different types of ghosts.",
            "howToUse": "Call this method with instances of PacManSprites, GhostFactory, and PointCalculator to create a new LevelFactory.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The sprite store providing the sprites for units.",
                "name": "spriteStore",
                "type": "nl.tudelft.jpacman.sprite.PacManSprites"
              },
              {
                "description": "The factory providing ghosts.",
                "name": "ghostFactory",
                "type": "nl.tudelft.jpacman.npc.ghost.GhostFactory"
              },
              {
                "description": "The algorithm to calculate the points.",
                "name": "pointCalculator",
                "type": "nl.tudelft.jpacman.points.PointCalculator"
              }
            ],
            "reason": "This method initializes a new level factory with necessary components for creating levels in Pacman.",
            "returns": "A new instance of nl.tudelft.jpacman.level.LevelFactory.",
            "stereotype": "Creational",
            "keywords": [
              "level factory",
              "game mechanics",
              "object creation"
            ],
            "structureType": "class",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel.serialVersionUID",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Default serialisation ID.\r\n */\r\nprivate static final long serialVersionUID = 1L;",
            "visibility": "private",
            "simpleName": "serialVersionUID",
            "qualifiedName": "nl.tudelft.jpacman.ui.ButtonPanel.serialVersionUID",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An observer that will be notified when the level is won or lost.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "LevelObserver",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$LevelObserver",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "The Level$LevelObserver interface in jpacman is responsible for receiving notifications about changes to the game's level state, such as when a level is lost or won.",
            "howItWorks": "This method is called when the player loses a level. It does not take any parameters and does not return anything.",
            "howToUse": "Call this method whenever the game logic determines that the player has lost the current level.",
            "layer": "Logic",
            "parameters": [],
            "postConditions": [],
            "preConditions": [],
            "reason": "This method is necessary for managing the flow of the game when a player loses a level.",
            "returns": "Void",
            "stereotype": "Other",
            "keywords": [
              "observer",
              "level observer",
              "game logic"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The calculator to determine points for various actions in the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isInProgress()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.isInProgress()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns whether this level is in progress, i.e. whether moves can be made\r\n * on the board.\r\n *\r\n * @return <code>true</code> iff this level is in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
            "docComment": "Returns whether this level is in progress, i.e. whether moves can be made\r\non the board.\r\n\r\n@return <code>true</code> iff this level is in progress.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the level is currently in progress.",
            "howItWorks": "The method returns the value of the private field 'inProgress'.",
            "howToUse": "Call this method to determine if the game level is still active.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be true if the level is in progress, false otherwise."
            ],
            "preConditions": [],
            "reason": "This method provides a way to check the current state of the game level without modifying any data.",
            "returns": "A boolean indicating whether the level is currently in progress.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory",
          "labels": [
            "Container",
            "Structure"
          ],
          "properties": {
            "docComment": "A factory that creates {@link Board} objects from 2-dimensional arrays of\r\n{@link Square}s.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "BoardFactory",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "The BoardFactory class in the jpacman project is responsible for creating different types of squares (ground and wall) that will be used to build a board in the Pacman game. It uses a sprite store to provide sprites for these squares.",
            "howItWorks": "The method first validates that the grid is not null. It then creates a new Board object using the provided grid. After obtaining the board's width and height, it iterates through each square in the grid, linking it with its neighboring squares in all four directions (up, down, left, right).",
            "howToUse": "Call this method with a two-dimensional array of Square objects to create a new Board instance.",
            "layer": "Logic",
            "parameters": [
              {
                "name": "spriteStore",
                "type": "nl.tudelft.jpacman.sprite.PacManSprites"
              }
            ],
            "postConditions": [],
            "preConditions": [
              {
                "description": "The grid parameter must not be null.",
                "type": "precondition"
              }
            ],
            "reason": "This method initializes a new board with the provided grid and sets up the connections between adjacent squares.",
            "returns": "Nl.tudelft.jpacman.board.Board",
            "stereotype": "Creational",
            "keywords": [
              "BoardFactory",
              "Squares",
              "PacManSprites"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghost",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The ghost to be placed on the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
            "kind": "method",
            "sourceText": "/**\r\n * Let the score panel use a dedicated score formatter.\r\n *\r\n * @param scoreFormatter\r\n * \t\tScore formatter to be used.\r\n */\r\npublic void setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel.ScoreFormatter scoreFormatter) {\r\n    assert scoreFormatter != null;\r\n    this.scoreFormatter = scoreFormatter;\r\n}",
            "docComment": "Let the score panel use a dedicated score formatter.\r\n\r\n@param scoreFormatter\r\n\t\tScore formatter to be used.\r\n",
            "metaSrc": "source code",
            "description": "Sets the score formatter for the ScorePanel.",
            "howItWorks": "The method assigns the provided ScoreFormatter to the instance variable scoreFormatter and asserts that the scoreFormatter is not null.",
            "howToUse": "Call this method with an instance of ScoreFormatter to set it as the score formatter for the ScorePanel.",
            "layer": "UI",
            "postConditions": [
              "The scoreFormatter instance variable is set to the provided scoreFormatter.",
              "An assertion checks that the scoreFormatter is not null."
            ],
            "preConditions": [],
            "reason": "This method is necessary for customizing how scores are displayed in the user interface of the game.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "loadPointCalculator()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
            "kind": "method",
            "sourceText": "private nl.tudelft.jpacman.points.PointCalculator loadPointCalculator() {\r\n    return new nl.tudelft.jpacman.points.PointCalculatorLoader().load();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Loads a PointCalculator instance dynamically from a file.",
            "howItWorks": "The method uses a PointCalculatorLoader to dynamically load and return a PointCalculator object.",
            "howToUse": "Call this method to obtain an instance of PointCalculator that can be used to calculate points in the game.",
            "layer": "Logic",
            "postConditions": [
              "A valid PointCalculator instance is returned."
            ],
            "preConditions": [],
            "reason": "This method is responsible for loading a PointCalculator, which is part of the application logic. It does not interact with the user interface or handle data access directly.",
            "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "event",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.EAST",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * East, or right.\r\n */\r\nEAST(1, 0)",
            "visibility": "public",
            "simpleName": "EAST",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.EAST",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.parent",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The parent node, which is <code>null</code> for the root node.\r\n */\r\nprivate final nl.tudelft.jpacman.npc.ghost.Navigation.Node parent;",
            "visibility": "private",
            "simpleName": "parent",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.parent",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Animated sprite, renders the frame depending on the time of requesting the\r\ndraw.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "AnimatedSprite",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Provide means to format the score for a given player.\r\n",
            "simpleName": "ScoreFormatter",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Formats the score of a player in a Pacman game.",
            "howItWorks": "The method accesses the player's score and formats it into a readable string.",
            "howToUse": "Call this method with an instance of Player to get its score formatted as a string.",
            "layer": "UI",
            "parameters": [
              {
                "description": "The player and its score",
                "name": "player",
                "type": "nl.tudelft.jpacman.level.Player"
              }
            ],
            "postConditions": [
              {
                "condition": "The returned string is a valid representation of the player's score."
              }
            ],
            "preConditions": [],
            "reason": "This method is responsible for formatting the score of a player, which is part of the user interface functionality.",
            "returns": "Formatted score. Java.lang.String.",
            "stereotype": "Accessor",
            "keywords": [
              "ScoreFormatter",
              "format",
              "Player"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites()",
            "kind": "constructor",
            "sourceText": "PacManSprites() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the PacManSprites class.",
            "howItWorks": "The constructor calls the superclass constructor using super() to initialize the base class.",
            "howToUse": "Create a new instance of PacManSprites by calling its constructor.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of PacManSprites is created and initialized."
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating an instance of PacManSprites, which is essential for managing sprite resources in the game. It does not interact with user interface or data access, making it a suitable candidate for the Logic layer.",
            "returns": "The newly created instance of PacManSprites.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The amount of frames in the pacman animation.\r\n */\r\nprivate static final int PACMAN_ANIMATION_FRAMES = 4;",
            "visibility": "private",
            "simpleName": "PACMAN_ANIMATION_FRAMES",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createWall()",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new square that cannot be occupied by any unit.\r\n *\r\n * @return A new square that cannot be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createWall() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Wall(this.sprites.getWallSprite());\r\n}",
            "docComment": "Creates a new square that cannot be occupied by any unit.\r\n\r\n@return A new square that cannot be occupied by any unit.\r\n",
            "metaSrc": "source code",
            "description": "Creates a wall in the Pacman game board.",
            "howItWorks": "The method retrieves a wall sprite using PacManSprites.getWallSprite() and then creates a new Wall object with that sprite. The Wall object is returned as a Square.",
            "howToUse": "Call this method on an instance of BoardFactory to create a new wall square in the board.",
            "layer": "Logic",
            "postConditions": [
              "A new wall square will be created and returned by this method."
            ],
            "preConditions": [
              "PacManSprites.getWallSprite() must be called before this method to ensure the sprite is available."
            ],
            "reason": "This method is responsible for creating a wall object, which is part of the game's logic layer. It uses a sprite to represent the wall visually.",
            "returns": "nl.tudelft.jpacman.board.Square",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.getBoard()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getBoard()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.getBoard()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the board of this level.\r\n *\r\n * @return The board of this level.\r\n */\r\npublic nl.tudelft.jpacman.board.Board getBoard() {\r\n    return this.board;\r\n}",
            "docComment": "Returns the board of this level.\r\n\r\n@return The board of this level.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the board from the level.",
            "howItWorks": "The method returns the private field 'board' of the Level class.",
            "howToUse": "Call getBoard() on an instance of the Level class to retrieve the board.",
            "layer": "Logic",
            "postConditions": [
              "The returned object is an instance of nl.tudelft.jpacman.board.Board."
            ],
            "preConditions": [
              "The Level instance must have been properly initialized with a board."
            ]
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "deathAnimation",
            "qualifiedName": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The animated sprite that will be used when the player dies."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The x-coordinate to check."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.sprites.get(this.getDirection());\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the sprite associated with the ghost's current direction.",
            "howItWorks": "The method retrieves the sprite from a list of sprites using the direction returned by the getDirection() method.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.npc.Ghost to get its current sprite.",
            "layer": "Logic",
            "postConditions": [
              "A Sprite object is returned representing the ghost's current direction."
            ],
            "preConditions": [
              "The ghost must have a valid direction set.",
              "The sprite list must contain an entry for each possible direction."
            ],
            "reason": "This method is responsible for retrieving the appropriate sprite based on the ghost's direction, which is part of the game logic to visually represent the ghost's state.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "<p>\r\nAn implementation of the classic Pac-Man ghost Shadow.\r\n</p>\r\n<p>\r\nNickname: Blinky. As his name implies, Shadow is usually a constant shadow on\r\nPac-Man's tail. When he's not patrolling the top-right corner of the maze,\r\nShadow tries to find the quickest route to Pac-Man's position. Despite the\r\nfact that Pinky's real name is Speedy, Shadow is actually the fastest of the\r\nghosts because of when there are only a few pellets left, Blinky drastically\r\nspeeds up, which can make him quite deadly. In the original Japanese version,\r\nhis name is Oikake/Akabei.\r\n</p>\r\n<p>\r\n<b>AI:</b> When the ghosts are not patrolling in their home corners (Blinky:\r\ntop-right, Pinky: top-left, Inky: bottom-right, Clyde: bottom-left), Blinky\r\nwill attempt to shorten the distance between Pac-Man and himself. If he has\r\nto choose between shortening the horizontal or vertical distance, he will\r\nchoose to shorten whichever is greatest. For example, if Pac-Man is four grid\r\nspaces to the left, and seven grid spaces above Blinky, he'll try to move up\r\ntowards Pac-Man before he moves to the left.\r\n</p>\r\n<p>\r\nSource: http://strategywiki.org/wiki/Pac-Man/Getting_Started\r\n</p>\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Blinky",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class representing Blinky, a ghost in the Pacman game.",
            "howItWorks": "The constructor calls the superclass constructor with the sprite map, move interval, and interval variation specific to Blinky.",
            "howToUse": "Create an instance of Blinky by passing a Map containing Direction-Sprite pairs.",
            "layer": "Logic",
            "parameters": [
              {
                "name": "spriteMap",
                "type": "java.util.Map"
              }
            ],
            "postConditions": [
              "A new instance of Blinky is created with the provided sprite map",
              "Blinky's movement intervals are initialized",
              "Blinky's sprite mappings are set"
            ],
            "preConditions": [
              "spriteMap is not null"
            ],
            "reason": "This method is responsible for creating a new Blinky ghost with the provided sprite map. It initializes the ghost's movement intervals and sprite mappings.",
            "returns": "A new instance of the Blinky class.",
            "stereotype": "Creational",
            "keywords": [
              "Blinky",
              "Ghost",
              "Pacman",
              "AI",
              "Movement"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.boardCreator",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The factory that creates the squares and board.\r\n */\r\nprivate final nl.tudelft.jpacman.board.BoardFactory boardCreator;",
            "visibility": "private",
            "simpleName": "boardCreator",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.boardCreator",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidedOn",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit that the ghost collided with."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "event",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The key event that occurred."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "mover",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit that causes the collision by occupying a square with another unit already on it."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The default way in which the score is shown.\r\n */\r\npublic static final nl.tudelft.jpacman.ui.ScorePanel.ScoreFormatter DEFAULT_SCORE_FORMATTER = (nl.tudelft.jpacman.level.Player player) -> java.lang.String.format(\"Score: %3d\", player.getScore());",
            "visibility": "public",
            "simpleName": "DEFAULT_SCORE_FORMATTER",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelMap()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getLevelMap()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getLevelMap()",
            "kind": "method",
            "sourceText": "/**\r\n * The map file used to populate the level.\r\n *\r\n * @return The name of the map file.\r\n */\r\nprotected java.lang.String getLevelMap() {\r\n    return this.levelMap;\r\n}",
            "docComment": "The map file used to populate the level.\r\n\r\n@return The name of the map file.\r\n",
            "metaSrc": "source code",
            "description": "Returns the current level map as a string.",
            "howItWorks": "The method simply returns the value of the instance variable 'levelMap'.",
            "howToUse": "Call this method on an instance of Launcher to retrieve the current level map.",
            "layer": "Data",
            "postConditions": [
              "The returned value is the same as the instance variable 'levelMap'.",
              "No side effects."
            ],
            "preConditions": [
              "The instance variable 'levelMap' has been initialized with a valid level map string."
            ],
            "reason": "This method provides access to the current level map, which is essential for game logic and rendering.",
            "returns": "A string representing the current level map.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The amount of cells Clyde wants to stay away from Pac Man.\r\n */\r\nprivate static final int SHYNESS = 8;",
            "visibility": "private",
            "simpleName": "SHYNESS",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.handlers",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The collection of collision handlers.\r\n */\r\nprivate final java.util.Map<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, java.util.Map<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<? extends java.lang.Object, ? extends java.lang.Object>>> handlers;",
            "visibility": "private",
            "simpleName": "handlers",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.handlers",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteStore",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a button to the UI.\r\n *\r\n * @param caption\r\n * \t\tThe caption of the button.\r\n * @param action\r\n * \t\tThe action to execute when the button is clicked.\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder addButton(java.lang.String caption, nl.tudelft.jpacman.ui.Action action) {\r\n    assert caption != null;\r\n    assert !caption.isEmpty();\r\n    assert action != null;\r\n    this.buttons.put(caption, action);\r\n    return this;\r\n}",
            "docComment": "Adds a button to the UI.\r\n\r\n@param caption\r\n\t\tThe caption of the button.\r\n@param action\r\n\t\tThe action to execute when the button is clicked.\r\n@return The builder.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The width of the target sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The base movement interval.\r\n */\r\nprivate static final int MOVE_INTERVAL = 250;",
            "visibility": "private",
            "simpleName": "MOVE_INTERVAL",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getPath()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
            "metaSrc": "source code",
            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
            "layer": "Logic",
            "postConditions": [
              "A List of Direction objects representing the path from the root node to the current node will be returned."
            ],
            "preConditions": [
              "The instance must be part of a navigation tree with at least one root node."
            ],
            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
            "returns": "A List of Direction objects representing the path from the root node to the current node.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "g",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The graphics context to draw on."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "resource",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The path to the sprite resource."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The direction of the move."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "graphics",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.levelWon()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "levelWon()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.levelWon()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void levelWon() {\r\n    this.stop();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Stops the game when a level is won.",
            "howItWorks": "The method sets the inProgress flag to false and stops the current level.",
            "howToUse": "Call this method to stop the game when a level has been successfully completed.",
            "layer": "Logic",
            "postConditions": [
              "The game is stopped.",
              "No further actions can be taken until a new level is started."
            ],
            "preConditions": [
              "A level must be in progress.",
              "The player must have won the level."
            ],
            "reason": "This method is part of the game logic, specifically handling the end condition of a level being won.",
            "returns": "Void. The method does not return any value.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "load()",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
            "kind": "method",
            "sourceText": "/**\r\n * Load a points calculator and return it.\r\n *\r\n * @return The (dynamically loaded) points calculator.\r\n */\r\npublic nl.tudelft.jpacman.points.PointCalculator load() {\r\n    try {\r\n        if (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz == null) {\r\n            nl.tudelft.jpacman.points.PointCalculatorLoader.clazz = this.loadClassFromFile();\r\n        }\r\n        return ((nl.tudelft.jpacman.points.PointCalculator) (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz.newInstance()));\r\n    } catch (java.lang.Exception e) {\r\n        throw new java.lang.RuntimeException(\"Could not dynamically load the points calculator.\", e);\r\n    }\r\n}",
            "docComment": "Load a points calculator and return it.\r\n\r\n@return The (dynamically loaded) points calculator.\r\n",
            "metaSrc": "source code",
            "description": "Loads a PointCalculator instance dynamically from a file.",
            "howItWorks": "The method checks if a class has already been loaded and, if not, loads it from a file. It then creates a new instance of the loaded class and returns it.",
            "howToUse": "Call this method to obtain an instance of PointCalculator without knowing its concrete class at compile time.",
            "layer": "Logic",
            "postConditions": [
              "A valid PointCalculator instance is returned.",
              "Any exceptions during loading are caught and rethrown as a RuntimeException with a descriptive message."
            ],
            "preConditions": [
              "The application must have a strategy defined for loading the PointCalculator.",
              "The specified file must exist and contain a valid class definition."
            ],
            "reason": "This method is responsible for loading a specific implementation of the PointCalculator interface, which is crucial for calculating points in the game. It ensures that the correct calculator is instantiated based on the strategy defined in the application.",
            "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.playerFactory",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The factory providing the player objects.\r\n */\r\nprivate final nl.tudelft.jpacman.level.PlayerFactory playerFactory;",
            "visibility": "private",
            "simpleName": "playerFactory",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory.playerFactory",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "parseMap(char[][])",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
            "kind": "method",
            "sourceText": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
            "docComment": "Parses the text representation of the board into an actual level.\r\n\r\n<ul>\r\n<li>Supported characters:\r\n<li>' ' (space) an empty square.\r\n<li>'#' (bracket) a wall.\r\n<li>'.' (period) a square with a pellet.\r\n<li>'P' (capital P) a starting square for players.\r\n<li>'G' (capital G) a square with a ghost.\r\n</ul>\r\n\r\n@param map\r\n\t\tThe text representation of the board, with map[x][y]\r\n\t\trepresenting the square at position x,y.\r\n@return The level as represented by this text.\r\n",
            "metaSrc": "source code",
            "description": "Parses a character map to create a game level in Pacman.",
            "howItWorks": "The method initializes a grid based on the input map, identifies ghost and start positions, creates a board, and then constructs a level using these components.",
            "howToUse": "Call this method with a two-dimensional character array representing the map. The method will return a Level object ready to be used in the game.",
            "layer": "Logic",
            "postConditions": [
              "A valid Level object is returned.",
              "All ghosts and start positions are correctly identified and added to the level."
            ],
            "preConditions": [
              "The input map must not be null.",
              "The input map must have at least one row and one column."
            ],
            "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
            "returns": "nl.tudelft.jpacman.level.Level",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getLevel()",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.level.Level getLevel() {\r\n    return this.level;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getHeight()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "<init>(nl.tudelft.jpacman.points.PointCalculator)",
            "qualifiedName": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new game.\r\n *\r\n * @param pointCalculator\r\n * \t\tThe way to calculate points upon collisions.\r\n */\r\nprotected Game(nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    super();\r\n    this.pointCalculator = pointCalculator;\r\n    this.inProgress = false;\r\n}",
            "docComment": "Creates a new game.\r\n\r\n@param pointCalculator\r\n\t\tThe way to calculate points upon collisions.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new game with a point calculator.",
            "howItWorks": "The constructor initializes the game with the provided point calculator, sets the inProgress flag to false, and calls the superclass constructor.",
            "howToUse": "Create an instance of Game by passing a PointCalculator object to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "A new Game instance is created with the specified PointCalculator.",
              "The inProgress flag is set to false.",
              "The game is ready for initialization or further setup."
            ],
            "preConditions": [
              "A valid PointCalculator object must be provided."
            ],
            "reason": "This method is responsible for setting up a new game session, initializing necessary components, and preparing the game for play.",
            "returns": "A new instance of Game with the provided point calculator.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.deathSprite",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The animation that is to be played when Pac-Man dies.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.AnimatedSprite deathSprite;",
            "visibility": "private",
            "simpleName": "deathSprite",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.deathSprite",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "square",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The square to render."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void collidedWithAGhost(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    // no points for colliding with a ghost\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidedOn",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit that the mover has collided with."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.util.List)",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new score panel with a column for each player.\r\n *\r\n * @param players\r\n * \t\tThe players to display the scores of.\r\n */\r\npublic ScorePanel(java.util.List<nl.tudelft.jpacman.level.Player> players) {\r\n    super();\r\n    assert players != null;\r\n    this.setLayout(new java.awt.GridLayout(2, players.size()));\r\n    for (int i = 1; i <= players.size(); i++) {\r\n        this.add(new javax.swing.JLabel(\"Player \" + i, javax.swing.JLabel.CENTER));\r\n    }\r\n    this.scoreLabels = new java.util.LinkedHashMap<nl.tudelft.jpacman.level.Player, javax.swing.JLabel>();\r\n    for (nl.tudelft.jpacman.level.Player player : players) {\r\n        javax.swing.JLabel scoreLabel = new javax.swing.JLabel(\"0\", javax.swing.JLabel.CENTER);\r\n        this.scoreLabels.put(player, scoreLabel);\r\n        this.add(scoreLabel);\r\n    }\r\n}",
            "docComment": "Creates a new score panel with a column for each player.\r\n\r\n@param players\r\n\t\tThe players to display the scores of.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "message",
            "qualifiedName": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "paint(java.awt.Graphics)",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void paint(java.awt.Graphics g) {\r\n    assert g != null;\r\n    this.render(this.game.getLevel().getBoard(), g, this.getSize());\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Renders the entire board using a given graphics context.",
            "howItWorks": "The method first asserts that the Graphics object is not null. It then retrieves the current level from the game and calls the render method of the BoardPanel class to draw the board on the provided graphics context.",
            "howToUse": "Call this method on an instance of BoardPanel, passing in a Graphics object to render the board.",
            "layer": "UI",
            "postConditions": [
              "The entire board is rendered on the provided Graphics object."
            ],
            "preConditions": [
              "The Graphics object passed to the method should not be null."
            ],
            "reason": "This method is responsible for rendering the game board, which is a UI-related task. It interacts with the game logic to get the current level and then renders it using the provided graphics context.",
            "returns": "Void.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "delay",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The time delay between each frame in milliseconds."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "refresh()",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
            "kind": "method",
            "sourceText": "/**\r\n * Refreshes the scores of the players.\r\n */\r\nprotected void refresh() {\r\n    for (java.util.Map.Entry<nl.tudelft.jpacman.level.Player, javax.swing.JLabel> entry : this.scoreLabels.entrySet()) {\r\n        nl.tudelft.jpacman.level.Player player = entry.getKey();\r\n        java.lang.String score = \"\";\r\n        if (!player.isAlive()) {\r\n            score = \"You died. \";\r\n        }\r\n        score += this.scoreFormatter.format(player);\r\n        entry.getValue().setText(score);\r\n    }\r\n}",
            "docComment": "Refreshes the scores of the players.\r\n",
            "metaSrc": "source code",
            "description": "Refreshes the score labels on the ScorePanel based on the current scores of players.",
            "howItWorks": "Iterates through each entry in the scoreLabels map, checks if the player is alive, formats the score using ScoreFormatter, and updates the text of the JLabel accordingly.",
            "howToUse": "Call this method whenever there is an update in player scores that needs to be reflected on the UI.",
            "layer": "UI",
            "postConditions": [
              "All JLabels in the scoreLabels map will have their text updated to reflect the current scores of the players."
            ],
            "preConditions": [
              "The scoreLabels map must contain entries for all players with their corresponding JLabels."
            ],
            "reason": "This method updates the score labels on the ScorePanel to reflect the current scores of players.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "updateObservers()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.updateObservers()",
            "kind": "method",
            "sourceText": "/**\r\n * Updates the observers about the state of this level.\r\n */\r\nprivate void updateObservers() {\r\n    java.lang.Iterable<nl.tudelft.jpacman.level.Level.LevelObserver> observers = new java.util.ArrayList<nl.tudelft.jpacman.level.Level.LevelObserver>(this.observers);\r\n    if (!this.isAnyPlayerAlive()) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelLost();\r\n        }\r\n    }\r\n    if (this.remainingPellets() == 0) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelWon();\r\n        }\r\n    }\r\n}",
            "docComment": "Updates the observers about the state of this level.\r\n",
            "metaSrc": "source code",
            "description": "Notifies observers about the game's outcome based on player status and remaining pellets.",
            "howItWorks": "The method iterates over a copy of the observers list and calls either levelLost() or levelWon() based on the current game state.",
            "howToUse": "Call this method when the game state changes (e.g., player dies or all pellets are collected).",
            "layer": "Logic",
            "postConditions": [
              "All registered observers will be notified about the game's outcome."
            ],
            "preConditions": [
              "The observers list should not be null."
            ],
            "reason": "This method is responsible for notifying observers about the game's outcome, which is a part of the application logic.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.addPoints(int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "addPoints(int)",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.addPoints(int)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds points to the score of this player.\r\n *\r\n * @param points\r\n * \t\tThe amount of points to add to the points this player already\r\n * \t\thas.\r\n */\r\npublic void addPoints(int points) {\r\n    this.score += points;\r\n}",
            "docComment": "Adds points to the score of this player.\r\n\r\n@param points\r\n\t\tThe amount of points to add to the points this player already\r\n\t\thas.\r\n",
            "metaSrc": "source code",
            "description": "Adds points to the player's score.",
            "howItWorks": "The method takes an integer 'points' as a parameter and adds it to the player's current score stored in the instance variable 'score'.",
            "howToUse": "Call this method on an instance of Player, passing the number of points you want to add.",
            "layer": "Logic",
            "postConditions": [
              "The player's score is increased by the value of 'points'."
            ],
            "preConditions": [],
            "reason": "This method is necessary for keeping track of the player's progress in the game.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "setDirection(nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "/**\r\n * Sets this unit to face the new direction.\r\n *\r\n * @param newDirection\r\n * \t\tThe new direction this unit is facing.\r\n */\r\npublic void setDirection(nl.tudelft.jpacman.board.Direction newDirection) {\r\n    this.direction = newDirection;\r\n}",
            "docComment": "Sets this unit to face the new direction.\r\n\r\n@param newDirection\r\n\t\tThe new direction this unit is facing.\r\n",
            "metaSrc": "source code",
            "description": "Sets the direction of a unit in the game.",
            "howItWorks": "The method updates the 'direction' field of the Unit object with the newDirection parameter.",
            "howToUse": "Call setDirection with a Direction enum value to change the unit's movement direction.",
            "layer": "Logic",
            "postConditions": [
              "The 'direction' field of the Unit object is updated to the value of newDirection."
            ],
            "preConditions": [],
            "reason": "This method is necessary for controlling the movement of units in the game, which falls under the domain logic.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
            "kind": "method",
            "sourceText": "/**\r\n * Actual case of player consuming a pellet.\r\n *\r\n * @param player\r\n * \t\tThe player involved in the collision.\r\n * @param pellet\r\n * \t\tThe pellet involved in the collision.\r\n */\r\npublic void playerVersusPellet(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.level.Pellet pellet) {\r\n    this.pointCalculator.consumedAPellet(player, pellet);\r\n    pellet.leaveSquare();\r\n}",
            "docComment": "Actual case of player consuming a pellet.\r\n\r\n@param player\r\n\t\tThe player involved in the collision.\r\n@param pellet\r\n\t\tThe pellet involved in the collision.\r\n",
            "metaSrc": "source code",
            "description": "Handles the logic for when a player consumes a pellet in the game.",
            "howItWorks": "The method calls another method to update the player's points and then removes the pellet from its current square.",
            "howToUse": "Call this method whenever a player consumes a pellet in the game.",
            "layer": "Logic",
            "postConditions": [
              "The player's points should be updated based on the type of pellet consumed.",
              "The pellet should no longer be present on the board."
            ],
            "preConditions": [
              "A player must be present on the board.",
              "A pellet must be present on the same square as the player."
            ],
            "reason": "This method updates the game state when a player consumes a pellet, which is part of the core gameplay logic.",
            "returns": "Void.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "tudelft",
            "qualifiedName": "nl.tudelft",
            "kind": "package",
            "metaSrc": "source code",
            "description": "The jpacman project is a Pacman implementation in Java. It includes packages for sprite management, game logic, board handling, point calculation, level management, non-player character behavior, and UI components.",
            "keywords": [
              "Pacman",
              "Java",
              "sprite management",
              "game logic",
              "board handling",
              "point calculation",
              "level management",
              "non-player character behavior",
              "UI components"
            ],
            "layer": "Application Layer",
            "title": "nl.tudelft.jpacman"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Visual representation of some object.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Sprite",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "The nl.tudelft.jpacman.sprite.Sprite interface provides methods for drawing, retrieving dimensions, splitting sprites, and managing sprite properties.",
            "keywords": [
              "Sprite",
              "Drawing",
              "Dimensions",
              "Splitting"
            ],
            "layer": "UI",
            "title": "Sprite Interface",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "/**\r\n * Moves the unit into the given direction if possible and handles all\r\n * collisions.\r\n *\r\n * @param unit\r\n * \t\tThe unit to move.\r\n * @param direction\r\n * \t\tThe direction to move the unit in.\r\n */\r\npublic void move(nl.tudelft.jpacman.board.Unit unit, nl.tudelft.jpacman.board.Direction direction) {\r\n    assert unit != null;\r\n    assert direction != null;\r\n    assert unit.hasSquare();\r\n    if (!this.isInProgress()) {\r\n        return;\r\n    }\r\n    synchronized(this.moveLock) {\r\n        unit.setDirection(direction);\r\n        nl.tudelft.jpacman.board.Square location = unit.getSquare();\r\n        nl.tudelft.jpacman.board.Square destination = location.getSquareAt(direction);\r\n        if (destination.isAccessibleTo(unit)) {\r\n            java.util.List<nl.tudelft.jpacman.board.Unit> occupants = destination.getOccupants();\r\n            unit.occupy(destination);\r\n            for (nl.tudelft.jpacman.board.Unit occupant : occupants) {\r\n                this.collisions.collide(unit, occupant);\r\n            }\r\n        }\r\n        this.updateObservers();\r\n    }\r\n}",
            "docComment": "Moves the unit into the given direction if possible and handles all\r\ncollisions.\r\n\r\n@param unit\r\n\t\tThe unit to move.\r\n@param direction\r\n\t\tThe direction to move the unit in.\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.Action",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An action that can be executed.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Action",
            "qualifiedName": "nl.tudelft.jpacman.ui.Action",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Handles user interface interactions.",
            "howItWorks": "This method is declared as part of the Action interface, which suggests it is intended to be implemented by classes that handle specific UI actions.",
            "howToUse": "Call this method to perform an action in the user interface context.",
            "layer": "UI",
            "parameters": [],
            "postConditions": [],
            "preConditions": [],
            "reason": "The method is part of the UI layer and does not return any value, indicating it performs an action without returning a result.",
            "returns": "Void.",
            "stereotype": "Other",
            "keywords": [
              "Action",
              "UI",
              "doAction"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds key events UP, DOWN, LEFT and RIGHT to a game.\r\n *\r\n * @param builder\r\n * \t\tThe {@link PacManUiBuilder} that will provide the UI.\r\n */\r\nprotected void addSinglePlayerKeys(final nl.tudelft.jpacman.ui.PacManUiBuilder builder) {\r\n    builder.addKey(java.awt.event.KeyEvent.VK_UP, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.NORTH)).addKey(java.awt.event.KeyEvent.VK_DOWN, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.SOUTH)).addKey(java.awt.event.KeyEvent.VK_LEFT, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.WEST)).addKey(java.awt.event.KeyEvent.VK_RIGHT, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.EAST));\r\n}",
            "docComment": "Adds key events UP, DOWN, LEFT and RIGHT to a game.\r\n\r\n@param builder\r\n\t\tThe {@link PacManUiBuilder} that will provide the UI.\r\n",
            "metaSrc": "source code",
            "description": "Adds key mappings for single player controls in the Pacman game.",
            "howItWorks": "The method adds key mappings for the arrow keys (UP, DOWN, LEFT, RIGHT) to move the player character in the specified directions. It uses the moveTowardsDirection method to create actions that move the player.",
            "howToUse": "Call this method with an instance of PacManUiBuilder to configure the key bindings for moving the player character.",
            "layer": "UI",
            "postConditions": [
              "Key mappings for single player controls are added to the builder."
            ],
            "preConditions": [
              "The game must be in progress.",
              "An instance of PacManUiBuilder must be available."
            ],
            "reason": "This method is responsible for setting up the keyboard controls for a single player game in Pacman.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.DELAY",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The suggested delay between moves.\r\n */\r\nprivate static final long DELAY = 175L;",
            "visibility": "private",
            "simpleName": "DELAY",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.DELAY",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void consumedAPellet(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.level.Pellet pellet) {\r\n    player.addPoints(pellet.getValue());\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Adds points to a player's score when a pellet is consumed.",
            "howItWorks": "The method retrieves the point value from the pellet and adds it to the player's current score.",
            "howToUse": "Call this method whenever a player consumes a pellet in the game.",
            "layer": "Logic",
            "postConditions": [
              "The player's score is increased by the value of the consumed pellet."
            ],
            "preConditions": [
              "A player must be present on the board.",
              "A pellet must be present at the player's location."
            ],
            "reason": "This method updates the player's score based on the value of the consumed pellet, which is a core game logic operation.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void collide(nl.tudelft.jpacman.board.Unit mover, nl.tudelft.jpacman.board.Unit movedInto) {\r\n    this.collisions.collide(mover, movedInto);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method delegates the collision handling to another object (`this.collisions`) and passes the two colliding units as parameters.",
            "howToUse": "Call this method with two Unit objects representing entities in the game board that have collided.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "Both `mover` and `movedInto` must be non-null instances of `nl.tudelft.jpacman.board.Unit`."
            ],
            "reason": "This method is part of the game logic, handling interactions between units without involving user interface or data access.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getWidth()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic int getWidth() {\r\n    assert this.currentSprite() != null;\r\n    return this.currentSprite().getWidth();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the width of the current sprite in an animation sequence.",
            "howItWorks": "The method asserts that the current sprite is not null and then returns the width of the current sprite using the getWidth() method of the Sprite class.",
            "howToUse": "Call this method on an instance of AnimatedSprite to get the width of the current sprite in pixels.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "this.currentSprite() != null"
            ],
            "reason": "This method is used to retrieve the width of the current sprite, which is part of the application logic for rendering and displaying sprites in a game like Pacman.",
            "returns": "int - The width of the sprite.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getPelletSprite()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The sprite for the\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getPelletSprite() {\r\n    return this.loadSprite(\"/sprite/pellet.png\");\r\n}",
            "docComment": "\r\n@return The sprite for the\r\n",
            "metaSrc": "source code",
            "description": "Loads a sprite for pellets in Pacman.",
            "howItWorks": "The method calls another method `loadSprite` with the path to the pellet sprite image file.",
            "howToUse": "Call this method to get the sprite for pellets in Pacman.",
            "layer": "Logic",
            "postConditions": [
              "Returns a valid Sprite object representing the pellet sprite."
            ],
            "preConditions": [],
            "reason": "This method is responsible for loading the sprite image for pellets, which is part of the game's visual representation. It does not interact with user input or data access, making it a candidate for the Logic layer.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextAiMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
            "kind": "method",
            "sourceText": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * When the ghosts are not patrolling their home corners, Pinky wants to go\r\n * to the place that is four grid spaces ahead of Pac-Man in the direction\r\n * that Pac-Man is facing. If Pac-Man is facing down, Pinky wants to go to\r\n * the location exactly four spaces below Pac-Man. Moving towards this place\r\n * uses the same logic that Blinky uses to find Pac-Man's exact location.\r\n * Pinky is affected by a targeting bug if Pac-Man is facing up - when he\r\n * moves or faces up, Pinky tries moving towards a point up, and left, four\r\n * spaces.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit player = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (player == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert player.hasSquare();\r\n    nl.tudelft.jpacman.board.Square destination = player.squaresAheadOf(nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), destination, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "{@inheritDoc }\r\n\r\n<p>\r\nWhen the ghosts are not patrolling their home corners, Pinky wants to go\r\nto the place that is four grid spaces ahead of Pac-Man in the direction\r\nthat Pac-Man is facing. If Pac-Man is facing down, Pinky wants to go to\r\nthe location exactly four spaces below Pac-Man. Moving towards this place\r\nuses the same logic that Blinky uses to find Pac-Man's exact location.\r\nPinky is affected by a targeting bug if Pac-Man is facing up - when he\r\nmoves or faces up, Pinky tries moving towards a point up, and left, four\r\nspaces.\r\n</p>\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The image size in pixels.\r\n */\r\nprivate static final int SPRITE_SIZE = 16;",
            "visibility": "private",
            "simpleName": "SPRITE_SIZE",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.SOUTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * South, or down.\r\n */\r\nSOUTH(0, 1)",
            "visibility": "public",
            "simpleName": "SOUTH",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.SOUTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.sprites",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite store containing the ghost sprites.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.PacManSprites sprites;",
            "visibility": "private",
            "simpleName": "sprites",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.sprites",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "frames",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "An array of Sprite objects representing the different frames in the animation."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.moveLock",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The lock that ensures moves are executed sequential.\r\n */\r\nprivate final java.lang.Object moveLock = new java.lang.Object();",
            "visibility": "private",
            "simpleName": "moveLock",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.moveLock",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "graphics",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The graphics context to draw."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds an observer that will be notified when the level is won or lost.\r\n *\r\n * @param observer\r\n * \t\tThe observer that will be notified.\r\n */\r\npublic void addObserver(nl.tudelft.jpacman.level.Level.LevelObserver observer) {\r\n    this.observers.add(observer);\r\n}",
            "docComment": "Adds an observer that will be notified when the level is won or lost.\r\n\r\n@param observer\r\n\t\tThe observer that will be notified.\r\n",
            "metaSrc": "source code",
            "description": "Adds an observer to the level.",
            "howItWorks": "The method adds a given observer to the list of observers.",
            "howToUse": "Call this method with an instance of a class that implements LevelObserver interface.",
            "layer": "Logic",
            "postConditions": [
              "The observer is added to the list of observers."
            ],
            "preConditions": [
              "None."
            ],
            "reason": "This method allows for observation of level changes, which is a core part of the game logic.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprites for every direction."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The desired frame rate interval for the graphics in milliseconds, 40\r\n * being 25 fps.\r\n */\r\nprivate static final int FRAME_INTERVAL = 40;",
            "visibility": "private",
            "simpleName": "FRAME_INTERVAL",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "nextFrame()",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
            "kind": "method",
            "sourceText": "/**\r\n * Draws the next frame, i.e. refreshes the scores and game.\r\n */\r\nprivate void nextFrame() {\r\n    this.boardPanel.repaint();\r\n    this.scorePanel.refresh();\r\n}",
            "docComment": "Draws the next frame, i.e. refreshes the scores and game.\r\n",
            "metaSrc": "source code",
            "description": "Repaints the board panel and refreshes the score panel in the PacManUI.",
            "howItWorks": "Calls repaint() on the boardPanel to update its visual representation and calls refresh() on the scorePanel to update the score labels based on current scores.",
            "howToUse": "Call this method when you want to update the UI elements of the PacMan game, typically after a game state change.",
            "layer": "UI",
            "postConditions": [
              "The boardPanel has been repainted and visually updated.",
              "The scorePanel has refreshed its score labels based on current scores."
            ],
            "preConditions": [
              "The boardPanel and scorePanel must be initialized before calling this method."
            ],
            "reason": "This method is necessary to keep the UI in sync with the game state, ensuring that players see the correct visual representation of the game.",
            "returns": "Void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A unit that can be placed on a {@link Square}.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Unit",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit",
            "kind": "abstract class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Controller"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The collidee."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.image",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Internal image.\r\n */\r\nprivate final java.awt.Image image;",
            "visibility": "private",
            "simpleName": "image",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.image",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "resource",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The path to the resource file."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.clazz",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static java.lang.Class clazz = null;",
            "visibility": "private",
            "simpleName": "clazz",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.clazz",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "start()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.start()",
            "kind": "method",
            "sourceText": "/**\r\n * Starts or resumes the game.\r\n */\r\npublic void start() {\r\n    synchronized(this.progressLock) {\r\n        if (this.isInProgress()) {\r\n            return;\r\n        }\r\n        if (this.getLevel().isAnyPlayerAlive() && (this.getLevel().remainingPellets() > 0)) {\r\n            this.inProgress = true;\r\n            this.getLevel().addObserver(this);\r\n            this.getLevel().start();\r\n        }\r\n    }\r\n}",
            "docComment": "Starts or resumes the game.\r\n",
            "metaSrc": "source code",
            "description": "Starts the game if it is not already in progress and there are players alive with pellets remaining.",
            "howItWorks": "Checks if the game is already in progress. If not, it verifies that there are players alive and pellets remaining. If both conditions are met, it sets the game as in progress, adds an observer to the level, and starts the level.",
            "howToUse": "Call this method on an instance of Game to start the game if all conditions are met.",
            "layer": "Logic",
            "postConditions": [
              "Game is in progress if all conditions are met."
            ],
            "preConditions": [
              "Game is not already in progress.",
              "There are players alive.",
              "Remaining pellets on the level."
            ],
            "reason": "This method ensures that the game can only be started under specific conditions, maintaining the integrity of the game state.",
            "returns": "Void. The method does not return any value.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new collision handler.\r\n *\r\n * @param handler\r\n * \t\tThe symmetric handler for this collision.\r\n */\r\nInverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<C2, C1> handler) {\r\n    super();\r\n    this.handler = handler;\r\n}",
            "docComment": "Creates a new collision handler.\r\n\r\n@param handler\r\n\t\tThe symmetric handler for this collision.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>(int,int)",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction(int,int)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new Direction with the given parameters.\r\n *\r\n * @param deltaX\r\n * \t\tThe delta x (width difference) to an element in the direction\r\n * \t\tin a matrix with 0,0 (x,y) as its top-left element.\r\n * @param deltaY\r\n * \t\tThe delta y (height difference) to an element in the direction\r\n * \t\tin a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\nDirection(int deltaX, int deltaY) {\r\n    super();\r\n    this.deltaX = deltaX;\r\n    this.deltaY = deltaY;\r\n}",
            "docComment": "Creates a new Direction with the given parameters.\r\n\r\n@param deltaX\r\n\t\tThe delta x (width difference) to an element in the direction\r\n\t\tin a matrix with 0,0 (x,y) as its top-left element.\r\n@param deltaY\r\n\t\tThe delta y (height difference) to an element in the direction\r\n\t\tin a matrix with 0,0 (x,y) as its top-left element.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.points.PointCalculator)",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Create a simple player-based collision map, informing the\r\n * point calculator about points to be added.\r\n *\r\n * @param pointCalculator\r\n * \t\tStrategy for calculating points.\r\n */\r\npublic DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    super();\r\n    this.pointCalculator = pointCalculator;\r\n}",
            "docComment": "Create a simple player-based collision map, informing the\r\npoint calculator about points to be added.\r\n\r\n@param pointCalculator\r\n\t\tStrategy for calculating points.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getSpriteStore()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
            "docComment": "\r\n@return The default {@link PacManSprites}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the sprite store used in the game.",
            "howItWorks": "The method returns a pre-initialized instance of PacManSprites, which is stored as a static field in the Launcher class.",
            "howToUse": "Call this method to obtain the sprite store for rendering game elements like Pac-Man and ghosts.",
            "layer": "UI",
            "postConditions": [
              "The returned object is an instance of nl.tudelft.jpacman.sprite.PacManSprites."
            ],
            "preConditions": [],
            "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
            "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A basic implementation of a Pac-Man game.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Game",
            "qualifiedName": "nl.tudelft.jpacman.game.Game",
            "kind": "abstract class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "(no description)",
            "roleStereotype": "Coordinator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void collide(nl.tudelft.jpacman.board.Unit mover, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (mover instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerColliding(((nl.tudelft.jpacman.level.Player) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.npc.Ghost) {\r\n        this.ghostColliding(((nl.tudelft.jpacman.npc.Ghost) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.level.Pellet) {\r\n        this.pelletColliding(((nl.tudelft.jpacman.level.Pellet) (mover)), collidedOn);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic for when two units collide in the game. Depending on the type of unit (player, ghost, or pellet), it calls the appropriate collision handling method.",
            "howItWorks": "The method checks the type of the 'mover' and calls the corresponding collision handling method (playerColliding, ghostColliding, or pelletColliding). Each of these methods handles the specific logic for that type of collision.",
            "howToUse": "Call this method whenever two units collide in the game. The method will handle the appropriate collision logic based on the types of units involved.",
            "layer": "Logic",
            "postConditions": [
              "The appropriate collision handling method has been called based on the types of units involved."
            ],
            "preConditions": [
              "Both 'mover' and 'collidedOn' must be instances of nl.tudelft.jpacman.board.Unit."
            ],
            "reason": "This method is part of the game logic, handling different types of collisions between units in the game. It delegates to specific collision handling methods based on the type of unit involved.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.moveInterval",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The base move interval of the ghost.\r\n */\r\nprivate final int moveInterval;",
            "visibility": "private",
            "simpleName": "moveInterval",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.moveInterval",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "deltaY",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction(int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.game",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The game to display.\r\n */\r\nprivate final nl.tudelft.jpacman.game.Game game;",
            "visibility": "private",
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.game",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.sprites",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite store providing the sprites for the background.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.PacManSprites sprites;",
            "visibility": "private",
            "simpleName": "sprites",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.sprites",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "movedInto",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit that is already on the square that is being invaded."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player involved in the collision."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The default value of a pellet.\r\n */\r\nprivate static final int PELLET_VALUE = 10;",
            "visibility": "private",
            "simpleName": "PELLET_VALUE",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "text",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The list of strings representing the map text."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.observers",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The objects observing this level.\r\n */\r\nprivate final java.util.Set<nl.tudelft.jpacman.level.Level.LevelObserver> observers;",
            "visibility": "private",
            "simpleName": "observers",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.observers",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "The responsibility of the point calculator is to update the points\r\nof the player when certain activities happen.\r\nDifferent calculation strategies can be employed,\r\ngiving rise to different types of games, for example at different levels.\r\n",
            "simpleName": "PointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "The PointCalculator interface handles various actions related to points in the Pacman game, such as when a player collides with a ghost or consumes a pellet.",
            "keywords": [
              "PointCalculator",
              "Pacman",
              "Game Logic"
            ],
            "layer": "Logic",
            "title": "PointCalculator Interface",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghostFactory",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.direction",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The direction this unit is facing.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction direction;",
            "visibility": "private",
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.direction",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "makeGame()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.makeGame()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new game using the level from {@link #makeLevel()}.\r\n *\r\n * @return a new Game.\r\n */\r\npublic nl.tudelft.jpacman.game.Game makeGame() {\r\n    nl.tudelft.jpacman.game.GameFactory gf = this.getGameFactory();\r\n    nl.tudelft.jpacman.level.Level level = this.makeLevel();\r\n    this.game = gf.createSinglePlayerGame(level, this.loadPointCalculator());\r\n    return this.game;\r\n}",
            "docComment": "Creates a new game using the level from {@link #makeLevel()}.\r\n\r\n@return a new Game.\r\n",
            "metaSrc": "source code",
            "description": "Creates a single-player game instance.",
            "howItWorks": "The method retrieves a GameFactory instance, creates a level using makeLevel(), loads a point calculator, and then uses the factory to create a single-player game.",
            "howToUse": "Call this method with a Level object and a PointCalculator object to create a new single-player game.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of nl.tudelft.jpacman.game.Game is returned.",
              "The game should be ready to start with the specified level and point calculator."
            ],
            "preConditions": [
              "A valid Level object must be provided.",
              "A valid PointCalculator object must be provided."
            ],
            "reason": "This method is responsible for creating a game with a single player and a specific level, which falls under the Logic layer as it involves application logic rather than user interface or data access.",
            "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The size (in pixels) of a square on the board. The initial size of this\r\n * panel will scale to fit a board with square of this size.\r\n */\r\nprivate static final int SQUARE_SIZE = 16;",
            "visibility": "private",
            "simpleName": "SQUARE_SIZE",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.levelMap",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private java.lang.String levelMap = nl.tudelft.jpacman.Launcher.DEFAULT_MAP;",
            "visibility": "private",
            "simpleName": "levelMap",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.levelMap",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "<init>(java.util.Map,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new ghost.\r\n *\r\n * @param spriteMap\r\n * \t\tThe sprites for every direction.\r\n * @param moveInterval\r\n * \t\tThe base interval of movement.\r\n * @param intervalVariation\r\n * \t\tThe variation of the interval.\r\n */\r\nprotected Ghost(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> spriteMap, int moveInterval, int intervalVariation) {\r\n    super();\r\n    this.sprites = spriteMap;\r\n    this.intervalVariation = intervalVariation;\r\n    this.moveInterval = moveInterval;\r\n}",
            "docComment": "Creates a new ghost.\r\n\r\n@param spriteMap\r\n\t\tThe sprites for every direction.\r\n@param moveInterval\r\n\t\tThe base interval of movement.\r\n@param intervalVariation\r\n\t\tThe variation of the interval.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Ghost class with sprite map, move interval, and interval variation.",
            "howItWorks": "The constructor initializes the Ghost's sprite map, move interval, and interval variation. It then calls the superclass constructor.",
            "howToUse": "Create a new Ghost object by passing in a sprite map, move interval, and interval variation.",
            "layer": "Logic",
            "postConditions": [
              "The Ghost object is initialized with the provided sprite map, move interval, and interval variation."
            ],
            "preConditions": [
              "spriteMap must not be null",
              "moveInterval must be non-negative",
              "intervalVariation must be non-negative"
            ],
            "reason": "This method is responsible for setting up a new ghost with its initial properties, which are essential for the game logic to function correctly.",
            "returns": "A new instance of the Ghost class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "build(nl.tudelft.jpacman.game.Game)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new Pac-Man UI with the set keys and buttons.\r\n *\r\n * @param game\r\n * \t\tThe game to build the UI for.\r\n * @return A new Pac-Man UI with the set keys and buttons.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUI build(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    if (this.defaultButtons) {\r\n        this.addStartButton(game);\r\n        this.addStopButton(game);\r\n    }\r\n    return new nl.tudelft.jpacman.ui.PacManUI(game, this.buttons, this.keyMappings, this.scoreFormatter);\r\n}",
            "docComment": "Creates a new Pac-Man UI with the set keys and buttons.\r\n\r\n@param game\r\n\t\tThe game to build the UI for.\r\n@return A new Pac-Man UI with the set keys and buttons.\r\n",
            "metaSrc": "source code",
            "description": "Builds a PacManUI instance with the provided game object.",
            "howItWorks": "The method checks if default buttons should be added. If so, it adds start and stop buttons. It then creates and returns a new PacManUI instance with the provided game and other UI components.",
            "howToUse": "Call this method with an instance of nl.tudelft.jpacman.game.Game to get a configured PacManUI object.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [
              "game != null"
            ],
            "reason": "This method is responsible for creating and configuring a user interface for the PacMan game, which involves setting up buttons and other UI components.",
            "returns": "nl.tudelft.jpacman.ui.PacManUI",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "jpacman",
            "qualifiedName": "nl.tudelft.jpacman",
            "kind": "package",
            "metaSrc": "source code",
            "description": "The jpacman project is a Pacman implementation in Java. It includes packages for sprite management, game logic, board handling, point calculation, level management, non-player character behavior, and UI components.",
            "keywords": [
              "Pacman",
              "Java",
              "sprite management",
              "game logic",
              "board handling",
              "point calculation",
              "non-player characters"
            ],
            "layer": "Application Layer",
            "title": "jpacman"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "split(int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "level",
            "qualifiedName": "nl.tudelft.jpacman.level",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The variation in intervals, this makes the ghosts look more dynamic and\r\n * less predictable.\r\n */\r\nprivate static final int INTERVAL_VARIATION = 50;",
            "visibility": "private",
            "simpleName": "INTERVAL_VARIATION",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "loadClassFromFile()",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
            "kind": "method",
            "sourceText": "private java.lang.Class loadClassFromFile() throws java.io.IOException, java.lang.ClassNotFoundException {\r\n    java.lang.String strategyToLoad = this.getCalculatorClassName();\r\n    if (\"DefaultPointCalculator\".equals(strategyToLoad)) {\r\n        return nl.tudelft.jpacman.points.DefaultPointCalculator.class;\r\n    }\r\n    java.net.URL[] urls = new java.net.URL[]{ this.getClass().getClassLoader().getResource(\"scoreplugins/\") };\r\n    try (java.net.URLClassLoader classLoader = new java.net.URLClassLoader(urls, this.getClass().getClassLoader())) {\r\n        return classLoader.loadClass(strategyToLoad);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Loads a class from a file based on the strategy to load.",
            "howItWorks": "The method first checks if the strategy is 'DefaultPointCalculator'. If so, it returns the DefaultPointCalculator class directly. Otherwise, it creates a custom URLClassLoader to load the class from a specified directory.",
            "howToUse": "Call this method with the name of the class to load. It will return the Class object for that class.",
            "layer": "Logic",
            "postConditions": [
              "A Class object representing the loaded class is returned.",
              "If the strategyToLoad is 'DefaultPointCalculator', the DefaultPointCalculator class is returned directly."
            ],
            "preConditions": [
              "The strategyToLoad parameter must be a valid class name.",
              "The scoreplugins/ directory must exist and contain the class file for the strategyToLoad."
            ],
            "reason": "This method is responsible for dynamically loading a point calculator class based on a configuration strategy, which falls under application logic as it involves decision-making and dynamic behavior.",
            "returns": "A Class object representing the loaded class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.board",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The grid of squares with board[x][y] being the square at column x, row y.\r\n */\r\nprivate final nl.tudelft.jpacman.board.Square[][] board;",
            "visibility": "private",
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.board",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The board to render."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
            "kind": "method",
            "sourceText": "/**\r\n * Removes an observer if it was listed.\r\n *\r\n * @param observer\r\n * \t\tThe observer to be removed.\r\n */\r\npublic void removeObserver(nl.tudelft.jpacman.level.Level.LevelObserver observer) {\r\n    this.observers.remove(observer);\r\n}",
            "docComment": "Removes an observer if it was listed.\r\n\r\n@param observer\r\n\t\tThe observer to be removed.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "loadSpriteFromResource(java.lang.String)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
            "kind": "method",
            "sourceText": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
            "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
            "metaSrc": "source code",
            "description": "Loads a sprite from a resource file.",
            "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
            "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
            "layer": "Logic",
            "postConditions": [
              "A Sprite object is returned representing the loaded image."
            ],
            "preConditions": [
              "The resource file must exist at the specified path."
            ],
            "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.GHOSTS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int GHOSTS = 4;",
            "visibility": "private",
            "simpleName": "GHOSTS",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.GHOSTS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "unit",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.ghostIndex",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Used to cycle through the various ghost types.\r\n */\r\nprivate int ghostIndex;",
            "visibility": "private",
            "simpleName": "ghostIndex",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.ghostIndex",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collisionMap",
            "qualifiedName": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.getLevel()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getLevel()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.getLevel()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The level currently being played.\r\n */\r\npublic abstract nl.tudelft.jpacman.level.Level getLevel();",
            "docComment": "\r\n@return The level currently being played.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the current level in the game.",
            "howItWorks": "The method returns the Level object that represents the current level in the game. It does not take any parameters and does not modify the game state.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.game.Game to get the current level.",
            "layer": "Logic",
            "postConditions": [
              "The returned Level object is not null."
            ],
            "preConditions": [],
            "reason": "This method is part of the Logic layer as it deals with the game's domain logic, specifically retrieving the current level state.",
            "returns": "nl.tudelft.jpacman.level.Level - The current level of the game.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The collider."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The direction in which the player moved."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "boardFactory",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The x start coordinate."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "deltaX",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction(int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).5",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "startPositions",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).5",
            "kind": "parameter",
            "parameterPosition": 5,
            "metaSrc": "source code",
            "description": "List of all start positions that were added to the map."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "put(nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
            "docComment": "Adds a new occupant to this square.\r\n\r\n@param occupant\r\n\t\tThe unit to occupy this square.\r\n",
            "metaSrc": "source code",
            "description": "Adds an occupant to the square.",
            "howItWorks": "Checks if the occupant is not null and not already present in the occupants list, then adds the occupant to the list.",
            "howToUse": "Call put with a Unit object as the parameter.",
            "layer": "Logic",
            "postConditions": [
              "The occupant is added to the square's occupants list.",
              "The occupant is not null.",
              "The occupant is not already in the square's occupants list."
            ],
            "preConditions": [
              "The occupant is not null.",
              "The occupant is not already in the square's occupants list."
            ],
            "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createBlinky()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new Blinky / Shadow, the red Ghost.\r\n *\r\n * @see Blinky\r\n * @return A new Blinky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createBlinky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Blinky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.RED));\r\n}",
            "docComment": "Creates a new Blinky / Shadow, the red Ghost.\r\n\r\n@see Blinky\r\n@return A new Blinky.\r\n",
            "metaSrc": "source code",
            "description": "Creates a new Blinky ghost using the sprite factory.",
            "howItWorks": "The method retrieves the sprite for the red color using the sprite factory's getGhostSprite method. It then uses this sprite to create and return a new Blinky object.",
            "howToUse": "Call this method on an instance of GhostFactory to create a new Blinky ghost.",
            "layer": "Logic",
            "postConditions": [
              "A new Blinky ghost will be created and returned.",
              "The Blinky ghost will have the red color sprite."
            ],
            "preConditions": [
              "The GhostFactory instance must be properly initialized.",
              "The sprite factory must have the necessary sprites available."
            ],
            "reason": "This method is responsible for creating an instance of Blinky, which is a type of ghost in the game. It uses the sprite factory to obtain the appropriate sprite and then creates a new Blinky object with that sprite.",
            "returns": "nl.tudelft.jpacman.npc.Ghost",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghosts",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A list of all ghosts on the board."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "grid",
            "qualifiedName": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][]).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The grid of squares that forms the board."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "loop",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "Whether the animation should loop."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Factory that creates Players.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "PlayerFactory",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "A class in the jpacman project responsible for creating Pac-Man players.",
            "howItWorks": "The method retrieves the required sprites and death animation from the PlayerFactory's Sprites instance and uses them to create a new Player object.",
            "howToUse": "Call this method to obtain a new Player object that can be used in the game.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The sprite store containing the Pac-Man sprites.",
                "name": "spriteStore",
                "type": "nl.tudelft.jpacman.sprite.PacManSprites"
              }
            ],
            "postConditions": [
              {
                "condition": "A new Player object is created with the correct sprites."
              }
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating a new PacMan player, which involves setting up the necessary sprites and death animation.",
            "returns": "A newly created instance of nl.tudelft.jpacman.level.Player.",
            "stereotype": "Creational",
            "keywords": [
              "PlayerFactory",
              "PacManSprites",
              "Player"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getCalculatorClassName()",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
            "kind": "method",
            "sourceText": "private java.lang.String getCalculatorClassName() throws java.io.IOException {\r\n    java.util.Properties properties = new java.util.Properties();\r\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"scorecalc.properties\"));\r\n    return properties.getProperty(\"scorecalculator.name\");\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the class name of the point calculator from a properties file.",
            "howItWorks": "Loads properties from 'scorecalc.properties' and returns the value associated with 'scorecalculator.name'.",
            "howToUse": "Call this method to get the class name of the point calculator used in the game.",
            "layer": "Logic",
            "postConditions": [
              "The returned string should be a valid class name representing a point calculator."
            ],
            "preConditions": [
              "The 'scorecalc.properties' file must exist and contain the key 'scorecalculator.name' with a valid class name as its value."
            ],
            "reason": "This method is used to dynamically load the point calculator based on configuration, which is part of the application logic.",
            "returns": "A string representing the fully qualified name of the point calculator class.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The height of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "symetric",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "Indicates whether the collision handler should be symmetric, i.e., if a handler for collidee and collider should also be added."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Basic implementation of a Sprite, it merely consists of a static image.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "ImageSprite",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "A class that represents a sprite in the Pacman game using an image.",
            "howItWorks": "The constructor initializes a new ImageSprite with the provided image.",
            "howToUse": "Call this method with an image to obtain a new ImageSprite.",
            "layer": "UI",
            "parameters": [
              {
                "description": "The image to create a sprite from.",
                "name": "img",
                "type": "java.awt.Image"
              }
            ],
            "postConditions": [
              {
                "condition": "A new ImageSprite object is created and initialized with the provided image."
              }
            ],
            "preConditions": [],
            "reason": "This method is necessary for creating sprites that will be displayed in the game's user interface.",
            "returns": "A new ImageSprite object.",
            "stereotype": "Creational",
            "keywords": [
              "sprite",
              "image",
              "game"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "remove(nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Removes the unit from this square if it was present.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to be removed from this square.\r\n */\r\nvoid remove(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    this.occupants.remove(occupant);\r\n}",
            "docComment": "Removes the unit from this square if it was present.\r\n\r\n@param occupant\r\n\t\tThe unit to be removed from this square.\r\n",
            "metaSrc": "source code",
            "description": "Removes an occupant from the square.",
            "howItWorks": "The method removes a given occupant from the list of occupants in the square. It first asserts that the occupant is not null, then proceeds to remove it from the 'occupants' list.",
            "howToUse": "Call this method with an instance of nl.tudelft.jpacman.board.Unit that you want to remove from the square.",
            "layer": "Logic",
            "postConditions": [
              "The specified occupant is no longer in the list of occupants for this square."
            ],
            "preConditions": [
              "The occupant parameter must not be null."
            ],
            "reason": "This method ensures that an occupant can be removed from a square, which is essential for managing the state of the game board.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The direction of the neighbor relative to the current square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Creates new {@link Level}s from text representations.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "MapParser",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a collision interaction to this collection.\r\n *\r\n * @param <C1>\r\n * \t\tThe collider type.\r\n * @param <C2>\r\n * \t\tThe collidee (unit that was moved into) type.\r\n * @param collider\r\n * \t\tThe collider type.\r\n * @param collidee\r\n * \t\tThe collidee type.\r\n * @param symetric\r\n * \t\t<code>true</code> if this collision is used for both\r\n * \t\tC1 against C2 and vice versa;\r\n * \t\t<code>false</code> if only for C1 against C2.\r\n * @param handler\r\n * \t\tThe handler that handles the collision.\r\n */\r\npublic <C1 extends nl.tudelft.jpacman.board.Unit, C2 extends nl.tudelft.jpacman.board.Unit> void onCollision(java.lang.Class<C1> collider, java.lang.Class<C2> collidee, boolean symetric, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<C1, C2> handler) {\r\n    this.addHandler(collider, collidee, handler);\r\n    if (symetric) {\r\n        this.addHandler(collidee, collider, new nl.tudelft.jpacman.level.CollisionInteractionMap.InverseCollisionHandler<C2, C1>(handler));\r\n    }\r\n}",
            "docComment": "Adds a collision interaction to this collection.\r\n\r\n@param <C1>\r\n\t\tThe collider type.\r\n@param <C2>\r\n\t\tThe collidee (unit that was moved into) type.\r\n@param collider\r\n\t\tThe collider type.\r\n@param collidee\r\n\t\tThe collidee type.\r\n@param symetric\r\n\t\t<code>true</code> if this collision is used for both\r\n\t\tC1 against C2 and vice versa;\r\n\t\t<code>false</code> if only for C1 against C2.\r\n@param handler\r\n\t\tThe handler that handles the collision.\r\n",
            "metaSrc": "source code",
            "description": "Adds a collision handler to the CollisionInteractionMap and optionally adds a symmetric handler if symetric is true.",
            "howItWorks": "The method adds a collision handler to the CollisionInteractionMap. If symetric is true, it also adds a symmetric handler that swaps the roles of collider and collidee in the handler.",
            "howToUse": "Call this method with the appropriate classes for collider and collidee, a boolean indicating whether the collision handler should be symmetric, and the actual CollisionHandler instance.",
            "layer": "Logic",
            "postConditions": [
              "A collision handler is added to the CollisionInteractionMap for the given collider and collidee types",
              "If symetric is true, a symmetric collision handler is also added"
            ],
            "preConditions": [
              "collider and collidee must be subclasses of nl.tudelft.jpacman.board.Unit",
              "handler must implement the CollisionHandler interface for the given types C1 and C2"
            ],
            "reason": "This method is part of the logic layer as it deals with handling collisions between different types of game entities.",
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSprite()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the sprite of this unit.\r\n *\r\n * @return The sprite of this unit.\r\n */\r\npublic abstract nl.tudelft.jpacman.sprite.Sprite getSprite();",
            "docComment": "Returns the sprite of this unit.\r\n\r\n@return The sprite of this unit.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the sprite associated with a unit in the game.",
            "howItWorks": "The method does not perform any operations; it simply returns the sprite attribute of the unit.",
            "howToUse": "Call this method on an instance of a subclass of Unit to retrieve its sprite.",
            "layer": "Logic",
            "postConditions": [
              "The returned sprite is not null."
            ],
            "preConditions": [],
            "reason": "This method is used to get the visual representation of a unit, which is part of the application logic as it deals with how units are displayed on the board.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite - The sprite representing the unit.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.CLYDE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int CLYDE = 3;",
            "visibility": "private",
            "simpleName": "CLYDE",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.CLYDE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pellet",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The pellet involved in the collision."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.nextAiMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextAiMove()",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.nextAiMove()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghosts",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code",
            "description": "List of all ghosts that were added to the map."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "key",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The key class to find the most specific class for in the map."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.PINK",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Speedy, a.k.a. Pinky.\r\n */\r\nPINK()",
            "visibility": "public",
            "simpleName": "PINK",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostColor.PINK",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "graphics",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The graphics context to draw on."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "points",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The number of points this pellet is worth."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Handles the collision between two colliding parties.\r\n\r\n@author Michael de Jong\r\n@param <C1>\r\n\t\tThe collider type.\r\n@param <C2>\r\n\t\tThe collidee type.\r\n",
            "simpleName": "CollisionHandler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method takes two units as parameters and determines how they should interact based on their types and states.",
            "howToUse": "Call this method whenever two units need to interact in the game environment.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The collider.",
                "name": "collider",
                "type": "nl.tudelft.jpacman.board.Unit"
              },
              {
                "description": "The collidee.",
                "name": "collidee",
                "type": "nl.tudelft.jpacman.board.Unit"
              }
            ],
            "postConditions": [],
            "preConditions": [],
            "reason": "This method is responsible for managing interactions between game entities, which falls under the domain logic of the game.",
            "returns": "Void.",
            "stereotype": "Collaborational",
            "keywords": [
              "collision",
              "interaction",
              "game logic"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The amount of frames in the ghost animation.\r\n */\r\nprivate static final int GHOST_ANIMATION_FRAMES = 2;",
            "visibility": "private",
            "simpleName": "GHOST_ANIMATION_FRAMES",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.getBoardCreator()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getBoardCreator()",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.getBoardCreator()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return the BoardCreator\r\n */\r\nprotected nl.tudelft.jpacman.board.BoardFactory getBoardCreator() {\r\n    return this.boardCreator;\r\n}",
            "docComment": "\r\n@return the BoardCreator\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.score",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The amount of points accumulated by this player.\r\n */\r\nprivate int score;",
            "visibility": "private",
            "simpleName": "score",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.score",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.game",
            "kind": "package",
            "metaSrc": "source code",
            "description": "A Pac-Man implementation in Java.",
            "keywords": [
              "Pac-Man",
              "Game",
              "Java"
            ],
            "layer": "Logic",
            "title": "nl.tudelft.jpacman.game"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The width of the new BufferedImage."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.level.PlayerFactory)",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new game factory.\r\n *\r\n * @param playerFactory\r\n * \t\tThe factory providing the player objects.\r\n */\r\npublic GameFactory(nl.tudelft.jpacman.level.PlayerFactory playerFactory) {\r\n    super();\r\n    this.playerFactory = playerFactory;\r\n}",
            "docComment": "Creates a new game factory.\r\n\r\n@param playerFactory\r\n\t\tThe factory providing the player objects.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
            "kind": "method",
            "sourceText": "/**\r\n * Actual case of player bumping into ghost or vice versa.\r\n *\r\n * @param player\r\n * \t\tThe player involved in the collision.\r\n * @param ghost\r\n * \t\tThe ghost involved in the collision.\r\n */\r\npublic void playerVersusGhost(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    this.pointCalculator.collidedWithAGhost(player, ghost);\r\n    player.setAlive(false);\r\n    player.setKiller(ghost);\r\n}",
            "docComment": "Actual case of player bumping into ghost or vice versa.\r\n\r\n@param player\r\n\t\tThe player involved in the collision.\r\n@param ghost\r\n\t\tThe ghost involved in the collision.\r\n",
            "metaSrc": "source code",
            "description": "Handles the logic for when a player collides with a ghost in the game.",
            "howItWorks": "The method calls another method to update the player's points, sets the player as not alive, and assigns the ghost as the killer of the player.",
            "howToUse": "Call this method whenever a player collides with a ghost in the game to handle the collision logic.",
            "layer": "Logic",
            "postConditions": [
              "The player's alive status is set to false.",
              "The player's points are updated based on the collision with a ghost.",
              "The killer of the player is set to the ghost that caused the collision."
            ],
            "preConditions": [
              "A player object must be instantiated and passed as an argument.",
              "A ghost object must be instantiated and passed as an argument."
            ],
            "reason": "This method is part of the game logic, specifically handling interactions between players and ghosts. It updates the player's state upon collision with a ghost.",
            "returns": "Void.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Renders a single square on the given graphics context on the specified\r\n * rectangle.\r\n *\r\n * @param square\r\n * \t\tThe square to render.\r\n * @param graphics\r\n * \t\tThe graphics context to draw on.\r\n * @param x\r\n * \t\tThe x position to start drawing.\r\n * @param y\r\n * \t\tThe y position to start drawing.\r\n * @param width\r\n * \t\tThe width of this square (in pixels.)\r\n * @param height\r\n * \t\tThe height of this square (in pixels.)\r\n */\r\nprivate void render(nl.tudelft.jpacman.board.Square square, java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    square.getSprite().draw(graphics, x, y, width, height);\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        unit.getSprite().draw(graphics, x, y, width, height);\r\n    }\r\n}",
            "docComment": "Renders a single square on the given graphics context on the specified\r\nrectangle.\r\n\r\n@param square\r\n\t\tThe square to render.\r\n@param graphics\r\n\t\tThe graphics context to draw on.\r\n@param x\r\n\t\tThe x position to start drawing.\r\n@param y\r\n\t\tThe y position to start drawing.\r\n@param width\r\n\t\tThe width of this square (in pixels.)\r\n@param height\r\n\t\tThe height of this square (in pixels.)\r\n",
            "metaSrc": "source code",
            "description": "Renders a square on the board with its associated units.",
            "howItWorks": "The method first draws the sprite of the square. Then, it iterates over each unit occupying the square and draws their sprites.",
            "howToUse": "Call this method with a Square object, Graphics context, and coordinates to render the square and its units.",
            "postConditions": [
              "The square's sprite is drawn on the provided Graphics context.",
              "All units occupying the square are drawn on the provided Graphics context."
            ],
            "preConditions": [
              "The square must not be null.",
              "The graphics object must not be null."
            ],
            "reason": "This method is responsible for rendering a square and its occupants on the board, which is part of the user interface.",
            "returns": "void",
            "stereotype": "UI"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Determines whether the unit is allowed to occupy this square.\r\n *\r\n * @param unit\r\n * \t\tThe unit to grant or deny access.\r\n * @return <code>true</code> iff the unit is allowed to occupy this square.\r\n */\r\npublic abstract boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit);",
            "docComment": "Determines whether the unit is allowed to occupy this square.\r\n\r\n@param unit\r\n\t\tThe unit to grant or deny access.\r\n@return <code>true</code> iff the unit is allowed to occupy this square.\r\n",
            "metaSrc": "source code",
            "description": "Checks if a unit can move to the square.",
            "howItWorks": "This method determines whether a given unit (like a player or ghost) can occupy the current square based on game rules and conditions.",
            "howToUse": "Call this method with an instance of `nl.tudelft.jpacman.board.Unit` to check if it can move to the square.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if the unit can move to the square, false otherwise."
            ],
            "preConditions": [],
            "reason": "This method is essential for implementing movement rules in Pacman.",
            "returns": "A boolean indicating whether the unit can move to the square.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.scoreFormatter",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Way to format the score.\r\n */\r\nprivate nl.tudelft.jpacman.ui.ScorePanel.ScoreFormatter scoreFormatter = null;",
            "visibility": "private",
            "simpleName": "scoreFormatter",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.scoreFormatter",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.getPlayers()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getPlayers()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.getPlayers()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return An immutable list of the participants of this game.\r\n */\r\npublic abstract java.util.List<nl.tudelft.jpacman.level.Player> getPlayers();",
            "docComment": "\r\n@return An immutable list of the participants of this game.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves a list of players in the game.",
            "howItWorks": "This method returns an abstract list of Player objects currently active in the game.",
            "howToUse": "Call this method on an instance of Game to get the list of players.",
            "layer": "Logic",
            "postConditions": [
              "The returned list contains all active Player objects in the game."
            ],
            "preConditions": [
              "The Game instance must be initialized and running."
            ],
            "reason": "This method is necessary for managing and accessing player-related logic within the game.",
            "returns": "A List of Player objects representing all players currently in the game.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.util.Map)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new \"Clyde\", a.k.a. \"Pokey\".\r\n *\r\n * @param spriteMap\r\n * \t\tThe sprites for this ghost.\r\n */\r\npublic Clyde(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> spriteMap) {\r\n    super(spriteMap, nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL, nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION);\r\n}",
            "docComment": "Creates a new \"Clyde\", a.k.a. \"Pokey\".\r\n\r\n@param spriteMap\r\n\t\tThe sprites for this ghost.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Clyde class with sprite map.",
            "howItWorks": "The constructor sets up the Clyde object with the provided sprite map and predefined move interval and variation.",
            "howToUse": "Create an instance of Clyde by passing a map of directions to sprites.",
            "layer": "Logic",
            "postConditions": [
              "A new Clyde instance is created with the specified sprite mappings."
            ],
            "preConditions": [
              "spriteMap must not be null."
            ],
            "reason": "This method initializes a new Clyde ghost with specific sprite mappings.",
            "returns": "A new instance of the Clyde class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "private void pelletColliding(nl.tudelft.jpacman.level.Pellet pellet, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (collidedOn instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerVersusPellet(((nl.tudelft.jpacman.level.Player) (collidedOn)), pellet);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic for when a player collides with a pellet in the game.",
            "howItWorks": "The method checks if the unit that collided with the pellet is an instance of Player. If so, it calls another method to handle the logic for when a player consumes a pellet.",
            "howToUse": "Call this method when a collision event occurs between a player and a pellet in the game.",
            "layer": "Logic",
            "postConditions": [
              "The logic for when a player consumes a pellet has been executed if the collidedOn unit is a Player."
            ],
            "preConditions": [
              "A collision event has occurred between a player and a pellet."
            ],
            "reason": "This method is part of the game logic, specifically handling collisions between players and pellets. It does not interact directly with the user interface or data access, making it a candidate for the Logic layer.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The y start coordinate."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.serialVersionUID",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Default serialisation ID.\r\n */\r\nprivate static final long serialVersionUID = 1L;",
            "visibility": "private",
            "simpleName": "serialVersionUID",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.serialVersionUID",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "buttons",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "A map of button labels to actions that should be performed when those buttons are clicked."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.scorePanel",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The panel displaying the player scores.\r\n */\r\nprivate final nl.tudelft.jpacman.ui.ScorePanel scorePanel;",
            "visibility": "private",
            "simpleName": "scorePanel",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.scorePanel",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getOccupants()",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
            "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the list of units occupying a square in the game board.",
            "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
            "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
            "layer": "Logic",
            "postConditions": [
              "The returned list contains only units currently occupying the square."
            ],
            "preConditions": [
              "The Square instance must be initialized and have units added to it."
            ],
            "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
            "returns": "An immutable list of units occupying the square.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.DEFAULT_MAP",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "public static final java.lang.String DEFAULT_MAP = \"/board.txt\";",
            "visibility": "public",
            "simpleName": "DEFAULT_MAP",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.DEFAULT_MAP",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "scoreFormatter",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "An optional score formatter for the score panel."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.SPRITE_STORE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final nl.tudelft.jpacman.sprite.PacManSprites SPRITE_STORE = new nl.tudelft.jpacman.sprite.PacManSprites();",
            "visibility": "private",
            "simpleName": "SPRITE_STORE",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.SPRITE_STORE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.ghostFact",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The factory providing ghosts.\r\n */\r\nprivate final nl.tudelft.jpacman.npc.ghost.GhostFactory ghostFact;",
            "visibility": "private",
            "simpleName": "ghostFact",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.ghostFact",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getSinglePlayer(nl.tudelft.jpacman.game.Game)",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
            "kind": "method",
            "sourceText": "private nl.tudelft.jpacman.level.Player getSinglePlayer(final nl.tudelft.jpacman.game.Game game) {\r\n    java.util.List<nl.tudelft.jpacman.level.Player> players = game.getPlayers();\r\n    if (players.isEmpty()) {\r\n        throw new java.lang.IllegalArgumentException(\"Game has 0 players.\");\r\n    }\r\n    return players.get(0);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the single player from a game.",
            "howItWorks": "The method retrieves all players from the game using game.getPlayers() and returns the first player in the list. If no players are found, it throws an IllegalArgumentException.",
            "howToUse": "Call this method with an instance of nl.tudelft.jpacman.game.Game to get the single player associated with that game.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "return value is not null",
                "description": "The method returns a valid Player object."
              },
              {
                "condition": "return value is the first player in game.getPlayers()",
                "description": "The returned player is the first player in the list of players retrieved from the game."
              }
            ],
            "preConditions": [
              {
                "condition": "game.getPlayers().isEmpty()",
                "description": "The game must have at least one player."
              }
            ],
            "reason": "This method is necessary for accessing the player in the game logic, as it provides a way to interact with the player's actions and state without exposing the entire game state.",
            "returns": "A nl.tudelft.jpacman.level.Player object representing the single player in the game.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getKiller()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getKiller()",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.getKiller()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the unit that caused the death of Pac-Man.\r\n *\r\n * @return <code>Unit</code> iff the player died by collision, otherwise <code>null</code>.\r\n */\r\npublic nl.tudelft.jpacman.board.Unit getKiller() {\r\n    return this.killer;\r\n}",
            "docComment": "Returns the unit that caused the death of Pac-Man.\r\n\r\n@return <code>Unit</code> iff the player died by collision, otherwise <code>null</code>.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "observer",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The observer to be added."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The height of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.player",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The player of this game.\r\n */\r\nprivate final nl.tudelft.jpacman.level.Player player;",
            "visibility": "private",
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.player",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The width of the grid."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.lang.String)",
            "qualifiedName": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)",
            "kind": "constructor",
            "sourceText": "/**\r\n * A configuration exception with a direct message.\r\n *\r\n * @param message\r\n * \t\tThe exception message.\r\n */\r\npublic PacmanConfigurationException(java.lang.String message) {\r\n    super(message);\r\n}",
            "docComment": "A configuration exception with a direct message.\r\n\r\n@param message\r\n\t\tThe exception message.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.PacManSprites)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new ghost factory.\r\n *\r\n * @param spriteStore\r\n * \t\tThe sprite provider.\r\n */\r\npublic GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites spriteStore) {\r\n    super();\r\n    this.sprites = spriteStore;\r\n}",
            "docComment": "Creates a new ghost factory.\r\n\r\n@param spriteStore\r\n\t\tThe sprite provider.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A simple implementation of a collision map for the JPacman player.\r\n<p>\r\nIt uses a number of instanceof checks to implement the multiple dispatch for the \r\ncollisionmap. For more realistic collision maps, this approach will not scale,\r\nand the recommended approach is to use a {@link CollisionInteractionMap}.\r\n\r\n@author Arie van Deursen, 2014\r\n",
            "simpleName": "PlayerCollisions",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a square to the grid based on a given character. These\r\n * character come from the map files and describe the type\r\n * of square.\r\n *\r\n * @param grid\r\n * \t\tThe grid of squares with board[x][y] being the\r\n * \t\tsquare at column x, row y.\r\n * @param ghosts\r\n * \t\tList of all ghosts that were added to the map.\r\n * @param startPositions\r\n * \t\tList of all start positions that were added\r\n * \t\tto the map.\r\n * @param x\r\n * \t\tx coordinate of the square.\r\n * @param y\r\n * \t\ty coordinate of the square.\r\n * @param c\r\n * \t\tCharacter describing the square type.\r\n */\r\nprotected void addSquare(nl.tudelft.jpacman.board.Square[][] grid, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions, int x, int y, char c) {\r\n    switch (c) {\r\n        case ' ' :\r\n            grid[x][y] = this.boardCreator.createGround();\r\n            break;\r\n        case '#' :\r\n            grid[x][y] = this.boardCreator.createWall();\r\n            break;\r\n        case '.' :\r\n            nl.tudelft.jpacman.board.Square pelletSquare = this.boardCreator.createGround();\r\n            grid[x][y] = pelletSquare;\r\n            this.levelCreator.createPellet().occupy(pelletSquare);\r\n            break;\r\n        case 'G' :\r\n            nl.tudelft.jpacman.board.Square ghostSquare = this.makeGhostSquare(ghosts, this.levelCreator.createGhost());\r\n            grid[x][y] = ghostSquare;\r\n            break;\r\n        case 'P' :\r\n            nl.tudelft.jpacman.board.Square playerSquare = this.boardCreator.createGround();\r\n            grid[x][y] = playerSquare;\r\n            startPositions.add(playerSquare);\r\n            break;\r\n        default :\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(((((\"Invalid character at \" + x) + \",\") + y) + \": \") + c);\r\n    }\r\n}",
            "docComment": "Adds a square to the grid based on a given character. These\r\ncharacter come from the map files and describe the type\r\nof square.\r\n\r\n@param grid\r\n\t\tThe grid of squares with board[x][y] being the\r\n\t\tsquare at column x, row y.\r\n@param ghosts\r\n\t\tList of all ghosts that were added to the map.\r\n@param startPositions\r\n\t\tList of all start positions that were added\r\n\t\tto the map.\r\n@param x\r\n\t\tx coordinate of the square.\r\n@param y\r\n\t\ty coordinate of the square.\r\n@param c\r\n\t\tCharacter describing the square type.\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "event",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "type",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "currentLocation",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "<p>\r\nAn implementation of the classic Pac-Man ghost Inky.\r\n</p>\r\n<b>AI:</b> Inky has the most complicated AI of all. Inky considers two things: Blinky's\r\nlocation, and the location two grid spaces ahead of Pac-Man. Inky draws a\r\nline from Blinky to the spot that is two squares in front of Pac-Man and\r\nextends that line twice as far. Therefore, if Inky is alongside Blinky\r\nwhen they are behind Pac-Man, Inky will usually follow Blinky the whole\r\ntime. But if Inky is in front of Pac-Man when Blinky is far behind him,\r\nInky tends to want to move away from Pac-Man (in reality, to a point very\r\nfar ahead of Pac-Man). Inky is affected by a similar targeting bug that\r\naffects Speedy. When Pac-Man is moving or facing up, the spot Inky uses to\r\ndraw the line is two squares above and left of Pac-Man.\r\n<p>\r\nSource: http://strategywiki.org/wiki/Pac-Man/Getting_Started\r\n</p>\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Inky",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Inky is a ghost in Pacman, responsible for following a complex AI pattern involving Blinky and Pac-Man.",
            "howItWorks": "The method calls the superclass constructor with the sprite map, move interval, and interval variation.",
            "howToUse": "Create an instance of Inky by passing a Map containing sprites for each direction.",
            "layer": "Logic",
            "parameters": [
              {
                "name": "spriteMap",
                "type": "java.util.Map"
              }
            ],
            "postConditions": [
              {
                "condition": "A new instance of the Inky class is created."
              }
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating a new instance of the Inky ghost with the provided sprite map. It initializes the ghost's movement properties and passes them to the superclass constructor.",
            "returns": "A new instance of the Inky class.",
            "stereotype": "Creational",
            "keywords": [
              "Pacman",
              "ghost",
              "AI",
              "Blinky",
              "Pac-Man"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "level",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The level for the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "ui",
            "qualifiedName": "nl.tudelft.jpacman.ui",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getScore()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getScore()",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.getScore()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the amount of points accumulated by this player.\r\n *\r\n * @return The amount of points accumulated by this player.\r\n */\r\npublic int getScore() {\r\n    return this.score;\r\n}",
            "docComment": "Returns the amount of points accumulated by this player.\r\n\r\n@return The amount of points accumulated by this player.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.RED",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Shadow, a.k.a. Blinky.\r\n */\r\nRED()",
            "visibility": "public",
            "simpleName": "RED",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostColor.RED",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The width of the destination draw area."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The delay between frames.\r\n */\r\nprivate static final int ANIMATION_DELAY = 200;",
            "visibility": "private",
            "simpleName": "ANIMATION_DELAY",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghost",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The width of the sprite to draw."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new Pac-Man UI builder without any mapped keys or buttons.\r\n */\r\npublic PacManUiBuilder() {\r\n    super();\r\n    this.defaultButtons = false;\r\n    this.buttons = new java.util.LinkedHashMap<java.lang.String, nl.tudelft.jpacman.ui.Action>();\r\n    this.keyMappings = new java.util.HashMap<java.lang.Integer, nl.tudelft.jpacman.ui.Action>();\r\n}",
            "docComment": "Creates a new Pac-Man UI builder without any mapped keys or buttons.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pellet",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": null
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.levelLost()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "levelLost()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.levelLost()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void levelLost() {\r\n    this.stop();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Stops the game when a level is lost.",
            "howItWorks": "The method sets the inProgress flag to false and stops the current level.",
            "howToUse": "Call this method to stop the game when a player loses a level.",
            "layer": "Logic",
            "postConditions": [
              "The game has stopped, and the level is no longer active."
            ],
            "preConditions": [
              "The game is currently in progress."
            ],
            "reason": "This method is part of the game logic, specifically handling the end condition of a level being lost.",
            "returns": "Void. The method does not return any value.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pellet",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The pellet that is consumed by the player."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The calculator used to determine points for collisions."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "labels": [
            "Container",
            "Structure"
          ],
          "properties": {
            "docComment": "A map of possible collisions and their handlers.\r\n\r\n@author Michael de Jong\r\n@author Jeroen Roosen\r\n",
            "simpleName": "CollisionInteractionMap",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getDirection()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.getDirection()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
            "docComment": "Returns the current direction this unit is facing.\r\n\r\n@return The current direction this unit is facing.\r\n",
            "metaSrc": "source code",
            "description": "Returns the current direction of a unit in the game.",
            "howItWorks": "The method simply returns the value of the 'direction' field of the Unit object.",
            "howToUse": "Call this method on an instance of Unit to get its current movement direction.",
            "layer": "Logic",
            "postConditions": [
              "The returned direction is one of the values from nl.tudelft.jpacman.board.Direction enum."
            ],
            "preConditions": [],
            "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
            "returns": "A Direction object representing the current direction of the unit.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Sprite Store containing the classic Pac-Man sprites.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "PacManSprites",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "service",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Bashful, a.k.a. Inky.\r\n */\r\nCYAN()",
            "visibility": "public",
            "simpleName": "CYAN",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getDeltaY()",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The delta y (height difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\npublic int getDeltaY() {\r\n    return this.deltaY;\r\n}",
            "docComment": "\r\n@return The delta y (height difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n",
            "metaSrc": "source code",
            "description": "Returns the vertical movement delta for a direction.",
            "howItWorks": "The method simply returns the value of the private field 'deltaY'.",
            "howToUse": "Call this method on an instance of Direction to get its vertical movement delta.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be one of the predefined constants in Direction (UP, DOWN, LEFT, RIGHT)."
            ],
            "preConditions": [],
            "reason": "This method is necessary for determining vertical movement based on a direction, which is part of the game logic.",
            "returns": "An integer representing the vertical movement delta for the direction.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new level factory.\r\n *\r\n * @param spriteStore\r\n * \t\tThe sprite store providing the sprites for units.\r\n * @param ghostFactory\r\n * \t\tThe factory providing ghosts.\r\n * @param pointCalculator\r\n * \t\tThe algorithm to calculate the points.\r\n */\r\npublic LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites spriteStore, nl.tudelft.jpacman.npc.ghost.GhostFactory ghostFactory, nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    super();\r\n    this.sprites = spriteStore;\r\n    this.ghostIndex = -1;\r\n    this.ghostFact = ghostFactory;\r\n    this.pointCalculator = pointCalculator;\r\n}",
            "docComment": "Creates a new level factory.\r\n\r\n@param spriteStore\r\n\t\tThe sprite store providing the sprites for units.\r\n@param ghostFactory\r\n\t\tThe factory providing ghosts.\r\n@param pointCalculator\r\n\t\tThe algorithm to calculate the points.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "withMapFile(java.lang.String)",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)",
            "kind": "method",
            "sourceText": "/**\r\n * Set the name of the file containing this level's map.\r\n *\r\n * @param fileName\r\n * \t\tMap to be used.\r\n * @return Level corresponding to the given map.\r\n */\r\npublic nl.tudelft.jpacman.Launcher withMapFile(java.lang.String fileName) {\r\n    this.levelMap = fileName;\r\n    return this;\r\n}",
            "docComment": "Set the name of the file containing this level's map.\r\n\r\n@param fileName\r\n\t\tMap to be used.\r\n@return Level corresponding to the given map.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void draw(java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    // nothing to draw.\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostColor()",
            "kind": "constructor",
            "sourceText": "GhostColor() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.sprites",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite store that provides sprites for units.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.PacManSprites sprites;",
            "visibility": "private",
            "simpleName": "sprites",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.sprites",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "frames",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The frames of this animation."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.square",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The square this unit is currently occupying.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square square;",
            "visibility": "private",
            "simpleName": "square",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.square",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghosts",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "A list of ghosts that will be part of the level."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.scoreLabels",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The map of players and the labels their scores are on.\r\n */\r\nprivate final java.util.Map<nl.tudelft.jpacman.level.Player, javax.swing.JLabel> scoreLabels;",
            "visibility": "private",
            "simpleName": "scoreLabels",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.scoreLabels",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a unit that is facing east.\r\n */\r\nprotected Unit() {\r\n    super();\r\n    this.direction = nl.tudelft.jpacman.board.Direction.EAST;\r\n}",
            "docComment": "Creates a unit that is facing east.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Unit class.",
            "howItWorks": "Calls the superclass constructor and sets the direction to EAST.",
            "howToUse": "Create an instance of the Unit class without parameters.",
            "layer": "Logic",
            "postConditions": [
              "The newly created instance of Unit has a direction set to EAST."
            ],
            "preConditions": [],
            "reason": "This method is responsible for setting up the initial state of a Unit object, which falls under application logic.",
            "returns": "A new instance of the Unit class with its direction set to EAST.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "mapName",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The name of the resource file containing the map."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
            "kind": "method",
            "sourceText": "private void makeGrid(char[][] map, int width, int height, nl.tudelft.jpacman.board.Square[][] grid, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions) {\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            char c = map[x][y];\r\n            this.addSquare(grid, ghosts, startPositions, x, y, c);\r\n        }\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Adds squares to the grid based on a given character from a map file.",
            "howItWorks": "Iterates through each cell in the grid and calls addSquare to handle the creation and placement of squares.",
            "howToUse": "Call this method with the appropriate parameters to populate the game board.",
            "layer": "Logic",
            "postConditions": [
              "All squares have been added to the grid based on the character map.",
              "Ghosts and start positions are correctly initialized in the grid."
            ],
            "preConditions": [
              "The map array is not null and has the correct dimensions.",
              "The grid array is not null and has the correct dimensions."
            ],
            "reason": "This method is responsible for populating the game board with squares based on a character map, which is part of the game logic.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Create a new sprite store.\r\n */\r\npublic SpriteStore() {\r\n    super();\r\n    this.spriteMap = new java.util.HashMap<java.lang.String, nl.tudelft.jpacman.sprite.Sprite>();\r\n}",
            "docComment": "Create a new sprite store.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the SpriteStore class.",
            "howItWorks": "Calls the superclass constructor and initializes a HashMap to store sprite mappings.",
            "howToUse": "Create an instance of SpriteStore by calling its default constructor.",
            "layer": "Data",
            "postConditions": [
              "A new HashMap named 'spriteMap' is initialized and assigned to the instance variable."
            ],
            "preConditions": [],
            "reason": "This method initializes the necessary data structure for storing sprites, which is a core functionality of the SpriteStore class.",
            "returns": "The newly created instance of SpriteStore.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite()",
            "kind": "constructor",
            "sourceText": "EmptySprite() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit initiating the collision."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit that initiates the collision."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "labels": [
            "Container",
            "Structure"
          ],
          "properties": {
            "docComment": "Navigation provides utility to navigate on {@link Square}s.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Navigation",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.levelCreator",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The factory that creates the levels.\r\n */\r\nprivate final nl.tudelft.jpacman.level.LevelFactory levelCreator;",
            "visibility": "private",
            "simpleName": "levelCreator",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.levelCreator",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "<p>\r\nAn implementation of the classic Pac-Man ghost Clyde.\r\n</p>\r\n<p>\r\nPokey needs a new nickname because out of all the ghosts,\r\nClyde is the least likely to \"C'lyde\" with Pac-Man. Clyde is always the last\r\nghost out of the regenerator, and the loner of the gang, usually off doing\r\nhis own thing when not patrolling the bottom-left corner of the maze. His\r\nbehavior is very random, so while he's not likely to be following you in hot\r\npursuit with the other ghosts, he is a little less predictable, and still a\r\ndanger.\r\n</p>\r\n<p>\r\n<b>AI:</b> Clyde has two basic AIs, one for when he's far from Pac-Man, and\r\none for when he is near to Pac-Man. \r\nWhen Clyde is far away from Pac-Man (beyond eight grid spaces),\r\nClyde behaves very much like Blinky, trying to move to Pac-Man's exact\r\nlocation. However, when Clyde gets within eight grid spaces of Pac-Man, he\r\nautomatically changes his behavior and runs away.\r\n</p>\r\n<p>\r\nSource: http://strategywiki.org/wiki/Pac-Man/Getting_Started\r\n</p>\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Clyde",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class representing Clyde, a ghost in the Pacman game. It inherits from Ghost and implements specific AI behavior.",
            "howItWorks": "The constructor sets up the Clyde object with the provided sprite map and predefined move interval and variation.",
            "howToUse": "Create an instance of Clyde by passing a map of directions to sprites.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The sprites for this ghost.",
                "name": "spriteMap",
                "type": "java.util.Map"
              }
            ],
            "postConditions": [
              {
                "condition": "A new Clyde object is created with the provided sprite map."
              }
            ],
            "preConditions": [],
            "reason": "This method initializes a new Clyde ghost with specific sprite mappings.",
            "returns": "A new instance of the Clyde class.",
            "stereotype": "Creational",
            "keywords": [
              "Clyde",
              "Ghost",
              "Pacman",
              "AI",
              "Behavior"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.BLINKY",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int BLINKY = 0;",
            "visibility": "private",
            "simpleName": "BLINKY",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.BLINKY",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "points",
            "qualifiedName": "nl.tudelft.jpacman.points",
            "kind": "package",
            "metaSrc": "source code",
            "description": "A Pacman implementation in Java.",
            "keywords": [
              "Pacman",
              "Game Logic",
              "Points Calculator"
            ],
            "layer": "Logic",
            "title": "nl.tudelft.jpacman.points"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level",
          "labels": [
            "Container",
            "Structure"
          ],
          "properties": {
            "docComment": "A level of Pac-Man. A level consists of the board with the players and the\r\nAIs on it.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Level",
            "qualifiedName": "nl.tudelft.jpacman.level.Level",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "(no description)",
            "roleStereotype": "Coordinator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getMapParser()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getMapParser()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A new map parser object using the factories from\r\n{@link #getLevelFactory()} and {@link #getBoardFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.MapParser getMapParser() {\r\n    return new nl.tudelft.jpacman.level.MapParser(this.getLevelFactory(), this.getBoardFactory());\r\n}",
            "docComment": "\r\n@return A new map parser object using the factories from\r\n{@link #getLevelFactory()} and {@link #getBoardFactory()}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the MapParser used in the game.",
            "howItWorks": "The method creates a new MapParser object, passing in instances of LevelFactory and BoardFactory obtained from other methods within the same class.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.Launcher to get the MapParser used by the game.",
            "layer": "Logic",
            "postConditions": [
              "A valid MapParser instance is returned."
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating a MapParser, which is essential for parsing levels in the game. It uses other factory methods to obtain necessary components like LevelFactory and BoardFactory.",
            "returns": "An instance of nl.tudelft.jpacman.level.MapParser.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getDeltaX()",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The delta x (width difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\npublic int getDeltaX() {\r\n    return this.deltaX;\r\n}",
            "docComment": "\r\n@return The delta x (width difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n",
            "metaSrc": "source code",
            "description": "Returns the horizontal movement delta for a direction.",
            "howItWorks": "The method simply returns the value of the private field 'deltaX'.",
            "howToUse": "Call this method on an instance of Direction to get its horizontal movement delta.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be an integer representing the horizontal movement delta for the direction."
            ],
            "preConditions": [],
            "reason": "This method is necessary for determining how a character should move horizontally on the board based on its current direction.",
            "returns": "An integer representing the horizontal movement delta for the direction.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handler",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The handler of this collision.\r\n */\r\nprivate final nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<C2, C1> handler;",
            "visibility": "private",
            "simpleName": "handler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handler",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player participating in the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "this",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The square to check for invariance."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "loop",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "Indicates whether the animation should loop indefinitely."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n * Main execution method for the Launcher.\r\n *\r\n * @param args\r\n * \t\tThe command line arguments - which are ignored.\r\n * @throws IOException\r\n * \t\tWhen a resource could not be read.\r\n */\r\npublic static void main(java.lang.String[] args) throws java.io.IOException {\r\n    new nl.tudelft.jpacman.Launcher().launch();\r\n}",
            "docComment": "Main execution method for the Launcher.\r\n\r\n@param args\r\n\t\tThe command line arguments - which are ignored.\r\n@throws IOException\r\n\t\tWhen a resource could not be read.\r\n",
            "metaSrc": "source code",
            "description": "Initializes and starts a single-player Pac-Man game.",
            "howItWorks": "Creates an instance of nl.tudelft.jpacman.Launcher and calls its launch() method to initialize and start the game.",
            "howToUse": "Call this method to start a new Pac-Man game.",
            "layer": "UI",
            "postConditions": [
              "A single-player Pac-Man game should be initialized and running."
            ],
            "preConditions": [
              "The environment must be set up to run Java applications."
            ],
            "reason": "This method is responsible for starting the game, which involves both application logic and user interface elements.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.progressLock",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Object that locks the start and stop methods.\r\n */\r\nprivate final java.lang.Object progressLock = new java.lang.Object();",
            "visibility": "private",
            "simpleName": "progressLock",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.progressLock",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.inProgress",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * <code>true</code> iff this level is currently in progress, i.e. players\r\n * and NPCs can move.\r\n */\r\nprivate boolean inProgress;",
            "visibility": "private",
            "simpleName": "inProgress",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.inProgress",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation()",
            "kind": "constructor",
            "sourceText": "private Navigation() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.players",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The players on this level.\r\n */\r\nprivate final java.util.List<nl.tudelft.jpacman.level.Player> players;",
            "visibility": "private",
            "simpleName": "players",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.players",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Handles the collision between two colliding parties.\r\n *\r\n * @param collider\r\n * \t\tThe collider.\r\n * @param collidee\r\n * \t\tThe collidee.\r\n */\r\nvoid handleCollision(C1 collider, C2 collidee);",
            "docComment": "Handles the collision between two colliding parties.\r\n\r\n@param collider\r\n\t\tThe collider.\r\n@param collidee\r\n\t\tThe collidee.\r\n",
            "metaSrc": "source code",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method takes two units as parameters and determines how they should interact based on their types and states.",
            "howToUse": "Call this method whenever two units need to interact in the game environment.",
            "layer": "Logic",
            "postConditions": [
              "The interaction between the two units is handled appropriately, potentially changing their states or triggering other game events."
            ],
            "preConditions": [
              "Both collider and collidee are valid instances of nl.tudelft.jpacman.board.Unit."
            ],
            "reason": "This method is responsible for managing interactions between game entities, which falls under the domain logic of the game.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.invariant()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "invariant()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.invariant()",
            "kind": "method",
            "sourceText": "/**\r\n * Tests whether the square this unit is occupying has this unit listed as\r\n * one of its occupiers.\r\n *\r\n * @return <code>true</code> if the square this unit is occupying has this\r\nunit listed as one of its occupiers, or if this unit is currently\r\nnot occupying any square.\r\n */\r\nprotected boolean invariant() {\r\n    return (this.square == null) || this.square.getOccupants().contains(this);\r\n}",
            "docComment": "Tests whether the square this unit is occupying has this unit listed as\r\none of its occupiers.\r\n\r\n@return <code>true</code> if the square this unit is occupying has this\r\nunit listed as one of its occupiers, or if this unit is currently\r\nnot occupying any square.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the unit is correctly placed on a square.",
            "howItWorks": "The method checks if the unit's square is null or if the unit is contained in the list of occupants of its square.",
            "howToUse": "Call this method to verify the integrity of the unit's position on the board.",
            "layer": "Logic",
            "postConditions": [
              "The unit's position is consistent with the square it occupies."
            ],
            "preConditions": [
              "The unit and its square are properly initialized."
            ],
            "reason": "Ensures that units are correctly placed on squares, maintaining game integrity.",
            "returns": "A boolean indicating whether the unit's invariant holds true.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "levelWon()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
            "kind": "method",
            "sourceText": "/**\r\n * The level has been won. Typically the level should be stopped when\r\n * this event is received.\r\n */\r\nvoid levelWon();",
            "docComment": "The level has been won. Typically the level should be stopped when\r\nthis event is received.\r\n",
            "metaSrc": "source code",
            "description": "Notifies observers that the level has been won.",
            "howItWorks": "The method is called internally by the game logic when the player completes a level. It then calls the update method on all registered observers, passing them an event indicating that the level has been won.",
            "howToUse": "Call this method when the level has been successfully completed to notify all registered observers.",
            "layer": "Logic",
            "postConditions": [
              "All registered observers will receive an update indicating that the level has been won."
            ],
            "preConditions": [
              "The game must be in a state where a level can be completed.",
              "A player must have successfully navigated through the level and collected all required items."
            ],
            "reason": "This method is part of the observer pattern, where it notifies other objects about a change in state (level won). It does not return any value and does not take any parameters.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "keyReleased(java.awt.event.KeyEvent)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void keyReleased(java.awt.event.KeyEvent event) {\r\n    // do nothing\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.getPlayerFactory()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getPlayerFactory()",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory.getPlayerFactory()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the player factory associated with this game factory.\r\n *\r\n * @return The player factory associated with this game factory.\r\n */\r\nprotected nl.tudelft.jpacman.level.PlayerFactory getPlayerFactory() {\r\n    return this.playerFactory;\r\n}",
            "docComment": "Returns the player factory associated with this game factory.\r\n\r\n@return The player factory associated with this game factory.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
            "kind": "static method",
            "sourceText": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Adds new targets to the list of targets for a ghost in the game.",
            "howItWorks": "The method iterates through all possible directions from the given square, checks if the adjacent square is accessible and not already visited, and adds it as a new target if both conditions are met.",
            "howToUse": "Call this method with the current unit, target list, visited set, current node, and square to add new targets to the list.",
            "layer": "Logic",
            "postConditions": [
              "New targets may be added to the targets list based on the squares that meet the accessibility and unvisited criteria."
            ],
            "preConditions": [
              "The square parameter must not be null."
            ],
            "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
            "returns": "void"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Static empty sprite to serve as the end of a non-looping sprite.\r\n */\r\nprivate static final nl.tudelft.jpacman.sprite.Sprite END_OF_LOOP = new nl.tudelft.jpacman.sprite.EmptySprite();",
            "visibility": "private",
            "simpleName": "END_OF_LOOP",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "isAnimating",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "Indicates whether the sprite should be animating."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationDelay",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The delay between frames.\r\n */\r\nprivate final int animationDelay;",
            "visibility": "private",
            "simpleName": "animationDelay",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationDelay",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Handles the collision between two colliding parties, if a suitable\r\n * collision handler is listed.\r\n *\r\n * @param <C1>\r\n * \t\tThe collider type.\r\n * @param <C2>\r\n * \t\tThe collidee (unit that was moved into) type.\r\n * @param collider\r\n * \t\tThe collider.\r\n * @param collidee\r\n * \t\tThe collidee.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\n@java.lang.Override\r\npublic <C1 extends nl.tudelft.jpacman.board.Unit, C2 extends nl.tudelft.jpacman.board.Unit> void collide(C1 collider, C2 collidee) {\r\n    java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> colliderKey = this.getMostSpecificClass(this.handlers, collider.getClass());\r\n    if (colliderKey == null) {\r\n        return;\r\n    }\r\n    java.util.Map<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<? extends java.lang.Object, ? extends java.lang.Object>> map = this.handlers.get(colliderKey);\r\n    java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> collideeKey = this.getMostSpecificClass(map, collidee.getClass());\r\n    if (collideeKey == null) {\r\n        return;\r\n    }\r\n    nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<C1, C2> collisionHandler = ((nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<C1, C2>) (map.get(collideeKey)));\r\n    if (collisionHandler == null) {\r\n        return;\r\n    }\r\n    collisionHandler.handleCollision(collider, collidee);\r\n}",
            "docComment": "Handles the collision between two colliding parties, if a suitable\r\ncollision handler is listed.\r\n\r\n@param <C1>\r\n\t\tThe collider type.\r\n@param <C2>\r\n\t\tThe collidee (unit that was moved into) type.\r\n@param collider\r\n\t\tThe collider.\r\n@param collidee\r\n\t\tThe collidee.\r\n",
            "metaSrc": "source code",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method retrieves the most specific classes for both the collider and collidee from a map, then uses these keys to find and invoke the appropriate collision handler.",
            "howToUse": "Call this method with two instances of nl.tudelft.jpacman.board.Unit to handle their collision.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "collider and collidee are instances of nl.tudelft.jpacman.board.Unit."
            ],
            "reason": "This method is responsible for managing the interactions between different units in the game, which falls under the logic layer as it involves application and domain logic.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "startPositions",
            "qualifiedName": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "parseMap(java.lang.String)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
            "kind": "method",
            "sourceText": "/**\r\n * Parses the provided input stream as a character stream and passes it\r\n * result to {@link #parseMap(List)}.\r\n *\r\n * @param mapName\r\n * \t\tName of a resource that will be read.\r\n * @return The parsed level as represented by the text on the input stream.\r\n * @throws IOException\r\n * \t\twhen the resource could not be read.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = { \"OBL_UNSATISFIED_OBLIGATION\", \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\" }, justification = \"try with resources always cleans up / false positive in java 11\")\r\npublic nl.tudelft.jpacman.level.Level parseMap(java.lang.String mapName) throws java.io.IOException {\r\n    try (java.io.InputStream boardStream = nl.tudelft.jpacman.level.MapParser.class.getResourceAsStream(mapName)) {\r\n        if (boardStream == null) {\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Could not get resource for: \" + mapName);\r\n        }\r\n        return this.parseMap(boardStream);\r\n    }\r\n}",
            "docComment": "Parses the provided input stream as a character stream and passes it\r\nresult to {@link #parseMap(List)}.\r\n\r\n@param mapName\r\n\t\tName of a resource that will be read.\r\n@return The parsed level as represented by the text on the input stream.\r\n@throws IOException\r\n\t\twhen the resource could not be read.\r\n",
            "metaSrc": "source code",
            "description": "Parses a list of strings representing the text format of a Pacman level into a game level object.",
            "howItWorks": "The method reads the input stream from the specified resource file, checks if it is null, and throws an exception if it is. If not null, it calls another parseMap method with the input stream to parse the map into a game level object.",
            "howToUse": "Call this method with the name of the resource file containing the map. It will return a Level object representing the parsed map.",
            "layer": "Logic",
            "postConditions": [
              "A Level object representing the parsed map will be returned.",
              "An exception will be thrown if the resource file is not found or cannot be read."
            ],
            "preConditions": [
              "The resource file specified by mapName must exist and be accessible."
            ],
            "reason": "This method is responsible for parsing a map from a resource file into a game level object, which falls under application and domain logic.",
            "returns": "nl.tudelft.jpacman.level.Level",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "intervalVariation",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The variation in the move interval."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSquare()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
            "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the square that a unit is currently occupying.",
            "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
            "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "this.square != null"
            ],
            "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
            "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "addStopButton(nl.tudelft.jpacman.game.Game)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a button with the caption {@value #STOP_CAPTION} that stops the\r\n * game.\r\n *\r\n * @param game\r\n * \t\tThe game to stop.\r\n */\r\nprivate void addStopButton(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION, game::stop);\r\n}",
            "docComment": "Adds a button with the caption {@value #STOP_CAPTION} that stops the\r\ngame.\r\n\r\n@param game\r\n\t\tThe game to stop.\r\n",
            "metaSrc": "source code",
            "description": "Adds a stop button to the PacMan UI that stops the game when clicked.",
            "howItWorks": "The method checks if the game is not null, then adds a button labeled 'STOP' to the UI. The button's action listener calls the game's stop method.",
            "howToUse": "Call this method with an instance of Game to add a stop button that will stop the game when clicked.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [
              {
                "condition": "game != null",
                "description": "The game instance must be non-null."
              }
            ],
            "reason": "This method is responsible for adding a stop button to the UI, which allows users to pause or stop the game.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Panel displaying a game.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "BoardPanel",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class representing a board panel in a Pacman game, responsible for rendering the game board.",
            "keywords": [
              "BoardPanel",
              "Pacman",
              "UI"
            ],
            "layer": "UI",
            "title": "BoardPanel",
            "containsFunctions": [
              {
                "description": "Initializes a BoardPanel with a given game instance.",
                "howItWorks": "The constructor sets up the minimum and preferred size of the panel based on the width and height of the game board.",
                "howToUse": "Create an instance of BoardPanel by passing a Game object to its constructor.",
                "layer": "UI",
                "name": "<init>(nl.tudelft.jpacman.game.Game)",
                "reason": "This method initializes a BoardPanel, setting up its dimensions based on the game's level board.",
                "returns": "Void",
                "stereotype": "Creational"
              },
              {
                "description": "Renders the entire board using a given graphics context.",
                "howItWorks": "The method first asserts that the Graphics object is not null. It then retrieves the current level from the game and calls the render method of the BoardPanel class to draw the board on the provided graphics context.",
                "howToUse": "Call this method on an instance of BoardPanel, passing in a Graphics object to render the board.",
                "layer": "UI",
                "name": "paint(java.awt.Graphics)",
                "reason": "This method is responsible for rendering the game board, which is a UI-related task. It interacts with the game logic to get the current level and then renders it using the provided graphics context.",
                "returns": "Void",
                "stereotype": "Other"
              },
              {
                "description": "Renders the entire board using a given graphics context.",
                "howItWorks": "The method calculates the cell width and height based on the board dimensions and window size. It then iterates over each square on the board, calling another render method to draw each square.",
                "howToUse": "Call this method with a Board object, a Graphics object, and a Dimension object representing the window size.",
                "layer": "UI",
                "name": "render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
                "reason": "This method is responsible for rendering the entire board, which involves drawing each square and its contents. It does not modify any data or handle user input, so it fits best in the UI layer.",
                "returns": "Void",
                "stereotype": "UI"
              },
              {
                "description": "Renders a square on the board with its associated units.",
                "howItWorks": "The method first draws the sprite of the square. Then, it iterates over each unit occupying the square and draws their sprites.",
                "howToUse": "Call this method with a Square object, Graphics context, and coordinates to render the square and its units.",
                "layer": "UI",
                "name": "render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
                "reason": "This method is responsible for rendering a square and its occupants on the board, which is part of the user interface.",
                "returns": "Void",
                "stereotype": "UI"
              }
            ],
            "containsVariables": [
              {
                "name": "SQUARE_SIZE",
                "type": "int",
                "value": 16
              },
              {
                "name": "serialVersionUID",
                "type": "long",
                "value": 1
              },
              {
                "name": "game",
                "type": "nl.tudelft.jpacman.game.Game"
              },
              {
                "name": "BACKGROUND_COLOR",
                "type": "java.awt.Color",
                "value": "BLACK"
              }
            ],
            "inheritsFrom": [],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "update()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
            "kind": "method",
            "sourceText": "/**\r\n * Updates the current frame index depending on the current system time.\r\n */\r\nprivate void update() {\r\n    long now = java.lang.System.currentTimeMillis();\r\n    if (this.animating) {\r\n        while (this.lastUpdate < now) {\r\n            this.lastUpdate += this.animationDelay;\r\n            this.current++;\r\n            if (this.looping) {\r\n                this.current %= this.animationFrames.length;\r\n            } else if (this.current == this.animationFrames.length) {\r\n                this.animating = false;\r\n            }\r\n        } \r\n    } else {\r\n        this.lastUpdate = now;\r\n    }\r\n}",
            "docComment": "Updates the current frame index depending on the current system time.\r\n",
            "metaSrc": "source code",
            "description": "Updates the state of an animated sprite by advancing its frame index based on a fixed animation delay.",
            "howItWorks": "The method calculates the current time and checks if it's time to update the sprite's frame. If so, it increments the frame index and wraps around if looping is enabled or stops animating if not.",
            "howToUse": "Call this method periodically to animate a sprite in a game loop.",
            "layer": "Logic",
            "postConditions": [
              "The sprite's frame index is updated if it's time to do so.",
              "If not animating, the last update time is reset to the current time."
            ],
            "preConditions": [
              "The sprite must be in an animating state or have a valid animation delay set."
            ],
            "reason": "This method is responsible for updating the visual representation of a sprite over time, which falls under application logic.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "parent",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit that is being collided with."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.level",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The level of this game.\r\n */\r\nprivate final nl.tudelft.jpacman.level.Level level;",
            "visibility": "private",
            "simpleName": "level",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.level",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.killer",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * {@link Unit} iff this player died by collision, <code>null</code> otherwise.\r\n */\r\nprivate nl.tudelft.jpacman.board.Unit killer;",
            "visibility": "private",
            "simpleName": "killer",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.killer",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "grid",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The grid of squares with board[x][y] being the square at column x, row y."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.intervalVariation",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The random variation added to the {@link #moveInterval}.\r\n */\r\nprivate final int intervalVariation;",
            "visibility": "private",
            "simpleName": "intervalVariation",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.intervalVariation",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.util.Map)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new \"Inky\".\r\n *\r\n * @param spriteMap\r\n * \t\tThe sprites for this ghost.\r\n */\r\npublic Inky(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> spriteMap) {\r\n    super(spriteMap, nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL, nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION);\r\n}",
            "docComment": "Creates a new \"Inky\".\r\n\r\n@param spriteMap\r\n\t\tThe sprites for this ghost.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Inky class with sprite map.",
            "howItWorks": "The method calls the superclass constructor with the sprite map, move interval, and interval variation.",
            "howToUse": "Create an instance of Inky by passing a Map containing sprites for each direction.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of Inky is created with the provided sprite map."
            ],
            "preConditions": [
              "spriteMap must not be null."
            ],
            "reason": "This method is responsible for creating a new instance of the Inky ghost with the provided sprite map. It initializes the ghost's movement properties and passes them to the superclass constructor.",
            "returns": "A new instance of the Inky class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "fileName",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startNPCs()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "startNPCs()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.startNPCs()",
            "kind": "method",
            "sourceText": "/**\r\n * Starts all NPC movement scheduling.\r\n */\r\nprivate void startNPCs() {\r\n    for (final nl.tudelft.jpacman.npc.Ghost npc : this.npcs.keySet()) {\r\n        java.util.concurrent.ScheduledExecutorService service = java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\r\n        service.schedule(new nl.tudelft.jpacman.level.Level.NpcMoveTask(service, npc), npc.getInterval() / 2, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n        this.npcs.put(npc, service);\r\n    }\r\n}",
            "docComment": "Starts all NPC movement scheduling.\r\n",
            "metaSrc": "source code",
            "description": "Starts the movement of NPCs (Ghosts) in a Pacman level.",
            "howItWorks": "The method iterates over all NPCs, creates a ScheduledExecutorService for each, and schedules a task that moves the NPC. The task is scheduled to run after half of the ghost's interval time.",
            "howToUse": "Call this method when you want to start the movement of NPCs in the game level.",
            "layer": "Logic",
            "postConditions": [
              "All NPCs will start moving according to their specified intervals.",
              "A ScheduledExecutorService is created and started for each NPC."
            ],
            "preConditions": [
              "The game level must be initialized with at least one NPC.",
              "Each NPC must have an associated interval time."
            ],
            "reason": "This method is responsible for initializing and starting the movement of ghosts in the game. It sets up a scheduled task for each ghost to move at its specified interval.",
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "occupant",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The occupant to be removed from the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "loadSprite(java.lang.String)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
            "kind": "method",
            "sourceText": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
            "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
            "metaSrc": "source code",
            "description": "Loads a sprite from a resource file if it's not already in the cache.",
            "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
            "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
            "layer": "Logic",
            "postConditions": [
              "A Sprite object is returned if the resource is successfully loaded.",
              "If an IOException occurs, a PacmanConfigurationException is thrown."
            ],
            "preConditions": [
              "The resource path must be valid and accessible."
            ],
            "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "launch()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.launch()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates and starts a JPac-Man game.\r\n */\r\npublic void launch() {\r\n    this.makeGame();\r\n    nl.tudelft.jpacman.ui.PacManUiBuilder builder = new nl.tudelft.jpacman.ui.PacManUiBuilder().withDefaultButtons();\r\n    this.addSinglePlayerKeys(builder);\r\n    this.pacManUI = builder.build(this.getGame());\r\n    this.pacManUI.start();\r\n}",
            "docComment": "Creates and starts a JPac-Man game.\r\n",
            "metaSrc": "source code",
            "description": "Initializes and starts a single-player Pac-Man game.",
            "howItWorks": "The method creates a game instance, configures the user interface with default buttons and key mappings, and then starts the UI.",
            "howToUse": "Call this method to start a new single-player Pac-Man game.",
            "layer": "UI",
            "postConditions": [
              "The game should be initialized and running.",
              "The user interface should be visible and responsive to user inputs."
            ],
            "preConditions": [
              "A valid game configuration is available."
            ],
            "reason": "This method is responsible for setting up the game environment, creating the UI, and starting the game loop.",
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "text",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A list of strings where each string represents a row in the map."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.getHeight()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getHeight()",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.getHeight()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
            "docComment": "Returns the number of rows.\r\n\r\n@return The height of this board.\r\n",
            "metaSrc": "source code",
            "description": "Returns the height of the board.",
            "howItWorks": "The method accesses the first row of the 'board' array and returns its length, which represents the height of the board.",
            "howToUse": "Call getHeight() on an instance of nl.tudelft.jpacman.board.Board to retrieve the height of the board.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is a non-negative integer representing the height of the board."
            ],
            "preConditions": [
              "The 'board' array must be initialized and contain at least one row."
            ],
            "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
            "returns": "An integer representing the height of the board.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "makeLevel()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.makeLevel()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new level. By default this method will use the map parser to\r\n * parse the default board stored in the <code>board.txt</code> resource.\r\n *\r\n * @return A new level.\r\n */\r\npublic nl.tudelft.jpacman.level.Level makeLevel() {\r\n    try {\r\n        return this.getMapParser().parseMap(this.getLevelMap());\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to create level, name = \" + this.getLevelMap(), e);\r\n    }\r\n}",
            "docComment": "Creates a new level. By default this method will use the map parser to\r\nparse the default board stored in the <code>board.txt</code> resource.\r\n\r\n@return A new level.\r\n",
            "metaSrc": "source code",
            "description": "Creates a game level by parsing a map string.",
            "howItWorks": "The method retrieves a MapParser and uses it to parse a map string into a Level object. It handles IOExceptions by throwing a PacmanConfigurationException with the name of the level map.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.Launcher to create a new game level.",
            "layer": "Logic",
            "postConditions": [
              "A new Level object is returned representing the parsed game level.",
              "IOException is thrown if the map file cannot be read."
            ],
            "preConditions": [
              "A valid map string must be available.",
              "MapParser and BoardFactory instances must be properly initialized."
            ],
            "reason": "This method is responsible for creating a game level using the provided map data. It delegates to other methods to retrieve the necessary components and handle exceptions.",
            "returns": "nl.tudelft.jpacman.level.Level",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "double",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "double",
            "qualifiedName": "double",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pointCalculator",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private nl.tudelft.jpacman.points.PointCalculator pointCalculator;",
            "visibility": "private",
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.pointCalculator",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Pokey, a.k.a. Clyde.\r\n */\r\nORANGE()",
            "visibility": "public",
            "simpleName": "ORANGE",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSprite()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the sprite of this square.\r\n *\r\n * @return The sprite of this square.\r\n */\r\npublic abstract nl.tudelft.jpacman.sprite.Sprite getSprite();",
            "docComment": "Returns the sprite of this square.\r\n\r\n@return The sprite of this square.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the sprite associated with a square in the game board.",
            "howItWorks": "The method returns a Sprite object that represents the visual element of the square, which can be used for rendering purposes in the UI layer.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.board.Square to get its associated sprite.",
            "layer": "Logic",
            "postConditions": [
              "The returned Sprite object is not null."
            ],
            "preConditions": [],
            "reason": "This method is part of the logic layer as it deals with the application and domain logic related to the game's visual elements.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite - The sprite object representing the visual element of the square.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "target",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The square to which the unit should move."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startSquares",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The squares from which players can start this game.\r\n */\r\nprivate final java.util.List<nl.tudelft.jpacman.board.Square> startSquares;",
            "visibility": "private",
            "simpleName": "startSquares",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.startSquares",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.getWidth()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getWidth()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.getWidth()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic int getWidth() {\r\n    return 0;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player to be registered."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.Sprite)",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new wall square.\r\n *\r\n * @param sprite\r\n * \t\tThe background for the square.\r\n */\r\nWall(nl.tudelft.jpacman.sprite.Sprite sprite) {\r\n    super();\r\n    this.background = sprite;\r\n}",
            "docComment": "Creates a new wall square.\r\n\r\n@param sprite\r\n\t\tThe background for the square.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new Wall object in the Pacman game.",
            "howItWorks": "The constructor initializes a new Wall object and sets its background sprite using the provided Sprite object. It then calls the superclass constructor to ensure proper initialization.",
            "howToUse": "Create an instance of Wall by passing a Sprite object as an argument to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of Wall is created with the specified background sprite."
            ],
            "preConditions": [
              "A valid Sprite object must be passed as an argument."
            ],
            "reason": "This method is responsible for creating a new wall object with a specified background sprite, which is part of the game's logic layer.",
            "returns": "A newly created instance of Wall.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The height of the grid."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getWidth()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the width of this sprite.\r\n *\r\n * @return The width in pixels.\r\n */\r\nint getWidth();",
            "docComment": "Returns the width of this sprite.\r\n\r\n@return The width in pixels.\r\n",
            "metaSrc": "source code",
            "description": "Returns the width of the sprite.",
            "howItWorks": "The method simply returns the pre-defined width value associated with the sprite object.",
            "howToUse": "Call this method on an instance of Sprite to get its width.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is a non-negative integer representing the width of the sprite."
            ],
            "preConditions": [],
            "reason": "This method is used to retrieve the width dimension of a sprite, which is essential for rendering and collision detection in the game.",
            "returns": "int - The width of the sprite.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "graphics",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The Graphics object to draw on."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The width of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
            "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
            "metaSrc": "source code",
            "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
            "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
            "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "baseImage != null",
              "frames > 0"
            ],
            "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.dispose()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "dispose()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.dispose()",
            "kind": "method",
            "sourceText": "/**\r\n * Disposes of the UI. For more information see\r\n * {@link javax.swing.JFrame#dispose()}.\r\n *\r\n * Precondition: The game was launched first.\r\n */\r\npublic void dispose() {\r\n    assert this.pacManUI != null;\r\n    this.pacManUI.dispose();\r\n}",
            "docComment": "Disposes of the UI. For more information see\r\n{@link javax.swing.JFrame#dispose()}.\r\n\r\nPrecondition: The game was launched first.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "amountToLookAhead",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The number of squares to look ahead."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator()",
            "kind": "constructor",
            "sourceText": "DefaultPointCalculator() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.addPoints(int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "points",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.addPoints(int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The number of points to add to the player's score."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.stop()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "stop()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.stop()",
            "kind": "method",
            "sourceText": "/**\r\n * Pauses the game.\r\n */\r\npublic void stop() {\r\n    synchronized(this.progressLock) {\r\n        if (!this.isInProgress()) {\r\n            return;\r\n        }\r\n        this.inProgress = false;\r\n        this.getLevel().stop();\r\n    }\r\n}",
            "docComment": "Pauses the game.\r\n",
            "metaSrc": "source code",
            "description": "Stops the game by setting the inProgress flag to false and stopping the level.",
            "howItWorks": "The method uses a synchronized block to ensure thread safety. It checks if the game is currently in progress using the isInProgress() method. If it is, it sets the inProgress flag to false and calls the stop() method on the current level.",
            "howToUse": "Call the stop() method on an instance of nl.tudelft.jpacman.game.Game to stop the game.",
            "layer": "Logic",
            "postConditions": [
              "The inProgress flag is set to false.",
              "The level's stop() method is called."
            ],
            "preConditions": [
              "The game must be in progress (isInProgress() returns true)."
            ],
            "reason": "This method is necessary for stopping the game when a player chooses to end it or when an error occurs.",
            "returns": "Void. The method does not return any value.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "playerFactory",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "npc",
            "qualifiedName": "nl.tudelft.jpacman.npc",
            "kind": "package",
            "metaSrc": "source code",
            "description": "Handles application and domain logic related to non-player characters (NPCs) in a Pacman game. It includes abstract classes and interfaces for managing ghost behavior.",
            "keywords": [
              "Pacman",
              "NPC",
              "Ghost",
              "Logic"
            ],
            "layer": "Logic",
            "title": "nl.tudelft.jpacman.npc"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "startPositions",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghost",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The x-coordinate of the top-left corner of the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.board",
            "kind": "package",
            "metaSrc": "source code",
            "componentName": "nl.tudelft.jpacman.board",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "frames",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The number of frames in the animation."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "width",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new level for the board.\r\n *\r\n * @param board\r\n * \t\tThe board for the level.\r\n * @param ghosts\r\n * \t\tThe ghosts on the board.\r\n * @param startPositions\r\n * \t\tThe squares on which players start on this board.\r\n * @param collisionMap\r\n * \t\tThe collection of collisions that should be handled.\r\n */\r\npublic Level(nl.tudelft.jpacman.board.Board board, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions, nl.tudelft.jpacman.level.CollisionMap collisionMap) {\r\n    super();\r\n    assert board != null;\r\n    assert ghosts != null;\r\n    assert startPositions != null;\r\n    this.board = board;\r\n    this.inProgress = false;\r\n    this.npcs = new java.util.HashMap<nl.tudelft.jpacman.npc.Ghost, java.util.concurrent.ScheduledExecutorService>();\r\n    for (nl.tudelft.jpacman.npc.Ghost ghost : ghosts) {\r\n        this.npcs.put(ghost, null);\r\n    }\r\n    this.startSquares = startPositions;\r\n    this.startSquareIndex = 0;\r\n    this.players = new java.util.ArrayList<nl.tudelft.jpacman.level.Player>();\r\n    this.collisions = collisionMap;\r\n    this.observers = new java.util.HashSet<nl.tudelft.jpacman.level.Level.LevelObserver>();\r\n}",
            "docComment": "Creates a new level for the board.\r\n\r\n@param board\r\n\t\tThe board for the level.\r\n@param ghosts\r\n\t\tThe ghosts on the board.\r\n@param startPositions\r\n\t\tThe squares on which players start on this board.\r\n@param collisionMap\r\n\t\tThe collection of collisions that should be handled.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).5",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).5",
            "kind": "parameter",
            "parameterPosition": 5,
            "metaSrc": "source code",
            "description": "The height of the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The height of the new BufferedImage."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startStopLock",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The lock that ensures starting and stopping can't interfere with each\r\n * other.\r\n */\r\nprivate final java.lang.Object startStopLock = new java.lang.Object();",
            "visibility": "private",
            "simpleName": "startStopLock",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.startStopLock",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The game instance from which to retrieve the player."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "moveInterval",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The base interval for moving the ghost."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.keyMappings",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Map of key events and their actions.\r\n */\r\nprivate final java.util.Map<java.lang.Integer, nl.tudelft.jpacman.ui.Action> keyMappings;",
            "visibility": "private",
            "simpleName": "keyMappings",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.keyMappings",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The game instance to be started when the button is clicked."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The type of unit that is collided with by another unit."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "remainingPellets()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.remainingPellets()",
            "kind": "method",
            "sourceText": "/**\r\n * Counts the pellets remaining on the board.\r\n *\r\n * @return The amount of pellets remaining on the board.\r\n */\r\npublic int remainingPellets() {\r\n    nl.tudelft.jpacman.board.Board board = this.getBoard();\r\n    int pellets = 0;\r\n    for (int x = 0; x < board.getWidth(); x++) {\r\n        for (int y = 0; y < board.getHeight(); y++) {\r\n            for (nl.tudelft.jpacman.board.Unit unit : board.squareAt(x, y).getOccupants()) {\r\n                if (unit instanceof nl.tudelft.jpacman.level.Pellet) {\r\n                    pellets++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert pellets >= 0;\r\n    return pellets;\r\n}",
            "docComment": "Counts the pellets remaining on the board.\r\n\r\n@return The amount of pellets remaining on the board.\r\n",
            "metaSrc": "source code",
            "description": "Counts the remaining pellets on a board.",
            "howItWorks": "The method iterates through each square on the board and counts the number of Pellet objects present.",
            "howToUse": "Call this method on a Level object to get the count of remaining pellets.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be a non-negative integer representing the number of pellets remaining on the board."
            ],
            "preConditions": [
              "The board must be initialized with at least one pellet."
            ],
            "reason": "This method is necessary to determine if the game has ended, as it checks for the presence of pellets which are the primary objective in Pacman.",
            "returns": "The number of remaining pellets as an integer.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Factory that creates ghosts.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "GhostFactory",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "A class responsible for creating instances of different types of ghosts in the game.",
            "howItWorks": "The method retrieves the sprite for the red color using the sprite factory's getGhostSprite method. It then uses this sprite to create and return a new Blinky object.",
            "howToUse": "Call this method on an instance of GhostFactory to create a new Blinky ghost.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The sprite provider.",
                "name": "spriteStore",
                "type": "nl.tudelft.jpacman.sprite.PacManSprites"
              }
            ],
            "reason": "This method is responsible for creating an instance of Blinky, which is a type of ghost in the game. It uses the sprite factory to obtain the appropriate sprite and then creates a new Blinky object with that sprite.",
            "returns": "Nl.tudelft.jpacman.npc.Ghost",
            "stereotype": "Creational",
            "keywords": [
              "GhostFactory",
              "Blinky",
              "Clyde",
              "Inky",
              "Pinky",
              "sprite factory"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.util.Map)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new \"Blinky\", a.k.a. \"Shadow\".\r\n *\r\n * @param spriteMap\r\n * \t\tThe sprites for this ghost.\r\n */\r\n// TODO Blinky should speed up when there are a few pellets left, but he\r\n// has no way to find out how many there are.\r\npublic Blinky(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> spriteMap) {\r\n    super(spriteMap, nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL, nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION);\r\n}",
            "docComment": "Creates a new \"Blinky\", a.k.a. \"Shadow\".\r\n\r\n@param spriteMap\r\n\t\tThe sprites for this ghost.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Blinky class with sprite map.",
            "howItWorks": "The constructor calls the superclass constructor with the sprite map, move interval, and interval variation specific to Blinky.",
            "howToUse": "Create an instance of Blinky by passing a Map containing Direction-Sprite pairs.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of Blinky is created with the provided sprite map and movement intervals."
            ],
            "preConditions": [
              "spriteMap must not be null."
            ],
            "reason": "This method is responsible for creating a new Blinky ghost with the provided sprite map. It initializes the ghost's movement intervals and sprite mappings.",
            "returns": "A new instance of the Blinky class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "The default JPacMan UI frame. The PacManUI consists of the following\r\nelements:\r\n\r\n<ul>\r\n<li>A score panel at the top, displaying the score of the player(s).\r\n<li>A board panel, displaying the current level, i.e. the board and all units\r\non it.\r\n<li>A button panel, containing all buttons provided upon creation.\r\n</ul>\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "PacManUI",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "assertions": [
              {
                "condition": "game != null",
                "message": "Game cannot be null."
              },
              {
                "condition": "buttons != null",
                "message": "Buttons map cannot be null."
              },
              {
                "condition": "keyMappings != null",
                "message": "Key mappings map cannot be null."
              }
            ],
            "description": "A class representing the user interface for a Pacman game in JPacman, responsible for displaying the game state and handling user input.",
            "howItWorks": "The constructor sets up the UI window, adds key listeners for user input, creates panels for buttons, score, and board, and arranges them within the window.",
            "howToUse": "Create an instance of PacManUI by passing in a Game object, maps of button and key actions, and optionally a score formatter.",
            "layer": "UI",
            "parameters": [
              {
                "name": "game",
                "type": "nl.tudelft.jpacman.game.Game"
              },
              {
                "name": "buttons",
                "type": "java.util.Map"
              },
              {
                "name": "keyMappings",
                "type": "java.util.Map"
              },
              {
                "name": "scoreFormatter",
                "optional": true,
                "type": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter"
              }
            ],
            "reason": "This method initializes the user interface for the game, setting up the necessary components and event listeners.",
            "returns": "Void. Initializes a new instance of PacManUI.",
            "keywords": [
              "PacManUI",
              "JPacman",
              "Game UI",
              "ScorePanel",
              "BoardPanel"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "setAnimating(boolean)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
            "kind": "method",
            "sourceText": "/**\r\n * Starts or stops the animation of this sprite.\r\n *\r\n * @param isAnimating\r\n * \t\t<code>true</code> to animate this sprite or <code>false</code>\r\n * \t\tto stop animating this sprite.\r\n */\r\npublic void setAnimating(boolean isAnimating) {\r\n    this.animating = isAnimating;\r\n}",
            "docComment": "Starts or stops the animation of this sprite.\r\n\r\n@param isAnimating\r\n\t\t<code>true</code> to animate this sprite or <code>false</code>\r\n\t\tto stop animating this sprite.\r\n",
            "metaSrc": "source code",
            "description": "Sets whether the sprite is currently animating.",
            "howItWorks": "The method takes a boolean parameter `isAnimating` and assigns it to the instance variable `animating`.",
            "howToUse": "Call this method with `true` to start animation or `false` to stop it.",
            "layer": "UI",
            "postConditions": [
              "The `animating` field of the `AnimatedSprite` instance is set to the value of `isAnimating`."
            ],
            "preConditions": [],
            "reason": "This method allows control over the animation state of a sprite, which is essential for rendering in the UI layer.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Helper class to keep track of the path.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Node",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Represents a node in a navigation tree used for pathfinding and ghost movement in the Pacman game.",
            "howItWorks": "The constructor sets the direction, square, and parent fields to the provided values.",
            "howToUse": "Create a new instance of Navigation$Node by passing in the appropriate Direction, Square, and Node objects.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The direction, which is null for the root node.",
                "name": "direction",
                "type": "nl.tudelft.jpacman.board.Direction"
              },
              {
                "description": "The square associated with this node.",
                "name": "square",
                "type": "nl.tudelft.jpacman.board.Square"
              },
              {
                "description": "The parent node, which is null for the root node.",
                "name": "parent",
                "type": "nl.tudelft.jpacman.npc.ghost.Navigation.Node"
              }
            ],
            "reason": "This method initializes a new node with a direction, square, and parent node.",
            "returns": "A new instance of Navigation$Node.",
            "stereotype": "Constructor",
            "keywords": [
              "Navigation",
              "Node",
              "Pacman",
              "Ghost",
              "Pathfinding"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "<p>\r\nAn implementation of the classic Pac-Man ghost Speedy.\r\n</p>\r\n<p>\r\nNickname: Pinky. Speedy gets his name for an unusual reason. Speedy appears\r\nto try to outsmart Pac-Man and crash into Pac-Man from the opposite\r\ndirection. The truth behind this is that when Speedy isn't patrolling the\r\ntop-left corner of the maze, he tries to attack Pac-Man by moving to where he\r\nis going to be (that is, a few spaces ahead of Pac-Man's current direction)\r\ninstead of right where he is, as Blinky does. It's difficult to use this to\r\nyour advantage, but it's possible. If Pinky is coming at you and you face a\r\ndifferent direction, even briefly, he may just turn away and attempt to cut\r\nyou off in the new direction while you return to your original direction. In\r\nthe original Japanese version, his name is Machibuse/Pinky.\r\n</p>\r\n<p>\r\n<b>AI:</b> When the ghosts are not patrolling their home corners, Pinky wants\r\nto go to the place that is four grid spaces ahead of Pac-Man in the direction\r\nthat Pac-Man is facing. If Pac-Man is facing down, Pinky wants to go to the\r\nlocation exactly four spaces below Pac-Man. Moving towards this place uses\r\nthe same logic that Blinky uses to find Pac-Man's exact location. Pinky is\r\naffected by a targeting bug if Pac-Man is facing up - when he moves or faces\r\nup, Pinky tries moving towards a point up, and left, four spaces.\r\n</p>\r\n<p>\r\n<i>Note: In the original arcade series, the ghosts' genders are unspecified\r\nand assumed to be male. In 1999, the USA division of Namco and Namco Hometech\r\ndeveloped the Pac-Man World series and declared Pinky to be female.</i>\r\n</p>\r\n<p>\r\nSource: http://strategywiki.org/wiki/Pac-Man/Getting_Started\r\n</p>\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Pinky",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class representing the Pinky ghost in a Pacman game. It extends the Ghost class and is responsible for implementing Pinky's AI behavior.",
            "howItWorks": "The method calls the superclass constructor with the sprite map, move interval, and interval variation for Pinky.",
            "howToUse": "Create an instance of Pinky by passing a Map containing Direction-Sprite pairs.",
            "layer": "Logic",
            "parameters": [
              {
                "name": "spriteMap",
                "type": "java.util.Map"
              }
            ],
            "postConditions": [
              "A new instance of Pinky is created with the specified sprite map."
            ],
            "preConditions": [
              "A valid spriteMap is provided."
            ],
            "reason": "This method is responsible for creating a new Pinky ghost with the provided sprite map. It initializes the Pinky object by calling its superclass constructor with specific parameters related to movement intervals and sprite mapping.",
            "returns": "A new instance of the Pinky class.",
            "stereotype": "Creational",
            "keywords": [
              "Pinky",
              "Ghost",
              "AI",
              "Movement",
              "Pacman"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The game instance to be associated with the board panel."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "defaultCollisions()",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates the default collisions Player-Ghost and Player-Pellet.\r\n *\r\n * @return The collision map containing collisions for Player-Ghost and\r\nPlayer-Pellet.\r\n */\r\nprivate nl.tudelft.jpacman.level.CollisionInteractionMap defaultCollisions() {\r\n    nl.tudelft.jpacman.level.CollisionInteractionMap collisionMap = new nl.tudelft.jpacman.level.CollisionInteractionMap();\r\n    collisionMap.onCollision(nl.tudelft.jpacman.level.Player.class, nl.tudelft.jpacman.npc.Ghost.class, (nl.tudelft.jpacman.level.Player player,nl.tudelft.jpacman.npc.Ghost ghost) -> {\r\n        this.pointCalculator.collidedWithAGhost(player, ghost);\r\n        player.setAlive(false);\r\n        player.setKiller(ghost);\r\n    });\r\n    collisionMap.onCollision(nl.tudelft.jpacman.level.Player.class, nl.tudelft.jpacman.level.Pellet.class, (nl.tudelft.jpacman.level.Player player,nl.tudelft.jpacman.level.Pellet pellet) -> {\r\n        this.pointCalculator.consumedAPellet(player, pellet);\r\n        pellet.leaveSquare();\r\n    });\r\n    return collisionMap;\r\n}",
            "docComment": "This method initializes a CollisionInteractionMap with specific collision handlers for Player-Ghost and Player-Pellet interactions. When a Player collides with a Ghost, it updates the player's points and sets the ghost as the killer. When a Player consumes a Pellet, it updates the player's points and removes the pellet from the board.",
            "metaSrc": "source code",
            "description": "Creates a CollisionInteractionMap for handling collisions between Player, Ghost, and Pellet in the game.",
            "otherScriptsUsed": [
              {
                "description": "Adds a collision handler to the CollisionInteractionMap and optionally adds a symmetric handler if symetric is true.",
                "name": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)"
              },
              {
                "description": "Sets the player's alive status.",
                "name": "nl.tudelft.jpacman.level.Player.setAlive(boolean)"
              },
              {
                "description": "Handles the logic for when a player collides with a ghost in the game.",
                "name": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)"
              },
              {
                "description": "Removes the unit from its current square if it is present.",
                "name": "nl.tudelft.jpacman.board.Unit.leaveSquare()"
              },
              {
                "description": "Sets the killer for the player.",
                "name": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)"
              },
              {
                "description": "Handles the logic for when a player consumes a pellet in the game.",
                "name": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)"
              }
            ],
            "possibleLayers": [
              {
                "description": "Handles application and domain logic, i.e., neither UI nor data access.",
                "name": "Logic"
              }
            ],
            "returns": "nl.tudelft.jpacman.level.CollisionInteractionMap"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprites for every direction."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Caption for the default stop button.\r\n */\r\nprivate static final java.lang.String STOP_CAPTION = \"Stop\";",
            "visibility": "private",
            "simpleName": "STOP_CAPTION",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidedOn",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit that collided with the pellet."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.getSprite()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    if (this.isAlive()) {\r\n        return this.sprites.get(this.getDirection());\r\n    }\r\n    return this.deathSprite;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the sprite of a player based on its current state (alive or dead).",
            "howItWorks": "Checks if the player is alive. If so, returns the sprite corresponding to the player's direction; otherwise, returns the death sprite.",
            "howToUse": "Call this method on an instance of Player to get the appropriate sprite for rendering.",
            "layer": "Logic",
            "postConditions": [
              "The returned sprite is either one of the player's directional sprites if the player is alive, or the death sprite otherwise."
            ],
            "preConditions": [
              "The Player instance must be properly initialized and have a valid direction set."
            ],
            "reason": "This method encapsulates the logic for determining which sprite to display based on the player's current state, which is part of the game's domain logic.",
            "returns": "A Sprite object representing the player's current sprite.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": null
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "resource",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The resource path."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
            "kind": "static method",
            "sourceText": "/**\r\n * Finds a subtype of Unit in a level.\r\n * This method is very useful for finding the ghosts in the parsed map.\r\n *\r\n * @param clazz\r\n * \t\tthe type to search for.\r\n * @param board\r\n * \t\tthe board to find the unit in.\r\n * @param <T>\r\n * \t\tthe return type, same as the type in clazz.\r\n * @return the first unit found of type clazz, or null.\r\n */\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnitInBoard(java.lang.Class<T> clazz, nl.tudelft.jpacman.board.Board board) {\r\n    for (int y = 0; y < board.getHeight(); y++) {\r\n        for (int x = 0; x < board.getWidth(); x++) {\r\n            final T ghost = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(clazz, board.squareAt(x, y));\r\n            if (ghost != null) {\r\n                return ghost;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
            "docComment": "Finds a subtype of Unit in a level.\r\n This method is very useful for finding the ghosts in the parsed map.\r\n\r\n@param clazz\r\n\t\tthe type to search for.\r\n@param board\r\n\t\tthe board to find the unit in.\r\n@param <T>\r\n\t\tthe return type, same as the type in clazz.\r\n@return the first unit found of type clazz, or null.\r\n",
            "metaSrc": "source code",
            "description": "Finds a unit of a specific type in the game board.",
            "howItWorks": "Iterates through each square on the board, checking if it contains a unit of the specified type using another helper method.",
            "howToUse": "Call this method with the desired unit class and the board instance. It will return the first matching unit or null if none found.",
            "layer": "Logic",
            "postConditions": [
              "Returns the first unit of the specified type found on the board or null if no such unit exists."
            ],
            "preConditions": [
              "The provided board is not null."
            ],
            "reason": "This method is used to locate a specific type of unit on the game board, which is part of the core logic for managing game entities.",
            "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
            "stereotype": "Collaborational",
            "stereotypeDescription": "This method collaborates with other methods to achieve a specific task, in this case, finding a unit on the board."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "traveller",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "The unit that will traverse the path."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The y-coordinate to check."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
            "kind": "static method",
            "sourceText": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
            "docComment": "Determines whether a square has an occupant of a certain type.\r\n\r\n@param type\r\n\t\tThe type to search for.\r\n@param square\r\n\t\tThe square to search.\r\n@param <T>\r\n\t\tthe type of unit we searched for.\r\n@return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n",
            "metaSrc": "source code",
            "description": "Finds a unit of a specific type in a given square on the game board.",
            "howItWorks": "The method iterates through all units occupying the given square and checks if any of them match the specified type. If a match is found, it returns that unit; otherwise, it returns null.",
            "howToUse": "Call this method with the desired unit class type and the square where you want to search for units.",
            "layer": "Logic",
            "postConditions": [
              "If a matching unit is found, it will be returned. Otherwise, null will be returned.",
              "No side effects on the game state or other units."
            ],
            "preConditions": [
              "The square must not be null."
            ],
            "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
            "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "scoreFormatter",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.square",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The square associated with this node.\r\n */\r\nprivate final nl.tudelft.jpacman.board.Square square;",
            "visibility": "private",
            "simpleName": "square",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.square",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Factory that provides Game objects.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "GameFactory",
            "qualifiedName": "nl.tudelft.jpacman.game.GameFactory",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "This class is responsible for creating single-player games in the Pacman implementation.",
            "howItWorks": "The method instantiates a new SinglePlayerGame using the provided Level and PointCalculator, along with a PacMan player created by calling PlayerFactory.createPacMan().",
            "howToUse": "Call this method with a Level object and a PointCalculator object to create a new single-player game.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The factory providing the player objects.",
                "name": "playerFactory",
                "type": "nl.tudelft.jpacman.level.PlayerFactory"
              }
            ],
            "postConditions": [
              {
                "condition": "A new single-player game instance is created."
              }
            ],
            "preConditions": [],
            "reason": "This method is responsible for setting up a single-player game environment, which involves creating a PacMan player and combining it with a level and point calculator to form a complete game instance.",
            "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
            "stereotype": "Creational",
            "keywords": [
              "GameFactory",
              "PacMan",
              "SinglePlayerGame"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghostSprite",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprites for every direction."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The y-coordinate of the top-left corner of the square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
            "kind": "method",
            "sourceText": "/**\r\n * Calculates the next move for this unit and returns the direction to move\r\n * in.\r\n * <p>\r\n * Precondition: The NPC occupies a square (hasSquare() holds).\r\n *\r\n * @return The direction to move in, or <code>null</code> if no move could\r\nbe devised.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction nextMove() {\r\n    return this.nextAiMove().orElseGet(this::randomMove);\r\n}",
            "docComment": "Calculates the next move for this unit and returns the direction to move\r\nin.\r\n<p>\r\nPrecondition: The NPC occupies a square (hasSquare() holds).\r\n\r\n@return The direction to move in, or <code>null</code> if no move could\r\nbe devised.\r\n",
            "metaSrc": "source code",
            "description": "Determines the next move for a ghost in the game.",
            "howItWorks": "The method first attempts to calculate a move using the nextAiMove() method. If no valid move is found, it returns a random move.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.npc.Ghost to get the next direction the ghost should move.",
            "layer": "Logic",
            "postConditions": [
              "Returns an Optional containing the next direction for the ghost or an empty Optional if no valid move is possible."
            ],
            "preConditions": [
              "The game state must be valid and the ghost must have available moves."
            ],
            "reason": "This method calculates the next AI move for a ghost based on its current state and available moves. It uses another method to determine the AI move and falls back to random movement if no valid move is found.",
            "returns": "An Optional<Direction> representing the next direction the ghost should move, or an empty Optional if no valid move is possible.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "handler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The collision handler that handles the collision between units of type collider and collidee."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getDirection()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
            "metaSrc": "source code",
            "description": "Returns the current direction of a ghost in the game.",
            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be one of the values from nl.tudelft.jpacman.board.Direction enum."
            ],
            "preConditions": [],
            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
            "returns": "A Direction object representing the current direction of the ghost.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "currentSprite()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The frame of the current index.\r\n */\r\nprivate nl.tudelft.jpacman.sprite.Sprite currentSprite() {\r\n    nl.tudelft.jpacman.sprite.Sprite result = nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP;\r\n    if (this.current < this.animationFrames.length) {\r\n        result = this.animationFrames[this.current];\r\n    }\r\n    assert result != null;\r\n    return result;\r\n}",
            "docComment": "\r\n@return The frame of the current index.\r\n",
            "metaSrc": "source code",
            "description": "Returns the current sprite in an animation sequence.",
            "howItWorks": "The method checks if the current frame index is within the bounds of the animation frames array. If so, it returns the corresponding sprite; otherwise, it returns END_OF_LOOP.",
            "howToUse": "Call this method on an instance of AnimatedSprite to get the current sprite in its animation.",
            "layer": "Logic",
            "postConditions": [
              "A non-null Sprite object is returned representing the current frame in the animation sequence."
            ],
            "preConditions": [
              "The instance has been properly initialized with an array of animation frames."
            ],
            "reason": "This method is responsible for retrieving the current sprite from an animated sprite sequence, ensuring it's not null before returning.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite - The current sprite in the animation sequence.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "isAnimating",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "Indicates whether the sprite is currently animating."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "directionSprite(java.lang.String,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
            "docComment": "Creates a map of direction sprites from a resource file. Each direction sprite is an animated sprite created by splitting the base image into multiple frames.",
            "metaSrc": "source code",
            "description": "Creates a map of direction sprites from a resource file.",
            "possibleLayers": [
              "Logic"
            ],
            "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getPlayerFactory()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.PlayerFactory getPlayerFactory() {\r\n    return new nl.tudelft.jpacman.level.PlayerFactory(this.getSpriteStore());\r\n}",
            "docComment": "\r\n@return A new factory using the sprites from {@link #getSpriteStore()}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the player factory used in the game.",
            "howItWorks": "The method creates a new PlayerFactory by passing the result of getSpriteStore() as a parameter. This ensures that all players created by the factory use the same sprite store, maintaining consistency in their visual representation.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.Launcher to get a PlayerFactory object.",
            "layer": "Logic",
            "postConditions": [
              "A PlayerFactory object is returned."
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating player objects, which are essential for gameplay. It encapsulates the logic for player creation and retrieval, ensuring that all players share the same sprite store.",
            "returns": "An instance of nl.tudelft.jpacman.level.PlayerFactory.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The base movement interval.\r\n */\r\nprivate static final int MOVE_INTERVAL = 200;",
            "visibility": "private",
            "simpleName": "MOVE_INTERVAL",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "caption",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).5",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "c",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).5",
            "kind": "parameter",
            "parameterPosition": 5,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "color",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The color of the ghost."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.start()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "start()",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.start()",
            "kind": "method",
            "sourceText": "/**\r\n * Starts the \"engine\", the thread that redraws the interface at set\r\n * intervals.\r\n */\r\npublic void start() {\r\n    this.setVisible(true);\r\n    java.util.concurrent.ScheduledExecutorService service = java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\r\n    service.scheduleAtFixedRate(this::nextFrame, 0, nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n}",
            "docComment": "Starts the \"engine\", the thread that redraws the interface at set\r\nintervals.\r\n",
            "metaSrc": "source code",
            "description": "Sets the PacManUI to be visible and schedules a task to update the frame at fixed intervals.",
            "howItWorks": "The method sets the UI to be visible and creates a scheduled executor service that runs the `nextFrame` method every `FRAME_INTERVAL` milliseconds.",
            "howToUse": "Call this method on an instance of PacManUI to start the game loop.",
            "layer": "UI",
            "postConditions": [
              "The PacManUI is set to be visible.",
              "A scheduled executor service is created and starts running the `nextFrame` method at fixed intervals."
            ],
            "preConditions": [],
            "reason": "This method initializes the user interface and sets up the game loop, which are core responsibilities of a UI component.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A wall is a square that is inaccessible to anyone.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Wall",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A Wall is a square in the Pacman game that represents an obstacle.",
            "howItWorks": "The constructor initializes a new Wall object and sets its background sprite using the provided Sprite object. It then calls the superclass constructor to ensure proper initialization.",
            "howToUse": "Create an instance of Wall by passing a Sprite object as an argument to its constructor.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The background for the square.",
                "name": "sprite",
                "type": "nl.tudelft.jpacman.sprite.Sprite"
              }
            ],
            "postConditions": [
              {
                "condition": "A new Wall object is created with the specified background sprite."
              }
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating a new wall object with a specified background sprite, which is part of the game's logic layer.",
            "returns": "A newly created instance of Wall.",
            "stereotype": "Creational",
            "keywords": [
              "Wall",
              "Square",
              "Pacman",
              "Obstacle"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextAiMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
            "kind": "method",
            "sourceText": "/**\r\n * Tries to calculate a move based on the behaviour of the npc.\r\n *\r\n * @return an optional containing the move or empty if the current state of the game\r\nmakes the ai move impossible\r\n */\r\npublic abstract java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove();",
            "docComment": "Tries to calculate a move based on the behaviour of the npc.\r\n\r\n@return an optional containing the move or empty if the current state of the game\r\nmakes the ai move impossible\r\n",
            "metaSrc": "source code",
            "description": "Determines the next AI move for a ghost in the game.",
            "howItWorks": "This method is abstract and must be implemented by subclasses to provide specific logic for determining the next direction a ghost should move based on its current position, the layout of the board, and other factors such as player proximity.",
            "howToUse": "Subclasses of Ghost should override this method to implement their own AI logic. The game engine will call this method at appropriate intervals to update the ghost's movement.",
            "layer": "Logic",
            "postConditions": [
              "The returned Optional<Direction> should be a valid direction (UP, DOWN, LEFT, RIGHT) if the ghost can move in that direction. If no move is possible, it should return an empty Optional."
            ],
            "preConditions": [
              "The game board and its layout must be initialized.",
              "The ghost's current position on the board must be known."
            ],
            "reason": "This method encapsulates the AI behavior of the ghosts, which is a crucial part of the game logic. It ensures that each ghost moves intelligently according to predefined rules or algorithms.",
            "returns": "An Optional<Direction> representing the next direction the ghost should move, or an empty Optional if no valid move is possible.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "map",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A map containing classes and their associated objects."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(int,nl.tudelft.jpacman.sprite.Sprite)",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new pellet.\r\n *\r\n * @param points\r\n * \t\tThe point value of this pellet.\r\n * @param sprite\r\n * \t\tThe sprite of this pellet.\r\n */\r\npublic Pellet(int points, nl.tudelft.jpacman.sprite.Sprite sprite) {\r\n    super();\r\n    this.image = sprite;\r\n    this.value = points;\r\n}",
            "docComment": "Creates a new pellet.\r\n\r\n@param points\r\n\t\tThe point value of this pellet.\r\n@param sprite\r\n\t\tThe sprite of this pellet.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Pellet class with specified points and sprite.",
            "howItWorks": "The constructor initializes the Pellet object by calling the superclass constructor, setting the image property to the provided sprite, and setting the value property to the provided points.",
            "howToUse": "Create a new Pellet object by passing the number of points and a sprite to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "A new Pellet object is created with the specified properties."
            ],
            "preConditions": [
              "points must be a non-negative integer",
              "sprite must not be null"
            ],
            "reason": "This method is responsible for creating a new pellet object with specific properties, which is part of the game logic.",
            "returns": "A new instance of the Pellet class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
            "kind": "method",
            "sourceText": "/**\r\n * Provide formatter for the score.\r\n *\r\n * @param scoreFormatter\r\n * \t\tThe score formatter to be used.\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel.ScoreFormatter scoreFormatter) {\r\n    this.scoreFormatter = scoreFormatter;\r\n    return this;\r\n}",
            "docComment": "Provide formatter for the score.\r\n\r\n@param scoreFormatter\r\n\t\tThe score formatter to be used.\r\n@return The builder.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The variation in intervals, this makes the ghosts look more dynamic and\r\n * less predictable.\r\n */\r\nprivate static final int INTERVAL_VARIATION = 50;",
            "visibility": "private",
            "simpleName": "INTERVAL_VARIATION",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The direction from which to retrieve the adjacent square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A key listener based on a set of keyCode-action pairs.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "PacKeyListener",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Handles user interface interactions by mapping key events to actions and executing them. It is responsible for handling user input in the Pacman game.",
            "howItWorks": "The method checks if there is an action mapped to the key code of the event. If so, it executes that action.",
            "howToUse": "Call this method with a KeyEvent object representing the key pressed by the user.",
            "layer": "UI",
            "parameters": [
              {
                "description": "The KeyEvent object representing the key pressed by the user.",
                "name": "keyEvent",
                "type": "java.awt.event.KeyEvent"
              }
            ],
            "postConditions": [
              {
                "condition": "The associated action will be executed if there is a mapping for the key code."
              }
            ],
            "preConditions": [
              {
                "condition": "There must be a valid KeyEvent object passed as an argument."
              }
            ],
            "reason": "This method is responsible for handling user input in the Pacman game, which falls under UI interactions.",
            "returns": "Void. Executes the action associated with the key event if it exists.",
            "stereotype": "Collaborational",
            "keywords": [
              "key event",
              "action",
              "user input"
            ],
            "roleStereotype": "Controller"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
            "kind": "method",
            "sourceText": "/**\r\n * Adds the collision interaction..\r\n *\r\n * @param collider\r\n * \t\tThe collider type.\r\n * @param collidee\r\n * \t\tThe collidee type.\r\n * @param handler\r\n * \t\tThe handler that handles the collision.\r\n */\r\nprivate void addHandler(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> collider, java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> collidee, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<? extends java.lang.Object, ? extends java.lang.Object> handler) {\r\n    if (!this.handlers.containsKey(collider)) {\r\n        this.handlers.put(collider, new java.util.HashMap<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<? extends java.lang.Object, ? extends java.lang.Object>>());\r\n    }\r\n    java.util.Map<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<? extends java.lang.Object, ? extends java.lang.Object>> map = this.handlers.get(collider);\r\n    map.put(collidee, handler);\r\n}",
            "docComment": "Adds the collision interaction..\r\n\r\n@param collider\r\n\t\tThe collider type.\r\n@param collidee\r\n\t\tThe collidee type.\r\n@param handler\r\n\t\tThe handler that handles the collision.\r\n",
            "metaSrc": "source code",
            "description": "Adds a collision handler to the CollisionInteractionMap.",
            "howItWorks": "The method first checks if there is already a map for the collider class. If not, it creates one. Then, it adds or updates the handler in the map for the collidee class.",
            "howToUse": "Call this method with the classes of the colliding units and a handler that implements the CollisionHandler interface.",
            "layer": "Logic",
            "postConditions": [
              "The handler is added to the map for the collider class, associated with the collidee class."
            ],
            "preConditions": [
              "collider and collidee must be subclasses of nl.tudelft.jpacman.board.Unit",
              "handler must implement nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler"
            ],
            "reason": "This method is responsible for managing collision interactions in the game. It allows different types of units to interact with each other by registering appropriate handlers.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.getSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSprite()",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet.getSprite()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.image;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.stop()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "stop()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.stop()",
            "kind": "method",
            "sourceText": "/**\r\n * Stops or pauses this level, no longer allowing any movement on the board\r\n * and stopping all NPCs.\r\n */\r\npublic void stop() {\r\n    synchronized(this.startStopLock) {\r\n        if (!this.isInProgress()) {\r\n            return;\r\n        }\r\n        this.stopNPCs();\r\n        this.inProgress = false;\r\n    }\r\n}",
            "docComment": "Stops or pauses this level, no longer allowing any movement on the board\r\nand stopping all NPCs.\r\n",
            "metaSrc": "source code",
            "description": "Stops the level by stopping all non-player characters (NPCs) and setting the inProgress flag to false.",
            "howItWorks": "The method uses a synchronized block to ensure thread safety. It checks if the level is in progress; if not, it returns immediately. If the level is in progress, it calls stopNPCs() to halt NPC movements and sets the inProgress flag to false.",
            "howToUse": "Call this method on an instance of the Level class to stop the level and all NPCs within it.",
            "layer": "Logic",
            "postConditions": [
              "All NPCs in the level will have their movement halted.",
              "The inProgress flag of the Level instance will be set to false."
            ],
            "preConditions": [
              "The Level instance must be created and initialized."
            ],
            "reason": "This method is part of the game logic, specifically handling the state transition when a level ends or is paused.",
            "returns": "Void. The method does not return any value.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader()",
            "kind": "constructor",
            "sourceText": "PointCalculatorLoader() {\r\n    super();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "scoreFormatter",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The ScoreFormatter to be set."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "sprite",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The sprite to be set as the background of the ground."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getWallSprite()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The sprite for the wall.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getWallSprite() {\r\n    return this.loadSprite(\"/sprite/wall.png\");\r\n}",
            "docComment": "\r\n@return The sprite for the wall.\r\n",
            "metaSrc": "source code",
            "description": "Loads a sprite representing a wall in Pacman.",
            "howItWorks": "The method calls another method `loadSprite` with a specific file path to retrieve the wall sprite.",
            "howToUse": "Call this method to get the sprite that represents walls in the Pacman game.",
            "layer": "Logic",
            "postConditions": [
              "Returns a valid Sprite object representing a wall."
            ],
            "preConditions": [],
            "reason": "This method is responsible for loading a specific sprite, which is part of the game's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.getValue()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getValue()",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet.getValue()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the point value of this pellet.\r\n *\r\n * @return The point value of this pellet.\r\n */\r\npublic int getValue() {\r\n    return this.value;\r\n}",
            "docComment": "Returns the point value of this pellet.\r\n\r\n@return The point value of this pellet.\r\n",
            "metaSrc": "source code",
            "description": "Returns the value of a pellet in the game.",
            "howItWorks": "The method simply returns the integer value stored in the 'value' field of the Pellet object.",
            "howToUse": "Call getValue() on an instance of Pellet to retrieve its value.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is the same as the 'value' field of the Pellet object."
            ],
            "preConditions": [],
            "reason": "This method provides access to the internal state of a pellet, which is part of the game logic.",
            "returns": "An integer representing the value of the pellet.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
            "kind": "static method",
            "sourceText": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
            "docComment": "Calculates the shortest path. This is done by BFS. This search ensures\r\nthe traveller is allowed to occupy the squares on the way, or returns the\r\nshortest path to the square regardless of terrain if no traveller is\r\nspecified.\r\n\r\n@param from\r\n\t\tThe starting square.\r\n@param to\r\n\t\tThe destination.\r\n@param traveller\r\n\t\tThe traveller attempting to reach the destination. If\r\n\t\ttraveller is set to <code>null</code>, this method will ignore\r\n\t\tterrain and find the shortest path whether it can actually be\r\n\t\treached or not.\r\n@return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n",
            "metaSrc": "source code",
            "description": "Calculates the shortest path from one square to another on a board for a given unit.",
            "howItWorks": "The method uses a breadth-first search algorithm to find the shortest path from the start square to the end square, considering the movement capabilities of the given unit.",
            "howToUse": "Call this method with the starting square, destination square, and the unit that will traverse the path. It returns a list of directions to follow.",
            "layer": "Logic",
            "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
            "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "square",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The x-coordinate of the top-left corner of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Exception that is thrown when JPacman cannot be properly loaded\r\nfrom its resources.\r\n\r\n@author Arie van Deursen, 2014\r\n",
            "simpleName": "PacmanConfigurationException",
            "qualifiedName": "nl.tudelft.jpacman.PacmanConfigurationException",
            "kind": "class",
            "metaSrc": "source code",
            "description": "A configuration exception for Pacman, providing direct or detailed error messages.",
            "howItWorks": "The constructor initializes the exception with a message and an optional cause. The message provides a clear description of the error, while the cause can be used to trace back to the original issue.",
            "howToUse": "Create an instance of this class when a configuration error occurs, passing in an appropriate message and optionally a root cause.",
            "layer": "Application Layer",
            "parameters": [
              {
                "description": "The exception message.",
                "name": "message",
                "type": "java.lang.String"
              },
              {
                "description": "The root cause of the exception.",
                "name": "cause",
                "type": "java.lang.Throwable"
              }
            ],
            "postConditions": [
              "An instance of PacmanConfigurationException is created with the provided message and cause."
            ],
            "preConditions": [
              "A configuration error has occurred."
            ],
            "reason": "This class is used to handle exceptions related to Pacman configuration issues.",
            "returns": "void",
            "stereotype": "Creational",
            "keywords": [
              "Pacman",
              "configuration",
              "exception"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getWidth()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The amount of frames in the pacman dying animation.\r\n */\r\nprivate static final int PACMAN_DEATH_FRAMES = 11;",
            "visibility": "private",
            "simpleName": "PACMAN_DEATH_FRAMES",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "buttons",
            "qualifiedName": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A map where keys are button captions and values are actions to be performed when the buttons are clicked."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.sprites",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite store containing the Pac-Man sprites.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.PacManSprites sprites;",
            "visibility": "private",
            "simpleName": "sprites",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory.sprites",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The Pacman player that moved."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player that will die."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "direction",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createClyde()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new Clyde / Pokey, the orange Ghost.\r\n *\r\n * @see Clyde\r\n * @return A new Clyde.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createClyde() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Clyde(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE));\r\n}",
            "docComment": "Creates a new Clyde / Pokey, the orange Ghost.\r\n\r\n@see Clyde\r\n@return A new Clyde.\r\n",
            "metaSrc": "source code",
            "description": "Creates a new Clyde ghost object.",
            "howItWorks": "The method retrieves the sprite for the orange-colored ghost and uses it to create a new Clyde object.",
            "howToUse": "Call this method to obtain a new Clyde ghost object.",
            "layer": "Logic",
            "postConditions": [
              "A new Clyde ghost object is created and returned."
            ],
            "preConditions": [],
            "reason": "This method is responsible for creating an instance of the Clyde ghost, which is part of the game logic.",
            "returns": "nl.tudelft.jpacman.npc.Ghost",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A game with one player and a single level.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "SinglePlayerGame",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "This class initializes a new single-player game with a player, level, and point calculator.",
            "howItWorks": "The constructor initializes the base Game class with the provided point calculator, asserts that the player and level are not null, assigns the player and level to instance variables, and registers the player in the level.",
            "howToUse": "Create an instance of SinglePlayerGame by passing a Player, Level, and PointCalculator to its constructor.",
            "layer": "Logic",
            "parameters": [
              {
                "name": "player",
                "type": "nl.tudelft.jpacman.level.Player"
              },
              {
                "name": "level",
                "type": "nl.tudelft.jpacman.level.Level"
              },
              {
                "name": "pointCalculator",
                "type": "nl.tudelft.jpacman.points.PointCalculator"
              }
            ],
            "postConditions": [
              "The SinglePlayerGame instance is initialized with the provided player, level, and point calculator."
            ],
            "preConditions": [
              "player is not null",
              "level is not null"
            ],
            "reason": "This method initializes a single-player game by setting up the necessary components and registering the player in the level.",
            "returns": "A new instance of SinglePlayerGame with the provided player, level, and point calculator.",
            "stereotype": "Creational",
            "keywords": [
              "SinglePlayerGame",
              "Game",
              "Pacman"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A map of directions to sprites."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.defaultButtons",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * <code>true</code> iff this UI has the default buttons.\r\n */\r\nprivate boolean defaultButtons;",
            "visibility": "private",
            "simpleName": "defaultButtons",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.defaultButtons",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "parseMap(java.io.InputStream)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
            "kind": "method",
            "sourceText": "/**\r\n * Parses the provided input stream as a character stream and passes it\r\n * result to {@link #parseMap(List)}.\r\n *\r\n * @param source\r\n * \t\tThe input stream that will be read.\r\n * @return The parsed level as represented by the text on the input stream.\r\n * @throws IOException\r\n * \t\twhen the source could not be read.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(java.io.InputStream source) throws java.io.IOException {\r\n    try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(source, \"UTF-8\"))) {\r\n        java.util.List<java.lang.String> lines = new java.util.ArrayList<java.lang.String>();\r\n        while (reader.ready()) {\r\n            lines.add(reader.readLine());\r\n        } \r\n        return this.parseMap(lines);\r\n    }\r\n}",
            "docComment": "Parses the provided input stream as a character stream and passes it\r\nresult to {@link #parseMap(List)}.\r\n\r\n@param source\r\n\t\tThe input stream that will be read.\r\n@return The parsed level as represented by the text on the input stream.\r\n@throws IOException\r\n\t\twhen the source could not be read.\r\n",
            "metaSrc": "source code",
            "description": "Parses a list of strings representing the text format of a Pacman level into a game level object.",
            "howItWorks": "The method reads lines from the input stream, stores them in a list, and then passes this list to another parseMap method for further processing.",
            "howToUse": "Call this method with an InputStream containing the map data to get a Level object representing the game level.",
            "layer": "Logic",
            "postConditions": [
              "A Level object is returned representing the game level as parsed from the input stream."
            ],
            "preConditions": [
              "The input stream must be properly formatted with each line representing a row of squares on the board."
            ],
            "reason": "This method is responsible for converting textual representations of a Pacman level into an in-game level object, which falls under application and domain logic.",
            "returns": "nl.tudelft.jpacman.level.Level",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "setKiller(nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Sets the cause of death.\r\n *\r\n * @param killer\r\n * \t\tis set if collision with ghost happens.\r\n */\r\npublic void setKiller(nl.tudelft.jpacman.board.Unit killer) {\r\n    this.killer = killer;\r\n}",
            "docComment": "Sets the cause of death.\r\n\r\n@param killer\r\n\t\tis set if collision with ghost happens.\r\n",
            "metaSrc": "source code",
            "description": "Sets the killer for the player.",
            "howItWorks": "The method assigns the provided Unit object as the killer to the current Player instance.",
            "howToUse": "Call setKiller with a Unit object representing the entity that can kill the player.",
            "layer": "Logic",
            "postConditions": [
              "The killer property of the Player instance is set to the provided Unit object."
            ],
            "preConditions": [],
            "reason": "This method is necessary for managing the game logic related to player deaths and interactions with other entities.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new, empty collision map.\r\n */\r\npublic CollisionInteractionMap() {\r\n    super();\r\n    this.handlers = new java.util.HashMap<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, java.util.Map<java.lang.Class<? extends nl.tudelft.jpacman.board.Unit>, nl.tudelft.jpacman.level.CollisionInteractionMap.CollisionHandler<? extends java.lang.Object, ? extends java.lang.Object>>>();\r\n}",
            "docComment": "Creates a new, empty collision map.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createInky()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new Inky / Bashful, the cyan Ghost.\r\n *\r\n * @see Inky\r\n * @return A new Inky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createInky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Inky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN));\r\n}",
            "docComment": "Creates a new Inky / Bashful, the cyan Ghost.\r\n\r\n@see Inky\r\n@return A new Inky.\r\n",
            "metaSrc": "source code",
            "description": "Creates an instance of the Inky ghost using a sprite from the GhostFactory.",
            "howItWorks": "The method retrieves a sprite for the cyan color using the getGhostSprite method and then creates a new Inky ghost with that sprite.",
            "howToUse": "Call createInky() on an instance of GhostFactory to obtain a new Inky ghost object.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of the Inky ghost is created with a sprite corresponding to the cyan color."
            ],
            "preConditions": [
              "The GhostFactory has been instantiated and is ready to create ghosts."
            ],
            "reason": "This method is necessary for initializing the game by creating an Inky ghost, which is part of the game's logic.",
            "returns": "A new instance of the Inky ghost.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The player whose score needs to be formatted."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getBoardFactory()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A new board factory using the sprite store from\r\n{@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.board.BoardFactory getBoardFactory() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory(this.getSpriteStore());\r\n}",
            "docComment": "\r\n@return A new board factory using the sprite store from\r\n{@link #getSpriteStore()}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the board factory used in the game.",
            "howItWorks": "The method creates a new BoardFactory by passing the sprite store obtained from `this.getSpriteStore()` to its constructor.",
            "howToUse": "Call this method from an instance of Launcher to obtain a BoardFactory object.",
            "layer": "Logic",
            "postConditions": [
              "A valid BoardFactory instance is returned."
            ],
            "preConditions": [
              "The Launcher instance must be properly initialized."
            ],
            "reason": "This method is responsible for creating a board factory, which is essential for setting up the game's board. It depends on the sprite store to provide necessary visual elements.",
            "returns": "An instance of nl.tudelft.jpacman.board.BoardFactory.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "sprite",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The sprite representing the pellet."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "mover",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The unit that is moving and colliding with another unit."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An enumeration of possible directions on a two-dimensional square grid.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Direction",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction",
            "kind": "enum",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Represents the possible directions in which a character can move on a game board.",
            "howItWorks": "The enum contains constants for each direction with associated deltaX and deltaY values. The methods getDeltaX(), getDeltaY(), and opposite() utilize these values to provide the required functionality.",
            "howToUse": "Create an instance of Direction using the predefined constants (NORTH, SOUTH, EAST, WEST). Use getDeltaX() and getDeltaY() to retrieve the horizontal and vertical movement deltas respectively. Call opposite() to get the direction that is opposite to the current direction.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The horizontal movement delta for the direction.",
                "name": "deltaX",
                "type": "int"
              },
              {
                "description": "The vertical movement delta for the direction.",
                "name": "deltaY",
                "type": "int"
              }
            ],
            "postConditions": [
              "getDeltaX() returns the horizontal movement delta for the direction.",
              "getDeltaY() returns the vertical movement delta for the direction.",
              "opposite() returns the direction that is opposite to the current direction."
            ],
            "preConditions": [
              "deltaX and deltaY must be integers representing valid movement deltas."
            ],
            "reason": "This enum represents different directions in a Pacman game, providing constants with associated movement deltas to facilitate movement logic.",
            "returns": "nl.tudelft.jpacman.board.Direction - The newly created Direction instance.",
            "stereotype": "Enum",
            "keywords": [
              "Direction",
              "Pacman",
              "Game Logic"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code",
            "description": "The height of the target sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "loadSprite(java.lang.String)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
            "kind": "method",
            "sourceText": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
            "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
            "metaSrc": "source code",
            "description": "Loads a sprite from a resource file if it's not already in the cache.",
            "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
            "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
            "layer": "Logic",
            "postConditions": [
              "A Sprite object will be returned representing the loaded sprite."
            ],
            "preConditions": [
              "The resource parameter must be a valid path to a sprite file."
            ],
            "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Caption for the default start button.\r\n */\r\nprivate static final java.lang.String START_CAPTION = \"Start\";",
            "visibility": "private",
            "simpleName": "START_CAPTION",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.pointCalculator",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The algorithm used to calculate the points that\r\n * they player gets whenever some action happens.\r\n */\r\nprivate nl.tudelft.jpacman.points.PointCalculator pointCalculator;",
            "visibility": "private",
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.pointCalculator",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "targets",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "A list of nodes representing potential targets for the ghost."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGame()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getGame()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getGame()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The game object this launcher will start when {@link #launch()}\r\nis called.\r\n */\r\npublic nl.tudelft.jpacman.game.Game getGame() {\r\n    return this.game;\r\n}",
            "docComment": "\r\n@return The game object this launcher will start when {@link #launch()}\r\nis called.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the current game instance.",
            "howItWorks": "The method returns the private field 'game' of the Launcher class.",
            "howToUse": "Call getGame() on an instance of Launcher to retrieve the current game object.",
            "layer": "Logic",
            "postConditions": [
              "The returned game instance is not null."
            ],
            "preConditions": [
              "The Launcher instance must have been properly initialized with a game instance."
            ],
            "reason": "This method provides access to the current game state without modifying it, which fits the accessor stereotype and belongs in the logic layer.",
            "returns": "A nl.tudelft.jpacman.game.Game object representing the current game.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The base movement interval.\r\n */\r\nprivate static final int MOVE_INTERVAL = 250;",
            "visibility": "private",
            "simpleName": "MOVE_INTERVAL",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.WEST",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * West, or left.\r\n */\r\nWEST(-1, 0)",
            "visibility": "public",
            "simpleName": "WEST",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.WEST",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.Sprite)",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new ground square.\r\n *\r\n * @param sprite\r\n * \t\tThe background for the square.\r\n */\r\nGround(nl.tudelft.jpacman.sprite.Sprite sprite) {\r\n    super();\r\n    this.background = sprite;\r\n}",
            "docComment": "Creates a new ground square.\r\n\r\n@param sprite\r\n\t\tThe background for the square.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new Ground object with a background sprite in the Pacman game.",
            "howItWorks": "The method calls the superclass constructor to initialize the base properties, then sets the provided sprite as the background of the ground.",
            "howToUse": "Create an instance of Ground by passing a Sprite object as the parameter.",
            "layer": "Logic",
            "postConditions": [
              "The newly created Ground instance will have its background set to the provided sprite."
            ],
            "preConditions": [
              "A valid Sprite object must be passed as the parameter."
            ],
            "reason": "This method is responsible for setting up a new ground object in the game, which is part of the application logic layer. It initializes the ground's background sprite and ensures that it can be used within the game environment.",
            "returns": "A newly created instance of Ground with the specified background sprite.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The collidee."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(java.util.Map)",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new random ghost.\r\n *\r\n * @param ghostSprite\r\n * \t\tThe sprite for the ghost.\r\n */\r\nRandomGhost(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> ghostSprite) {\r\n    super(ghostSprite, ((int) (nl.tudelft.jpacman.level.LevelFactory.RandomGhost.DELAY)), 0);\r\n}",
            "docComment": "Creates a new random ghost.\r\n\r\n@param ghostSprite\r\n\t\tThe sprite for the ghost.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the RandomGhost class with sprite map.",
            "howItWorks": "The constructor sets up the ghost's sprite, move interval, and interval variation based on the provided parameters.",
            "howToUse": "Create an instance of RandomGhost by passing a map of directions to sprites.",
            "layer": "Logic",
            "postConditions": [
              "A new instance of RandomGhost is created with the specified properties."
            ],
            "preConditions": [
              "A valid map of directions to sprites must be provided."
            ],
            "reason": "This method initializes a new ghost with specific sprite mappings and movement properties.",
            "returns": "A new instance of the RandomGhost class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "<init>()",
            "qualifiedName": "nl.tudelft.jpacman.board.Square()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new, empty square.\r\n */\r\nprotected Square() {\r\n    super();\r\n    this.occupants = new java.util.ArrayList<nl.tudelft.jpacman.board.Unit>();\r\n    this.neighbours = new java.util.EnumMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.board.Square>(nl.tudelft.jpacman.board.Direction.class);\r\n    assert this.invariant();\r\n}",
            "docComment": "Creates a new, empty square.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new Square object in the Pacman game.",
            "howItWorks": "The constructor initializes the super class, sets up an ArrayList for occupants, and an EnumMap for neighbors. It also asserts that the invariant holds after initialization.",
            "howToUse": "Call this method to create a new Square object without any parameters.",
            "layer": "Logic",
            "postConditions": [
              "The newly created Square has an empty list of occupants.",
              "The newly created Square has a map of neighbors initialized with all Directions set to null."
            ],
            "preConditions": [],
            "reason": "This method is responsible for setting up the initial state of a square on the board, including initializing its occupants and neighbors.",
            "returns": "A newly created instance of Square.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A ground square is a square that is accessible to anyone.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Ground",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "This class is responsible for creating and managing ground squares in the Pacman game.",
            "howItWorks": "The method calls the superclass constructor to initialize the base properties, then sets the provided sprite as the background of the ground.",
            "howToUse": "Create an instance of Ground by passing a Sprite object as the parameter.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The background for the square.",
                "type": "nl.tudelft.jpacman.sprite.Sprite"
              }
            ],
            "postConditions": [
              {
                "condition": "The newly created instance of Ground has the specified background sprite."
              }
            ],
            "preConditions": [],
            "reason": "This method is responsible for setting up a new ground object in the game, which is part of the application logic layer. It initializes the ground's background sprite and ensures that it can be used within the game environment.",
            "returns": "A newly created instance of Ground with the specified background sprite.",
            "stereotype": "Creational",
            "keywords": [
              "Pacman",
              "Game",
              "Ground",
              "Square"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "action",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel",
          "labels": [
            "Container",
            "Structure"
          ],
          "properties": {
            "docComment": "A panel consisting of a column for each player, with the numbered players on\r\ntop and their respective scores underneath.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "ScorePanel",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A ScorePanel class in a Pacman game implementation, responsible for displaying player scores on the user interface.",
            "howItWorks": "The constructor iterates through the list of players, creates a JLabel for each player's score, and adds it to the ScorePanel.",
            "howToUse": "Call this method when you need to create a ScorePanel for displaying scores of multiple players.",
            "layer": "UI",
            "parameters": [
              {
                "description": "The players to display the scores of.",
                "name": "players",
                "type": "java.util.List"
              }
            ],
            "postConditions": [
              {
                "condition": "Score labels are created for each player in the list.",
                "description": "Each player's score label is initialized and added to the ScorePanel."
              }
            ],
            "preConditions": [
              {
                "condition": "players is not null",
                "description": "The list of players must be provided."
              }
            ],
            "reason": "This method initializes a new ScorePanel with score labels for each player.",
            "returns": "Void",
            "stereotype": "Creational",
            "keywords": [
              "ScorePanel",
              "Pacman",
              "UI",
              "ScoreFormatter",
              "Player"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.deltaX",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The delta x (width difference) to an element in the direction in a grid\r\n * with 0,0 (x,y) as its top-left element.\r\n */\r\nprivate final int deltaX;",
            "visibility": "private",
            "simpleName": "deltaX",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.deltaX",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The type of unit that collides with another unit."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An symmetrical copy of a collision hander.\r\n\r\n@author Michael de Jong\r\n@param <C1>\r\n\t\tThe collider type.\r\n@param <C2>\r\n\t\tThe collidee type.\r\n",
            "simpleName": "InverseCollisionHandler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method simply reverses the roles of the collider and collidee by calling the handleCollision method on the handler object with the parameters swapped.",
            "howToUse": "Call this method with two units that are colliding in the game.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The symmetric handler for this collision.",
                "name": "handler",
                "type": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler<C2, C1>"
              }
            ],
            "postConditions": [
              "The collision is handled by swapping the roles of the collider and collidee."
            ],
            "preConditions": [
              "Two units are colliding in the game."
            ],
            "reason": "This method is part of the game logic, specifically handling interactions between game entities without involving user interface or data access.",
            "returns": "Void.",
            "stereotype": "Collaborational",
            "keywords": [
              "collision",
              "handler",
              "unit"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Implementation of an NPC that wanders around randomly.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "RandomGhost",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "The RandomGhost class is a subclass of Ghost that initializes a new instance with sprite map and movement properties.",
            "howItWorks": "The constructor sets up the ghost's sprite, move interval, and interval variation based on the provided parameters.",
            "howToUse": "Create an instance of RandomGhost by passing a map of directions to sprites.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The sprite for the ghost.",
                "name": "ghostSprite",
                "type": "java.util.Map"
              }
            ],
            "postConditions": [
              {
                "condition": "A new instance of RandomGhost is created with the specified sprite and movement properties.",
                "description": "The ghost's initial state is set up correctly."
              }
            ],
            "preConditions": [
              {
                "condition": "ghostSprite is not null",
                "description": "The sprite map must be provided."
              }
            ],
            "reason": "This method initializes a new ghost with specific sprite mappings and movement properties.",
            "returns": "A new instance of the RandomGhost class.",
            "stereotype": "Creational",
            "keywords": [
              "ghost",
              "random",
              "movement"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "newDirection",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The new direction to set for the unit."
          }
        }
      },
      {
        "data": {
          "id": "java.lang.String",
          "labels": [
            "Structure"
          ],
          "properties": {
            "simpleName": "String",
            "qualifiedName": "java.lang.String",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The y-coordinate of the position."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An extensible default interaction map for collisions caused by the player.\r\n\r\nThe implementation makes use of the interactionmap, and as such can be easily\r\nand declaratively extended when new types of units (ghosts, players, ...) are\r\nadded.\r\n\r\n@author Arie van Deursen\r\n@author Jeroen Roosen\r\n",
            "simpleName": "DefaultPlayerInteractionMap",
            "qualifiedName": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Handles collisions between Player, Ghost, and Pellet in the game.",
            "howItWorks": "The method delegates the collision handling to another object (`this.collisions`) and passes the two colliding units as parameters.",
            "howToUse": "Call this method with two Unit objects representing entities in the game board that have collided.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The first unit involved in the collision.",
                "name": "unit1",
                "type": "nl.tudelft.jpacman.board.Unit"
              },
              {
                "description": "The second unit involved in the collision.",
                "name": "unit2",
                "type": "nl.tudelft.jpacman.board.Unit"
              }
            ],
            "reason": "This method is part of the game logic, handling interactions between units without involving user interface or data access.",
            "returns": "void",
            "stereotype": "Collaborational",
            "keywords": [
              "collision",
              "player",
              "ghost",
              "pellet"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "keyPressed(java.awt.event.KeyEvent)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void keyPressed(java.awt.event.KeyEvent event) {\r\n    assert event != null;\r\n    nl.tudelft.jpacman.ui.Action action = this.mappings.get(event.getKeyCode());\r\n    if (action != null) {\r\n        action.doAction();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles user interface interactions by mapping key events to actions and executing them.",
            "howItWorks": "The method checks if there is an action mapped to the key code of the event. If so, it executes that action.",
            "howToUse": "Call this method with a KeyEvent object representing the key pressed by the user.",
            "layer": "UI",
            "postConditions": [
              "If a corresponding action exists, it will be executed."
            ],
            "preConditions": [
              "The event parameter must not be null."
            ],
            "reason": "This method is responsible for handling user input in the Pacman game, which falls under UI interactions.",
            "returns": "Void. Executes the action associated with the key event if it exists.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "The responsibility of this loader is to obtain the appropriate points calculator.\r\nBy default the {@link DefaultPointCalculator} is returned.\r\n",
            "simpleName": "PointCalculatorLoader",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "The PointCalculatorLoader class is responsible for dynamically loading point calculator instances based on configuration.",
            "howItWorks": "Loads properties from 'scorecalc.properties' and returns the value associated with 'scorecalculator.name'.",
            "howToUse": "Call this method to get the class name of the point calculator used in the game.",
            "layer": "Logic",
            "parameters": [],
            "postConditions": [
              "The method should return a valid class name as specified in the 'scorecalc.properties' file."
            ],
            "preConditions": [],
            "reason": "This method is used to dynamically load the point calculator based on configuration, which is part of the application logic.",
            "returns": "A string representing the fully qualified name of the point calculator class.",
            "stereotype": "Accessor",
            "keywords": [
              "PointCalculator",
              "Dynamic Loading",
              "Configuration"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.deltaY",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The delta y (height difference) to an element in the direction in a grid\r\n * with 0,0 (x,y) as its top-left element.\r\n */\r\nprivate final int deltaY;",
            "visibility": "private",
            "simpleName": "deltaY",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.deltaY",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "run()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void run() {\r\n    nl.tudelft.jpacman.board.Direction nextMove = this.npc.nextMove();\r\n    if (nextMove != null) {\r\n        this.move(this.npc, nextMove);\r\n    }\r\n    long interval = this.npc.getInterval();\r\n    this.service.schedule(this, interval, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a non-player character (NPC) in the game according to its next move and schedules itself to run again after a specified interval.",
            "howItWorks": "The method first determines the next move for the NPC. If a valid move is found, it moves the NPC in that direction and schedules itself to run again after a specified interval using the game service.",
            "howToUse": "Call this method on an instance of `Level$NpcMoveTask` with the appropriate parameters.",
            "layer": "Logic",
            "postConditions": [
              "The NPC's position has been updated if a valid move was found."
            ],
            "preConditions": [
              "The NPC must be on a square (hasSquare() holds)."
            ],
            "reason": "This method is responsible for updating the position of an NPC in the game and scheduling itself to run again after a certain interval.",
            "returns": "void",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "occupy(nl.tudelft.jpacman.board.Square)",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
            "kind": "method",
            "sourceText": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
            "docComment": "Occupies the target square iff this unit is allowed to as decided by\r\n{@link Square#isAccessibleTo(Unit)}.\r\n\r\n@param target\r\n\t\tThe square to occupy.\r\n",
            "metaSrc": "source code",
            "description": "Moves the unit to a new square.",
            "howItWorks": "The method first asserts that the target square is not null. It then checks if the unit is currently on a square; if so, it removes itself from that square. The unit then moves to the target square and adds itself to it. Finally, it asserts that the invariant holds true.",
            "howToUse": "Call this method with a reference to the new square where you want the unit to move.",
            "layer": "Logic",
            "postConditions": [
              "The unit is now on the target square.",
              "The unit has been removed from its previous square (if it was on one)."
            ],
            "preConditions": [
              "The target square must not be null."
            ],
            "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
            "returns": "Void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getInterval()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
            "kind": "method",
            "sourceText": "/**\r\n * The time that should be taken between moves.\r\n *\r\n * @return The suggested delay between moves in milliseconds.\r\n */\r\npublic long getInterval() {\r\n    return this.moveInterval + new java.util.Random().nextInt(this.intervalVariation);\r\n}",
            "docComment": "The time that should be taken between moves.\r\n\r\n@return The suggested delay between moves in milliseconds.\r\n",
            "metaSrc": "source code",
            "description": "Calculates the interval for ghost movement in Pacman.",
            "howItWorks": "Adds a random variation to a fixed move interval.",
            "howToUse": "Call this method to get the adjusted movement interval for ghosts.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is greater than or equal to moveInterval.",
              "The returned value is less than moveInterval + intervalVariation."
            ],
            "preConditions": [],
            "reason": "This method adjusts the movement speed of ghosts by adding a random variation, which is part of the game logic.",
            "returns": "A long representing the adjusted movement interval for ghosts.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.board",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The board of this level.\r\n */\r\nprivate final nl.tudelft.jpacman.board.Board board;",
            "visibility": "private",
            "simpleName": "board",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.board",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.value",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The point value of this pellet.\r\n */\r\nprivate final int value;",
            "visibility": "private",
            "simpleName": "value",
            "qualifiedName": "nl.tudelft.jpacman.level.Pellet.value",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.getHeight()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getHeight()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.getHeight()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic int getHeight() {\r\n    return 0;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.pacManUI",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private nl.tudelft.jpacman.ui.PacManUI pacManUI;",
            "visibility": "private",
            "simpleName": "pacManUI",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.pacManUI",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The x-coordinate of the position."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "loop",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code",
            "description": "Whether or not this sprite should be looping."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "builder",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The builder used to add key mappings."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "private nl.tudelft.jpacman.ui.Action moveTowardsDirection(nl.tudelft.jpacman.board.Direction direction) {\r\n    return () -> {\r\n        assert this.game != null;\r\n        this.getGame().move(this.getSinglePlayer(this.getGame()), direction);\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a Pacman player in a given direction if the game is in progress.",
            "howItWorks": "The method asserts that the game is not null and then calls the move method of the game object, passing the single player and the given direction.",
            "howToUse": "Call this method with a Direction enum value to move the player in that direction.",
            "layer": "Logic",
            "postConditions": [
              "The player should have moved in the specified direction if possible."
            ],
            "preConditions": [
              "The game must be initialized and not null."
            ],
            "reason": "This method is part of the game logic layer, as it involves moving a player in the game based on user input or other events.",
            "returns": "A nl.tudelft.jpacman.ui.Action object representing an action that moves the player.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "square",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code",
            "description": "The square being examined for potential targets."
          }
        }
      },
      {
        "data": {
          "id": "nl",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "nl",
            "qualifiedName": "nl",
            "kind": "package",
            "metaSrc": "source code",
            "description": "The jpacman project is a Pacman implementation in Java. It includes packages for sprite management, game logic, board handling, point calculation, level management, non-player character behavior, and UI components.",
            "keywords": [
              "Pacman",
              "Java",
              "sprite management",
              "game logic",
              "board handling",
              "point calculation",
              "level management",
              "non-player character behavior",
              "UI components"
            ],
            "layer": "Application Layer",
            "title": "nl.tudelft"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.scoreFormatter",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The way to format the score information.\r\n */\r\nprivate nl.tudelft.jpacman.ui.ScorePanel.ScoreFormatter scoreFormatter = nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER;",
            "visibility": "private",
            "simpleName": "scoreFormatter",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.scoreFormatter",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "randomMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
            "kind": "method",
            "sourceText": "/**\r\n * Determines a possible move in a random direction.\r\n *\r\n * @return A direction in which the ghost can move, or <code>null</code> if\r\nthe ghost is shut in by inaccessible squares.\r\n */\r\nprotected nl.tudelft.jpacman.board.Direction randomMove() {\r\n    nl.tudelft.jpacman.board.Square square = this.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> directions = new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        if (square.getSquareAt(direction).isAccessibleTo(this)) {\r\n            directions.add(direction);\r\n        }\r\n    }\r\n    if (directions.isEmpty()) {\r\n        return null;\r\n    }\r\n    int i = new java.util.Random().nextInt(directions.size());\r\n    return directions.get(i);\r\n}",
            "docComment": "Determines a possible move in a random direction.\r\n\r\n@return A direction in which the ghost can move, or <code>null</code> if\r\nthe ghost is shut in by inaccessible squares.\r\n",
            "metaSrc": "source code",
            "description": "Generates a random move for a ghost in the Pacman game.",
            "howItWorks": "The method retrieves the current square of the ghost, then iterates through all possible directions to find accessible squares. If no accessible squares are found, it returns null. Otherwise, it selects a random accessible direction and returns it.",
            "howToUse": "Call this method on an instance of a Ghost class to get its next move direction.",
            "layer": "Logic",
            "postConditions": [
              "A valid Direction is returned if there are accessible directions; otherwise, null is returned."
            ],
            "preConditions": [
              "The Ghost instance must be associated with a valid Square."
            ],
            "reason": "This method is responsible for determining the next move of a ghost in the game. It checks all possible directions and selects one at random if available.",
            "returns": "nl.tudelft.jpacman.board.Direction - The randomly selected direction for the ghost to move.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.current",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The index of the current frame.\r\n */\r\nprivate int current;",
            "visibility": "private",
            "simpleName": "current",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.current",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A table containing all (relevant) collisions between different types of\r\nunits.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "CollisionMap",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionMap",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method takes two unit objects as parameters and processes their interaction based on the game's rules. It may change the state of either or both units, such as moving them, changing their properties, or triggering other events.",
            "howToUse": "Call this method whenever two units need to interact within the game environment.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The unit that causes the collision by occupying a square with another unit already on it.",
                "name": "collider",
                "type": "nl.tudelft.jpacman.board.Unit"
              },
              {
                "description": "The unit that is already on the square that is being invaded.",
                "name": "collidee",
                "type": "nl.tudelft.jpacman.board.Unit"
              }
            ],
            "postConditions": [],
            "preConditions": [],
            "reason": "This method is responsible for managing the interactions between different units in the game, which falls under the logic layer as it involves application and domain rules.",
            "returns": "Void.",
            "stereotype": "Collaborational",
            "keywords": [
              "collision",
              "unit",
              "game"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collider",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The collider."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.serialVersionUID",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Default serialisation ID.\r\n */\r\nprivate static final long serialVersionUID = 1L;",
            "visibility": "private",
            "simpleName": "serialVersionUID",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.serialVersionUID",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.BACKGROUND_COLOR",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The background colour of the board.\r\n */\r\nprivate static final java.awt.Color BACKGROUND_COLOR = java.awt.Color.BLACK;",
            "visibility": "private",
            "simpleName": "BACKGROUND_COLOR",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.BACKGROUND_COLOR",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(nl.tudelft.jpacman.game.Game)",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new board panel that will display the provided game.\r\n *\r\n * @param game\r\n * \t\tThe game to display.\r\n */\r\nBoardPanel(nl.tudelft.jpacman.game.Game game) {\r\n    super();\r\n    assert game != null;\r\n    this.game = game;\r\n    nl.tudelft.jpacman.board.Board board = game.getLevel().getBoard();\r\n    int w = board.getWidth() * nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE;\r\n    int h = board.getHeight() * nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE;\r\n    java.awt.Dimension size = new java.awt.Dimension(w, h);\r\n    this.setMinimumSize(size);\r\n    this.setPreferredSize(size);\r\n}",
            "docComment": "Creates a new board panel that will display the provided game.\r\n\r\n@param game\r\n\t\tThe game to display.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a BoardPanel with a given game instance.",
            "howItWorks": "The constructor sets up the minimum and preferred size of the panel based on the width and height of the game board.",
            "howToUse": "Create an instance of BoardPanel by passing a Game object to its constructor.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [
              {
                "condition": "game != null",
                "description": "The game parameter must not be null."
              }
            ],
            "reason": "This method initializes a BoardPanel, setting up its dimensions based on the game's level board.",
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createBoard(nl.tudelft.jpacman.board.Square[][])",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new board from a grid of cells and connects it.\r\n *\r\n * @param grid\r\n * \t\tThe square grid of cells, in which grid[x][y] corresponds to\r\n * \t\tthe square at position x,y.\r\n * @return A new board, wrapping a grid of connected cells.\r\n */\r\npublic nl.tudelft.jpacman.board.Board createBoard(nl.tudelft.jpacman.board.Square[][] grid) {\r\n    assert grid != null;\r\n    nl.tudelft.jpacman.board.Board board = new nl.tudelft.jpacman.board.Board(grid);\r\n    int width = board.getWidth();\r\n    int height = board.getHeight();\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            nl.tudelft.jpacman.board.Square square = grid[x][y];\r\n            for (nl.tudelft.jpacman.board.Direction dir : nl.tudelft.jpacman.board.Direction.values()) {\r\n                int dirX = ((width + x) + dir.getDeltaX()) % width;\r\n                int dirY = ((height + y) + dir.getDeltaY()) % height;\r\n                nl.tudelft.jpacman.board.Square neighbour = grid[dirX][dirY];\r\n                square.link(neighbour, dir);\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}",
            "docComment": "Creates a new board from a grid of cells and connects it.\r\n\r\n@param grid\r\n\t\tThe square grid of cells, in which grid[x][y] corresponds to\r\n\t\tthe square at position x,y.\r\n@return A new board, wrapping a grid of connected cells.\r\n",
            "metaSrc": "source code",
            "assertions": [
              {
                "description": "The grid parameter must not be null.",
                "type": "precondition"
              }
            ],
            "description": "Creates a board in the Pacman game using a given grid of squares.",
            "howItWorks": "The method first validates that the grid is not null. It then creates a new Board object using the provided grid. After obtaining the board's width and height, it iterates through each square in the grid, linking it with its neighboring squares in all four directions (up, down, left, right).",
            "howToUse": "Call this method with a two-dimensional array of Square objects to create a new Board instance.",
            "layer": "Logic",
            "reason": "This method initializes a new board with the provided grid and sets up the connections between adjacent squares.",
            "returns": "nl.tudelft.jpacman.board.Board"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "squareAt(int,int)",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
            "docComment": "Returns the square at the given <code>x,y</code> position.\r\n\r\nPrecondition: The <code>(x, y)</code> coordinates are within the\r\nwidth and height of the board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (column) of the requested square.\r\n@param y\r\n\t\tThe <code>y</code> position (row) of the requested square.\r\n@return The square at the given <code>x,y</code> position (never null).\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the square at a given position on the board.",
            "howItWorks": "The method first checks if the given coordinates are within the borders of the board using the `withinBorders` method. If they are, it retrieves the square from the board array and returns it. Assertions ensure that the returned square is not null.",
            "howToUse": "Call this method with the x and y coordinates to get the square at that position on the board.",
            "layer": "Logic",
            "postConditions": [
              "The returned square at the given position on the board will not be null."
            ],
            "preConditions": [
              "The x and y coordinates must be within the borders of the board."
            ],
            "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
            "returns": "nl.tudelft.jpacman.board.Square",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.service",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The service executing the task.\r\n */\r\nprivate final java.util.concurrent.ScheduledExecutorService service;",
            "visibility": "private",
            "simpleName": "service",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask.service",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Empty Sprite which does not contain any data. When this sprite is drawn,\r\nnothing happens.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "EmptySprite",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite",
            "kind": "class",
            "metaSrc": "source code",
            "description": "EmptySprite is a subclass of Sprite and represents an empty sprite in the Pacman game. It does not have any specific functionality beyond being a placeholder for other sprites.",
            "howItWorks": "The method checks if the sprite has any graphical data. If not, it draws nothing on the provided graphics context.",
            "howToUse": "Call this method with a graphics context and coordinates to draw an empty sprite at the specified location.",
            "layer": "Presentation Layer",
            "parameters": [
              {
                "description": "The graphics context to draw on.",
                "name": "graphics",
                "type": "java.awt.Graphics"
              },
              {
                "description": "The x-coordinate of the top-left corner of the sprite.",
                "name": "x",
                "type": "int"
              },
              {
                "description": "The y-coordinate of the top-left corner of the sprite.",
                "name": "y",
                "type": "int"
              },
              {
                "description": "The width of the sprite.",
                "name": "width",
                "type": "int"
              },
              {
                "description": "The height of the sprite.",
                "name": "height",
                "type": "int"
              }
            ],
            "postConditions": [
              "No graphical elements are drawn on the provided graphics context."
            ],
            "preConditions": [
              "A valid Graphics object must be passed as an argument."
            ],
            "reason": "This method is responsible for drawing an empty sprite, which does not contain any graphical elements.",
            "returns": "void",
            "stereotype": "Other",
            "keywords": [
              "Pacman",
              "game",
              "sprite",
              "empty"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "message",
            "qualifiedName": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "baseImage",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The base image to be split into frames."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "squaresAheadOf(int)",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
            "kind": "method",
            "sourceText": "/**\r\n * A utility method for implementing the ghost AI.\r\n *\r\n * @param amountToLookAhead\r\n * \t\tthe amount of squares to follow this units direction in.\r\n * @return The square amountToLookAhead spaces in front of this unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square squaresAheadOf(int amountToLookAhead) {\r\n    nl.tudelft.jpacman.board.Direction targetDirection = this.getDirection();\r\n    nl.tudelft.jpacman.board.Square destination = this.getSquare();\r\n    for (int i = 0; i < amountToLookAhead; i++) {\r\n        destination = destination.getSquareAt(targetDirection);\r\n    }\r\n    return destination;\r\n}",
            "docComment": "A utility method for implementing the ghost AI.\r\n\r\n@param amountToLookAhead\r\n\t\tthe amount of squares to follow this units direction in.\r\n@return The square amountToLookAhead spaces in front of this unit.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the square that is a specified number of steps ahead in the current direction.",
            "howItWorks": "The method retrieves the current direction and the current square, then iterates through the specified number of times, moving to the next square in the current direction each time.",
            "howToUse": "Call this method with the number of squares you want to look ahead. It returns the square that many steps in the unit's current direction.",
            "layer": "Logic",
            "postConditions": [
              "The returned square is the one that is 'amountToLookAhead' steps ahead in the unit's current direction."
            ],
            "preConditions": [
              "The unit must be on a board with squares."
            ],
            "reason": "This method is used to determine the next position a unit will move to based on its current direction and the number of squares it intends to move.",
            "returns": "nl.tudelft.jpacman.board.Square - The square that is a specified number of steps ahead in the current direction.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteMap",
            "qualifiedName": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A map where keys are directions (e.g., UP, DOWN) and values are sprites representing the player in those directions."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new task.\r\n *\r\n * @param service\r\n * \t\tThe service that executes the task.\r\n * @param npc\r\n * \t\tThe NPC to move.\r\n */\r\nNpcMoveTask(java.util.concurrent.ScheduledExecutorService service, nl.tudelft.jpacman.npc.Ghost npc) {\r\n    super();\r\n    this.service = service;\r\n    this.npc = npc;\r\n}",
            "docComment": "Creates a new task.\r\n\r\n@param service\r\n\t\tThe service that executes the task.\r\n@param npc\r\n\t\tThe NPC to move.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void draw(java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    graphics.drawImage(this.image, x, y, x + width, y + height, 0, 0, this.image.getWidth(null), this.image.getHeight(null), null);\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "keyMappings",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.PacManSprites)",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new player factory.\r\n *\r\n * @param spriteStore\r\n * \t\tThe sprite store containing the Pac-Man sprites.\r\n */\r\npublic PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites spriteStore) {\r\n    super();\r\n    this.sprites = spriteStore;\r\n}",
            "docComment": "Creates a new player factory.\r\n\r\n@param spriteStore\r\n\t\tThe sprite store containing the Pac-Man sprites.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).3",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).3",
            "kind": "parameter",
            "parameterPosition": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.pointCalculator",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The way to calculate points upon collisions.\r\n */\r\nprivate final nl.tudelft.jpacman.points.PointCalculator pointCalculator;",
            "visibility": "private",
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.pointCalculator",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "x",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The x-coordinate of the top-left corner where the sprite should be drawn."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A square on a {@link Board}, which can (or cannot, depending on the type) be\r\noccupied by units.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Square",
            "qualifiedName": "nl.tudelft.jpacman.board.Square",
            "kind": "abstract class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The calculator used to calculate points for various actions in the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "unit",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "map",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][]).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "A two-dimensional array representing the game map with characters indicating different elements."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A simple, minimalistic point calculator just\r\nadding points for each pellet consumed.\r\n",
            "simpleName": "DefaultPointCalculator",
            "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "This class is responsible for calculating points in the Pacman game based on the consumption of pellets.",
            "howItWorks": "The method retrieves the point value from the pellet and adds it to the player's current score.",
            "howToUse": "Call this method whenever a player consumes a pellet in the game.",
            "layer": "Logic",
            "parameters": [
              {
                "description": "The player who consumed the pellet.",
                "name": "player",
                "type": "nl.tudelft.jpacman.level.Player"
              },
              {
                "description": "The pellet that was consumed by the player.",
                "name": "pellet",
                "type": "nl.tudelft.jpacman.level.Pellet"
              }
            ],
            "postConditions": [
              "The player's score is increased by the value of the consumed pellet."
            ],
            "preConditions": [
              "The player must be on the same square as the pellet."
            ],
            "reason": "This method updates the player's score based on the value of the consumed pellet, which is a core game logic operation.",
            "returns": "Void.",
            "stereotype": "Mutator",
            "keywords": [
              "Pacman",
              "Game Logic",
              "Points Calculation"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "hasSquare()",
            "qualifiedName": "nl.tudelft.jpacman.board.Unit.hasSquare()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns whether this unit is currently on  a square.\r\n *\r\n * @return True iff the unit is occupying a square at the moment.\r\n */\r\npublic boolean hasSquare() {\r\n    return this.square != null;\r\n}",
            "docComment": "Returns whether this unit is currently on  a square.\r\n\r\n@return True iff the unit is occupying a square at the moment.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the unit has a square.",
            "howItWorks": "The method checks if the 'square' field of the Unit object is not null.",
            "howToUse": "Call this method on an instance of Unit to determine if it is currently associated with a square.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if the unit has a square, otherwise it returns false."
            ],
            "preConditions": [
              "None"
            ],
            "reason": "This method is necessary to determine the current state of the unit in the game board, which is part of the application logic.",
            "returns": "A boolean indicating whether the unit has a square or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "map",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The map of characters representing the game board."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteStore",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int SQUARES_AHEAD = 4;",
            "visibility": "private",
            "simpleName": "SQUARES_AHEAD",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new animating sprite that will change frames every interval.\r\n *\r\n * @param frames\r\n * \t\tThe frames of this animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether or not this sprite should be looping.\r\n * @param isAnimating\r\n * \t\tWhether or not this sprite is animating from the start.\r\n */\r\npublic AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[] frames, int delay, boolean loop, boolean isAnimating) {\r\n    super();\r\n    assert frames.length > 0;\r\n    this.animationFrames = frames.clone();\r\n    this.animationDelay = delay;\r\n    this.looping = loop;\r\n    this.animating = isAnimating;\r\n    this.current = 0;\r\n    this.lastUpdate = java.lang.System.currentTimeMillis();\r\n}",
            "docComment": "Creates a new animating sprite that will change frames every interval.\r\n\r\n@param frames\r\n\t\tThe frames of this animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether or not this sprite should be looping.\r\n@param isAnimating\r\n\t\tWhether or not this sprite is animating from the start.\r\n",
            "metaSrc": "source code",
            "description": "Initializes an AnimatedSprite with a sequence of frames, delay, looping behavior, and animation status.",
            "howItWorks": "The constructor clones the input frames to avoid modifying the original array. It initializes other properties such as animationDelay, looping, animating, current frame index, and last update time.",
            "howToUse": "Create a new instance of AnimatedSprite by passing in an array of Sprite objects, delay, looping behavior, and animation status.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "frames.length > 0"
            ],
            "reason": "This method initializes an AnimatedSprite object with necessary properties and sets up its initial state.",
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.npc",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The NPC to move.\r\n */\r\nprivate final nl.tudelft.jpacman.npc.Ghost npc;",
            "visibility": "private",
            "simpleName": "npc",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask.npc",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "byte",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "byte",
            "qualifiedName": "byte",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": null
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "parent",
            "qualifiedName": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The parent JFrame that contains the ButtonPanel."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "split(int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a portion of this sprite as a new Sprite.\r\n *\r\n * @param x\r\n * \t\tThe x start coordinate.\r\n * @param y\r\n * \t\tThe y start coordinate.\r\n * @param width\r\n * \t\tThe width of the target sprite.\r\n * @param height\r\n * \t\tThe height of the target sprite.\r\n * @return A new sprite of width x height, or a new {@link EmptySprite} if\r\nthe region was not in the current sprite.\r\n */\r\nnl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height);",
            "docComment": "Returns a portion of this sprite as a new Sprite.\r\n\r\n@param x\r\n\t\tThe x start coordinate.\r\n@param y\r\n\t\tThe y start coordinate.\r\n@param width\r\n\t\tThe width of the target sprite.\r\n@param height\r\n\t\tThe height of the target sprite.\r\n@return A new sprite of width x height, or a new {@link EmptySprite} if\r\nthe region was not in the current sprite.\r\n",
            "metaSrc": "source code",
            "description": "Splits a sprite into smaller sprites based on the provided coordinates and dimensions.",
            "howItWorks": "The method creates a new sprite that represents a portion of the original sprite based on the provided x, y, width, and height parameters.",
            "howToUse": "Call this method with the coordinates and dimensions of the desired sub-sprite.",
            "layer": "Logic",
            "postConditions": [
              "A new sprite representing the sub-section is returned."
            ],
            "preConditions": [
              "The original sprite must be non-null."
            ],
            "reason": "This method is responsible for dividing a sprite into smaller sprites, which is part of the game logic in Pacman.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "handler",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
            "kind": "parameter",
            "parameterPosition": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.background",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The background for this square.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.Sprite background;",
            "visibility": "private",
            "simpleName": "background",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.background",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The base movement interval.\r\n */\r\nprivate static final int MOVE_INTERVAL = 250;",
            "visibility": "private",
            "simpleName": "MOVE_INTERVAL",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "square",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The square where the search for units will be performed."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pellet",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "to",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The destination square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "keyCode",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The key code for the action."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.getWidth()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getWidth()",
            "qualifiedName": "nl.tudelft.jpacman.board.Board.getWidth()",
            "kind": "method",
            "sourceText": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
            "docComment": "Returns the number of columns.\r\n\r\n@return The width of this board.\r\n",
            "metaSrc": "source code",
            "description": "Returns the width of the board.",
            "howItWorks": "The method returns the length of the 'board' array, which represents the width of the board.",
            "howToUse": "Call this method on an instance of the Board class to get the width of the board.",
            "layer": "Logic",
            "postConditions": [
              "The returned value should be a non-negative integer representing the width of the board."
            ],
            "preConditions": [],
            "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
            "returns": "An integer representing the width of the board.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A panel containing a button for every registered action.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "ButtonPanel",
            "qualifiedName": "nl.tudelft.jpacman.ui.ButtonPanel",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Manages a panel of buttons for user interaction in the JPacman game.",
            "howItWorks": "The method iterates over each entry in the buttons map, creates a JButton for each caption, adds an ActionListener that triggers the associated action when clicked, and adds the button to the panel. Assertions ensure that both the buttons map and parent JFrame are not null.",
            "howToUse": "Create an instance of ButtonPanel by passing a map of button captions and corresponding actions, along with a parent JFrame.",
            "layer": "UI",
            "parameters": [
              {
                "description": "The map of caption - action for each button.",
                "name": "buttons",
                "type": "java.util.Map"
              },
              {
                "description": "The parent frame, used to return window focus.",
                "name": "parent",
                "type": "javax.swing.JFrame"
              }
            ],
            "postConditions": [],
            "preConditions": [
              {
                "condition": "buttons != null",
                "description": "The buttons map must not be null."
              },
              {
                "condition": "parent != null",
                "description": "The parent JFrame must not be null."
              }
            ],
            "reason": "This method initializes a user interface component, setting up buttons and their actions. It ensures that the buttons are properly configured and added to the panel.",
            "returns": "Void.",
            "stereotype": "Creational",
            "keywords": [
              "ButtonPanel",
              "JPacman",
              "UI",
              "Buttons",
              "ActionListener"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.alive",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * <code>true</code> iff this player is alive.\r\n */\r\nprivate boolean alive;",
            "visibility": "private",
            "simpleName": "alive",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.alive",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getGroundSprite()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
            "docComment": "\r\n@return The sprite for the ground.\r\n",
            "metaSrc": "source code",
            "description": "Loads a sprite representing the ground from a resource file.",
            "howItWorks": "The method calls another method `loadSprite` with a specific file path to retrieve the sprite.",
            "howToUse": "Call this method to get the sprite representing the ground in the game.",
            "layer": "Logic",
            "postConditions": [
              "The returned sprite is not null and represents the ground."
            ],
            "preConditions": [],
            "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The game to be displayed in the UI."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "registerPlayer(nl.tudelft.jpacman.level.Player)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
            "kind": "method",
            "sourceText": "/**\r\n * Registers a player on this level, assigning him to a starting position. A\r\n * player can only be registered once, registering a player again will have\r\n * no effect.\r\n *\r\n * @param player\r\n * \t\tThe player to register.\r\n */\r\npublic void registerPlayer(nl.tudelft.jpacman.level.Player player) {\r\n    assert player != null;\r\n    assert !this.startSquares.isEmpty();\r\n    if (this.players.contains(player)) {\r\n        return;\r\n    }\r\n    this.players.add(player);\r\n    nl.tudelft.jpacman.board.Square square = this.startSquares.get(this.startSquareIndex);\r\n    player.occupy(square);\r\n    this.startSquareIndex++;\r\n    this.startSquareIndex %= this.startSquares.size();\r\n}",
            "docComment": "Registers a player on this level, assigning him to a starting position. A\r\nplayer can only be registered once, registering a player again will have\r\nno effect.\r\n\r\n@param player\r\n\t\tThe player to register.\r\n",
            "metaSrc": "source code",
            "description": "Registers a player in the level.",
            "howItWorks": "The method first checks if the player is null or already registered. If not, it adds the player to the list of players and places them on a start square in a round-robin fashion.",
            "howToUse": "Call this method with an instance of Player to add it to the level.",
            "layer": "Logic",
            "postConditions": [
              "The player is added to this.players.",
              "The player occupies a square from this.startSquares."
            ],
            "preConditions": [
              "player != null",
              "!this.startSquares.isEmpty()"
            ],
            "reason": "This method is responsible for adding a new player to the level and placing them on a start square. It ensures that the player is not already registered and handles the initial placement of the player.",
            "returns": "Void.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new UI for a JPacman game.\r\n *\r\n * @param game\r\n * \t\tThe game to play.\r\n * @param buttons\r\n * \t\tThe map of caption-to-action entries that will appear as\r\n * \t\tbuttons on the interface.\r\n * @param keyMappings\r\n * \t\tThe map of keyCode-to-action entries that will be added as key\r\n * \t\tlisteners to the interface.\r\n * @param scoreFormatter\r\n * \t\tThe formatter used to display the current score.\r\n */\r\npublic PacManUI(final nl.tudelft.jpacman.game.Game game, final java.util.Map<java.lang.String, nl.tudelft.jpacman.ui.Action> buttons, final java.util.Map<java.lang.Integer, nl.tudelft.jpacman.ui.Action> keyMappings, nl.tudelft.jpacman.ui.ScorePanel.ScoreFormatter scoreFormatter) {\r\n    super(\"JPacman\");\r\n    assert game != null;\r\n    assert buttons != null;\r\n    assert keyMappings != null;\r\n    this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\r\n    nl.tudelft.jpacman.ui.PacKeyListener keys = new nl.tudelft.jpacman.ui.PacKeyListener(keyMappings);\r\n    this.addKeyListener(keys);\r\n    javax.swing.JPanel buttonPanel = new nl.tudelft.jpacman.ui.ButtonPanel(buttons, this);\r\n    this.scorePanel = new nl.tudelft.jpacman.ui.ScorePanel(game.getPlayers());\r\n    if (scoreFormatter != null) {\r\n        this.scorePanel.setScoreFormatter(scoreFormatter);\r\n    }\r\n    this.boardPanel = new nl.tudelft.jpacman.ui.BoardPanel(game);\r\n    java.awt.Container contentPanel = this.getContentPane();\r\n    contentPanel.setLayout(new java.awt.BorderLayout());\r\n    contentPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);\r\n    contentPanel.add(this.scorePanel, java.awt.BorderLayout.NORTH);\r\n    contentPanel.add(this.boardPanel, java.awt.BorderLayout.CENTER);\r\n    this.pack();\r\n}",
            "docComment": "Creates a new UI for a JPacman game.\r\n\r\n@param game\r\n\t\tThe game to play.\r\n@param buttons\r\n\t\tThe map of caption-to-action entries that will appear as\r\n\t\tbuttons on the interface.\r\n@param keyMappings\r\n\t\tThe map of keyCode-to-action entries that will be added as key\r\n\t\tlisteners to the interface.\r\n@param scoreFormatter\r\n\t\tThe formatter used to display the current score.\r\n",
            "metaSrc": "source code",
            "assertions": [
              {
                "condition": "game != null",
                "message": "Game cannot be null."
              },
              {
                "condition": "buttons != null",
                "message": "Buttons map cannot be null."
              },
              {
                "condition": "keyMappings != null",
                "message": "Key mappings map cannot be null."
              }
            ],
            "description": "Initializes a new instance of the PacManUI class with a game, button mappings, key mappings, and an optional score formatter.",
            "howItWorks": "The constructor sets up the UI window, adds key listeners for user input, creates panels for buttons, score, and board, and arranges them within the window.",
            "howToUse": "Create an instance of PacManUI by passing in a Game object, maps of button and key actions, and optionally a score formatter.",
            "layer": "UI",
            "reason": "This method initializes the user interface for the game, setting up the necessary components and event listeners.",
            "returns": "Void. Initializes a new instance of PacManUI."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "height",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).4",
            "kind": "parameter",
            "parameterPosition": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "keyTyped(java.awt.event.KeyEvent)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void keyTyped(java.awt.event.KeyEvent event) {\r\n    // do nothing\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.opposite()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "opposite()",
            "qualifiedName": "nl.tudelft.jpacman.board.Direction.opposite()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The direction that is opposite to this direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction opposite() {\r\n    switch (this) {\r\n        case NORTH :\r\n            return nl.tudelft.jpacman.board.Direction.SOUTH;\r\n        case SOUTH :\r\n            return nl.tudelft.jpacman.board.Direction.NORTH;\r\n        case WEST :\r\n            return nl.tudelft.jpacman.board.Direction.EAST;\r\n        case EAST :\r\n            return nl.tudelft.jpacman.board.Direction.WEST;\r\n        default :\r\n            throw new java.lang.IllegalStateException(\"Received an unknown enum value.\");\r\n    }\r\n}",
            "docComment": "\r\n@return The direction that is opposite to this direction.\r\n",
            "metaSrc": "source code",
            "description": "Returns the opposite direction of the current direction.",
            "howItWorks": "The method uses a switch statement to map each direction to its opposite. For example, NORTH maps to SOUTH, and EAST maps to WEST.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.board.Direction to get its opposite direction.",
            "layer": "Logic",
            "postConditions": [
              "The returned direction will always be the opposite of the input direction."
            ],
            "preConditions": [
              "The current direction must be one of the four cardinal directions (NORTH, SOUTH, EAST, or WEST)."
            ],
            "reason": "This method is used to determine the opposite direction in a game like Pacman, where knowing the opposite direction is necessary for movement logic.",
            "returns": "nl.tudelft.jpacman.board.Direction - The opposite direction of the current direction.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "from",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The starting square."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "unit",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "createGhost()",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new ghost.\r\n *\r\n * @return The new ghost.\r\n */\r\nnl.tudelft.jpacman.npc.Ghost createGhost() {\r\n    this.ghostIndex++;\r\n    this.ghostIndex %= nl.tudelft.jpacman.level.LevelFactory.GHOSTS;\r\n    switch (this.ghostIndex) {\r\n        case nl.tudelft.jpacman.level.LevelFactory.BLINKY :\r\n            return this.ghostFact.createBlinky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.INKY :\r\n            return this.ghostFact.createInky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.PINKY :\r\n            return this.ghostFact.createPinky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.CLYDE :\r\n            return this.ghostFact.createClyde();\r\n        default :\r\n            return new nl.tudelft.jpacman.level.LevelFactory.RandomGhost(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.RED));\r\n    }\r\n}",
            "docComment": "Creates a new ghost.\r\n\r\n@return The new ghost.\r\n",
            "metaSrc": "source code",
            "defaultCase": "If the ghostIndex does not match any case, it creates a RandomGhost with a red sprite.",
            "description": "Creates a ghost using the provided sprite factory.",
            "howItWorks": "The method increments the ghostIndex and uses a switch statement to determine which type of ghost to create. It then calls the appropriate method from the ghostFact object to create the ghost.",
            "howToUse": "Call this method to create a ghost. It will return an instance of Ghost based on the current ghost index.",
            "preConditions": [
              "The ghostIndex should be initialized before calling this method."
            ],
            "reason": "This method is responsible for creating different types of ghosts in the game, which falls under the logic layer as it involves application and domain logic.",
            "returns": "A new instance of nl.tudelft.jpacman.npc.Ghost representing a ghost."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "/**\r\n * Handles this collision by flipping the collider and collidee, making\r\n * it compatible with the initial collision.\r\n */\r\n@java.lang.Override\r\npublic void handleCollision(C1 collider, C2 collidee) {\r\n    this.handler.handleCollision(collidee, collider);\r\n}",
            "docComment": "Handles this collision by flipping the collider and collidee, making\r\nit compatible with the initial collision.\r\n",
            "metaSrc": "source code",
            "description": "Handles collisions between two units in the game.",
            "howItWorks": "The method simply reverses the roles of the collider and collidee by calling the handleCollision method on the handler object with the parameters swapped.",
            "howToUse": "Call this method with two units that are colliding in the game.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "collider and collidee must be instances of nl.tudelft.jpacman.board.Unit."
            ],
            "reason": "This method is part of the game logic, specifically handling interactions between game entities without involving user interface or data access.",
            "returns": "Void.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "npc",
            "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createPacMan()",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new player with the classic Pac-Man sprites.\r\n *\r\n * @return A new player.\r\n */\r\npublic nl.tudelft.jpacman.level.Player createPacMan() {\r\n    return new nl.tudelft.jpacman.level.Player(this.getSprites().getPacmanSprites(), this.getSprites().getPacManDeathAnimation());\r\n}",
            "docComment": "Creates a new player with the classic Pac-Man sprites.\r\n\r\n@return A new player.\r\n",
            "metaSrc": "source code",
            "description": "Creates a new PacMan player instance.",
            "howItWorks": "The method retrieves the required sprites and death animation from the PlayerFactory's Sprites instance and uses them to create a new Player object.",
            "howToUse": "Call this method to obtain a new Player object that can be used in the game.",
            "layer": "Logic",
            "postConditions": [
              "A new Player object is returned, ready to be used in the game."
            ],
            "preConditions": [
              "The PlayerFactory must have been properly initialized with a valid Sprites instance."
            ],
            "reason": "This method is responsible for creating a new PacMan player, which involves setting up the necessary sprites and death animation.",
            "returns": "A newly created instance of nl.tudelft.jpacman.level.Player.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getPlayers()",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic java.util.List<nl.tudelft.jpacman.level.Player> getPlayers() {\r\n    return com.google.common.collect.ImmutableList.of(this.player);\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "levelFactory",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationFrames",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The animation itself, in frames.\r\n */\r\nprivate final nl.tudelft.jpacman.sprite.Sprite[] animationFrames;",
            "visibility": "private",
            "simpleName": "animationFrames",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationFrames",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "players",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "y",
            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The y-coordinate of the top-left corner of the sub-sprite."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A non-player unit.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "Ghost",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost",
            "kind": "abstract class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "(no description)",
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "spriteStore",
            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "sourceText": "/**\r\n * Method called whevener a player makes a successful move.\r\n * It can be used to update the player's points accordingly.\r\n *\r\n * @param player\r\n * \t\tThe player making a move.\r\n * @param direction\r\n * \t\tThe direction of the move.\r\n */\r\nvoid pacmanMoved(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Direction direction);",
            "docComment": "Method called whevener a player makes a successful move.\r\nIt can be used to update the player's points accordingly.\r\n\r\n@param player\r\n\t\tThe player making a move.\r\n@param direction\r\n\t\tThe direction of the move.\r\n",
            "metaSrc": "source code",
            "description": "Handles the movement of a Pacman player in a given direction.",
            "howItWorks": "The method updates the player's position and checks for interactions with other game elements like ghosts or pellets.",
            "howToUse": "Call this method whenever a Pacman player moves in a specific direction within the game.",
            "layer": "Logic",
            "postConditions": [
              "The player's position is updated to reflect the movement in the specified direction.",
              "Interactions with other game elements are checked and handled accordingly."
            ],
            "preConditions": [
              "A valid Player object must be provided.",
              "A valid Direction enum value must be provided."
            ],
            "reason": "This method is part of the game logic, updating the state of the game based on player movement.",
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.occupants",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The units occupying this square, in order of appearance.\r\n */\r\nprivate final java.util.List<nl.tudelft.jpacman.board.Unit> occupants;",
            "visibility": "private",
            "simpleName": "occupants",
            "qualifiedName": "nl.tudelft.jpacman.board.Square.occupants",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghosts",
            "qualifiedName": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "restart()",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
            "kind": "method",
            "sourceText": "/**\r\n * (Re)starts the current animation.\r\n */\r\npublic void restart() {\r\n    this.current = 0;\r\n    this.lastUpdate = java.lang.System.currentTimeMillis();\r\n    this.setAnimating(true);\r\n}",
            "docComment": "(Re)starts the current animation.\r\n",
            "metaSrc": "source code",
            "description": "Resets the current frame index and last update time of an animated sprite, and starts the animation.",
            "howItWorks": "Sets the current frame index to 0, updates the last update time to the current system time, and sets the sprite as animating.",
            "howToUse": "Call this method on an instance of AnimatedSprite when you want to restart its animation.",
            "layer": "Logic",
            "postConditions": [
              "current == 0",
              "lastUpdate is updated to the current system time",
              "isAnimating == true"
            ],
            "preConditions": [],
            "reason": "This method is necessary for resetting an animated sprite's state, which is part of managing game logic.",
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "split(int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    this.update();\r\n    return this.currentSprite().split(x, y, width, height);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Splits a sprite into smaller sprites based on the provided coordinates and dimensions.",
            "howItWorks": "The method first updates the state of the animated sprite. It then calls the currentSprite() method to get the current sprite in the animation sequence and splits it based on the provided parameters.",
            "howToUse": "Call this method on an instance of AnimatedSprite, providing the coordinates and dimensions to split the sprite into smaller parts.",
            "layer": "Logic",
            "postConditions": [
              "A new Sprite object representing a portion of the original sprite is returned.",
              "The state of the animated sprite may have been updated if necessary."
            ],
            "preConditions": [
              "The instance of AnimatedSprite must be properly initialized.",
              "Valid coordinates (x, y) and dimensions (width, height) must be provided."
            ],
            "reason": "This method is part of the logic layer as it deals with the manipulation and splitting of sprites, which are essential for rendering in a game.",
            "returns": "nl.tudelft.jpacman.sprite.Sprite",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "<init>(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
            "qualifiedName": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new player with a score of 0 points.\r\n *\r\n * @param spriteMap\r\n * \t\tA map containing a sprite for this player for every direction.\r\n * @param deathAnimation\r\n * \t\tThe sprite to be shown when this player dies.\r\n */\r\nprotected Player(java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> spriteMap, nl.tudelft.jpacman.sprite.AnimatedSprite deathAnimation) {\r\n    super();\r\n    this.score = 0;\r\n    this.alive = true;\r\n    this.sprites = spriteMap;\r\n    this.deathSprite = deathAnimation;\r\n    this.deathSprite.setAnimating(false);\r\n}",
            "docComment": "Creates a new player with a score of 0 points.\r\n\r\n@param spriteMap\r\n\t\tA map containing a sprite for this player for every direction.\r\n@param deathAnimation\r\n\t\tThe sprite to be shown when this player dies.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the Player class with a map of direction to sprite and an animated death sprite.",
            "howItWorks": "The constructor initializes the player's score to 0, sets the player to be alive, assigns the provided sprite map and death animation, and stops the death animation from animating.",
            "howToUse": "Create an instance of Player by passing in a map of direction to sprite and an animated death sprite.",
            "layer": "Logic",
            "postConditions": [
              "Player's score is initialized to 0",
              "Player's alive status is set to true",
              "Player's sprites are set to the provided sprite map",
              "Death animation is stopped from animating"
            ],
            "preConditions": [
              "spriteMap must not be null",
              "deathAnimation must not be null"
            ],
            "reason": "This method is responsible for setting up a new player object with initial properties such as score, life status, and sprites.",
            "returns": "Void. Initializes a new instance of the Player class.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Map of buttons and their actions.\r\n */\r\nprivate final java.util.Map<java.lang.String, nl.tudelft.jpacman.ui.Action> buttons;",
            "visibility": "private",
            "simpleName": "buttons",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "cause",
            "qualifiedName": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "short",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "short",
            "qualifiedName": "short",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Builder for the JPac-Man UI.\r\n\r\n@author Jeroen Roosen\r\n",
            "simpleName": "PacManUiBuilder",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "game",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The game to be displayed in the UI."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "nextAiMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
            "kind": "method",
            "sourceText": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * Clyde has two basic AIs, one for when he's far from Pac-Man, and one for\r\n * when he is near to Pac-Man.\r\n * When Clyde is far away from Pac-Man (beyond eight grid spaces),\r\n * Clyde behaves very much like Blinky, trying to move to Pac-Man's exact\r\n * location. However, when Clyde gets within eight grid spaces of Pac-Man,\r\n * he automatically changes his behavior and runs away\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit nearest = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (nearest == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert nearest.hasSquare();\r\n    nl.tudelft.jpacman.board.Square target = nearest.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), target, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        nl.tudelft.jpacman.board.Direction direction = path.get(0);\r\n        if (path.size() <= nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS) {\r\n            return java.util.Optional.of(direction.opposite());\r\n        }\r\n        return java.util.Optional.of(direction);\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "{@inheritDoc }\r\n\r\n<p>\r\nClyde has two basic AIs, one for when he's far from Pac-Man, and one for\r\nwhen he is near to Pac-Man. \r\nWhen Clyde is far away from Pac-Man (beyond eight grid spaces),\r\nClyde behaves very much like Blinky, trying to move to Pac-Man's exact\r\nlocation. However, when Clyde gets within eight grid spaces of Pac-Man,\r\nhe automatically changes his behavior and runs away\r\n</p>\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "frames",
            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The number of frames in the animation."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "observer",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "parseMap(java.util.List)",
            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
            "kind": "method",
            "sourceText": "/**\r\n * Parses the list of strings into a 2-dimensional character array and\r\n * passes it on to {@link #parseMap(char[][])}.\r\n *\r\n * @param text\r\n * \t\tThe plain text, with every entry in the list being a equally\r\n * \t\tsized row of squares on the board and the first element being\r\n * \t\tthe top row.\r\n * @return The level as represented by the text.\r\n * @throws PacmanConfigurationException\r\n * \t\tIf text lines are not properly formatted.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(java.util.List<java.lang.String> text) {\r\n    this.checkMapFormat(text);\r\n    int height = text.size();\r\n    int width = text.get(0).length();\r\n    char[][] map = new char[width][height];\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            map[x][y] = text.get(y).charAt(x);\r\n        }\r\n    }\r\n    return this.parseMap(map);\r\n}",
            "docComment": "Parses the list of strings into a 2-dimensional character array and\r\npasses it on to {@link #parseMap(char[][])}.\r\n\r\n@param text\r\n\t\tThe plain text, with every entry in the list being a equally\r\n\t\tsized row of squares on the board and the first element being\r\n\t\tthe top row.\r\n@return The level as represented by the text.\r\n@throws PacmanConfigurationException\r\n\t\tIf text lines are not properly formatted.\r\n",
            "metaSrc": "source code",
            "description": "Parses a list of strings representing the text format of a Pacman level into a game level object.",
            "howItWorks": "The method first checks if the map format is correct using checkMapFormat(). It then creates a 2D char array from the input text and passes it to parseMap(char[][]) to create the level.",
            "howToUse": "Call this method with a list of strings representing the map. The method will return a Level object.",
            "layer": "Logic",
            "postConditions": [
              "A valid Level object is returned representing the parsed map."
            ],
            "preConditions": [
              "The input list 'text' must not be null or empty.",
              "Each string in 'text' must have the same length."
            ],
            "reason": "This method is responsible for converting textual representations of Pacman levels into actual game level objects, which involves parsing and validating the input text.",
            "returns": "nl.tudelft.jpacman.level.Level",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "ghost",
            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The ghost causing the player to die."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "player",
            "qualifiedName": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "protected",
            "simpleName": "getLevelFactory()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}\r\nand the ghosts from {@link #getGhostFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.LevelFactory getLevelFactory() {\r\n    return new nl.tudelft.jpacman.level.LevelFactory(this.getSpriteStore(), this.getGhostFactory(), this.loadPointCalculator());\r\n}",
            "docComment": "\r\n@return A new factory using the sprites from {@link #getSpriteStore()}\r\nand the ghosts from {@link #getGhostFactory()}.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the level factory used in the game.",
            "howItWorks": "The method initializes a new LevelFactory object by passing instances of SpriteStore, GhostFactory, and PointCalculator to its constructor.",
            "howToUse": "Call this method from an instance of nl.tudelft.jpacman.Launcher to retrieve the level factory needed for creating game levels.",
            "layer": "Logic",
            "postConditions": [
              "A valid LevelFactory instance is returned, which can be used to create game levels."
            ],
            "preConditions": [
              "The Launcher instance must be properly initialized with all necessary dependencies."
            ],
            "reason": "This method is responsible for creating the level factory, which is essential for setting up levels in the game. It depends on other components like sprite store, ghost factory, and point calculator to provide a complete level setup.",
            "returns": "An instance of nl.tudelft.jpacman.level.LevelFactory.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.animating",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * Whether this sprite is currently animating or not.\r\n */\r\nprivate boolean animating;",
            "visibility": "private",
            "simpleName": "animating",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.animating",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "withDefaultButtons()",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
            "kind": "method",
            "sourceText": "/**\r\n * Adds a start and stop button to the UI. The actual actions for these\r\n * buttons will be added upon building the UI.\r\n *\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder withDefaultButtons() {\r\n    this.defaultButtons = true;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION, null);\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION, null);\r\n    return this;\r\n}",
            "docComment": "Adds a start and stop button to the UI. The actual actions for these\r\nbuttons will be added upon building the UI.\r\n\r\n@return The builder.\r\n",
            "metaSrc": "source code",
            "description": "Enables the default buttons in the PacManUiBuilder.",
            "howItWorks": "The method sets the `defaultButtons` flag to true and adds start and stop button captions to the `buttons` map with null actions.",
            "howToUse": "Call this method on an instance of PacManUiBuilder to enable default buttons.",
            "layer": "UI",
            "postConditions": [
              "Default buttons are enabled in the user interface."
            ],
            "preConditions": [
              "An instance of PacManUiBuilder exists."
            ],
            "reason": "This method is used to configure the user interface by enabling default buttons.",
            "returns": "nl.tudelft.jpacman.ui.PacManUiBuilder",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "collidee",
            "qualifiedName": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The unit being collided with."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
            "kind": "method",
            "sourceText": "/**\r\n * Creates a new level from the provided data.\r\n *\r\n * @param board\r\n * \t\tThe board with all ghosts and pellets occupying their squares.\r\n * @param ghosts\r\n * \t\tA list of all ghosts on the board.\r\n * @param startPositions\r\n * \t\tA list of squares from which players may start the game.\r\n * @return A new level for the board.\r\n */\r\npublic nl.tudelft.jpacman.level.Level createLevel(nl.tudelft.jpacman.board.Board board, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions) {\r\n    // We'll adopt the simple collision map for now.\r\n    nl.tudelft.jpacman.level.CollisionMap collisionMap = new nl.tudelft.jpacman.level.PlayerCollisions(this.pointCalculator);\r\n    return new nl.tudelft.jpacman.level.Level(board, ghosts, startPositions, collisionMap);\r\n}",
            "docComment": "Creates a new level from the provided data.\r\n\r\n@param board\r\n\t\tThe board with all ghosts and pellets occupying their squares.\r\n@param ghosts\r\n\t\tA list of all ghosts on the board.\r\n@param startPositions\r\n\t\tA list of squares from which players may start the game.\r\n@return A new level for the board.\r\n",
            "metaSrc": "source code",
            "description": "Creates a new level in the game Pacman.",
            "howItWorks": "The method initializes a collision map for player collisions and then creates a new Level object with the provided parameters.",
            "howToUse": "Call this method with a board object, a list of ghost objects, and a list of start position squares to create a new level.",
            "layer": "Logic",
            "postConditions": [
              "A new Level object is created and returned with the specified board, ghosts, and start positions."
            ],
            "preConditions": [
              "A valid Board object must be provided.",
              "A non-empty List of Ghost objects must be provided.",
              "A non-empty List of Square objects must be provided."
            ],
            "reason": "This method is responsible for creating a new level in the game, setting up the board, placing ghosts and defining their starting positions.",
            "returns": "nl.tudelft.jpacman.level.Level",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
            "kind": "method",
            "sourceText": "/**\r\n * Renders the board on the given graphics context to the given dimensions.\r\n *\r\n * @param board\r\n * \t\tThe board to render.\r\n * @param graphics\r\n * \t\tThe graphics context to draw on.\r\n * @param window\r\n * \t\tThe dimensions to scale the rendered board to.\r\n */\r\nprivate void render(nl.tudelft.jpacman.board.Board board, java.awt.Graphics graphics, java.awt.Dimension window) {\r\n    int cellW = window.width / board.getWidth();\r\n    int cellH = window.height / board.getHeight();\r\n    graphics.setColor(nl.tudelft.jpacman.ui.BoardPanel.BACKGROUND_COLOR);\r\n    graphics.fillRect(0, 0, window.width, window.height);\r\n    for (int y = 0; y < board.getHeight(); y++) {\r\n        for (int x = 0; x < board.getWidth(); x++) {\r\n            int cellX = x * cellW;\r\n            int cellY = y * cellH;\r\n            nl.tudelft.jpacman.board.Square square = board.squareAt(x, y);\r\n            this.render(square, graphics, cellX, cellY, cellW, cellH);\r\n        }\r\n    }\r\n}",
            "docComment": "Renders the board on the given graphics context to the given dimensions.\r\n\r\n@param board\r\n\t\tThe board to render.\r\n@param graphics\r\n\t\tThe graphics context to draw on.\r\n@param window\r\n\t\tThe dimensions to scale the rendered board to.\r\n",
            "metaSrc": "source code",
            "description": "Renders the entire board using a given graphics context.",
            "howItWorks": "The method calculates the cell width and height based on the board dimensions and window size. It then iterates over each square on the board, calling another render method to draw each square.",
            "howToUse": "Call this method with a Board object, a Graphics object, and a Dimension object representing the window size.",
            "possibleLayers": [
              "UI"
            ],
            "reason": "This method is responsible for rendering the entire board, which involves drawing each square and its contents. It does not modify any data or handle user input, so it fits best in the UI layer.",
            "returns": "Void."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "start",
            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).1",
            "kind": "parameter",
            "parameterPosition": 1,
            "metaSrc": "source code",
            "description": "The starting square from which to begin following the directions."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "/**\r\n * The sprite files are vertically stacked series for each direction, this\r\n * array denotes the order.\r\n */\r\nprivate static final nl.tudelft.jpacman.board.Direction[] DIRECTIONS = new nl.tudelft.jpacman.board.Direction[]{ nl.tudelft.jpacman.board.Direction.NORTH, nl.tudelft.jpacman.board.Direction.EAST, nl.tudelft.jpacman.board.Direction.SOUTH, nl.tudelft.jpacman.board.Direction.WEST };",
            "visibility": "private",
            "simpleName": "DIRECTIONS",
            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "killer",
            "qualifiedName": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit).0",
            "kind": "parameter",
            "parameterPosition": 0,
            "metaSrc": "source code",
            "description": "The Unit object representing the entity that can kill the player."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void draw(java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    this.update();\r\n    this.currentSprite().draw(graphics, x, y, width, height);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Draws the sprite on a graphics context at a specified position and size.",
            "howItWorks": "The method first updates the state of the animated sprite, then draws the current sprite on the provided graphics context at the given coordinates and dimensions.",
            "howToUse": "Call this method with a valid Graphics object and coordinates to draw the sprite at the specified position and size.",
            "layer": "UI",
            "postConditions": [
              "The sprite will be drawn on the specified graphics context at the given position and size."
            ],
            "preConditions": [
              "A valid Graphics object must be passed as a parameter.",
              "Valid x, y, width, and height values must be provided."
            ],
            "reason": "This method is responsible for rendering a sprite on a graphics context, which is a typical task in the UI layer as it involves drawing graphical elements to the screen.",
            "returns": "Void.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "layer:UI",
          "labels": [
            "Grouping"
          ],
          "properties": {
            "kind": "architectural layer",
            "simpleName": "UI",
            "qualifiedName": "UI",
            "description": "Handles user interface, such as instatiating, setting properties of, or laying out widget objects and capturing user interactions.",
            "layerOrder": 0
          }
        }
      },
      {
        "data": {
          "id": "layer:Logic",
          "labels": [
            "Grouping"
          ],
          "properties": {
            "kind": "architectural layer",
            "simpleName": "Logic",
            "qualifiedName": "Logic",
            "description": "Handles application and domain logic, i.e., neither UI nor data access.",
            "layerOrder": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:Data",
          "labels": [
            "Grouping"
          ],
          "properties": {
            "kind": "architectural layer",
            "simpleName": "Data",
            "qualifiedName": "Data",
            "description": "Handles loading and storing data from/to external services, including database systems, web services, filesystems, hardware, etc.",
            "layerOrder": 2
          }
        }
      }
    ],
    "edges": [
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)-returnType-nl.tudelft.jpacman.npc.ghost.Inky",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int)-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)-returnType-nl.tudelft.jpacman.ui.ScorePanel",
          "source": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)",
          "target": "nl.tudelft.jpacman.ui.ScorePanel",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)-returnType-nl.tudelft.jpacman.board.BoardFactory$Wall",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.getDeltaY()-returnType-int",
          "source": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)-returnType-nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()-returnType-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGame()-returnType-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.Launcher.getGame()",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)-returnType-nl.tudelft.jpacman.level.LevelFactory",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.LevelFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()-returnType-boolean",
          "source": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()-returnType-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)-returnType-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSquare()-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)-returnType-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.getWidth()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)-returnType-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)-returnType-nl.tudelft.jpacman.game.GameFactory",
          "source": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)",
          "target": "nl.tudelft.jpacman.game.GameFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-returnType-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getMapParser()-returnType-nl.tudelft.jpacman.level.MapParser",
          "source": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "target": "nl.tudelft.jpacman.level.MapParser",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getDirection()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)-returnType-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGhostFactory()-returnType-nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "source": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)-returnType-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)-returnType-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()-returnType-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.Pellet.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.getPlayerFactory()-returnType-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.game.GameFactory.getPlayerFactory()",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)-returnType-nl.tudelft.jpacman.Launcher",
          "source": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)",
          "target": "nl.tudelft.jpacman.Launcher",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)-returnType-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getBoardFactory()-returnType-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)-returnType-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)-returnType-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)-returnType-nl.tudelft.jpacman.ui.PacKeyListener",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.loadPointCalculator()-returnType-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.getBoardCreator()-returnType-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.level.MapParser.getBoardCreator()",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)-returnType-nl.tudelft.jpacman.ui.PacManUI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUI",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-returnType-nl.tudelft.jpacman.level.CollisionInteractionMap",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-returnType-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite()-returnType-nl.tudelft.jpacman.sprite.EmptySprite",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite()",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getScore()-returnType-int",
          "source": "nl.tudelft.jpacman.level.Player.getScore()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-returnType-nl.tudelft.jpacman.ui.PacManUI",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUI",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-returnType-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.opposite()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Direction.opposite()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()-returnType-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getKiller()-returnType-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.Player.getKiller()",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder()-returnType-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder()",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.getValue()-returnType-int",
          "source": "nl.tudelft.jpacman.level.Pellet.getValue()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.invariant()-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.Unit.invariant()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-returnType-nl.tudelft.jpacman.game.SinglePlayerGame",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)-returnType-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)-returnType-nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)-returnType-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap()-returnType-nl.tudelft.jpacman.level.CollisionInteractionMap",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap()",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)-returnType-nl.tudelft.jpacman.level.PlayerCollisions",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-returnType-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.Square.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)-returnType-nl.tudelft.jpacman.board.BoardFactory$Ground",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-returnType-nl.tudelft.jpacman.ui.BoardPanel",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()-returnType-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getPlayerFactory()-returnType-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore()-returnType-nl.tudelft.jpacman.sprite.SpriteStore",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore()",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.getHeight()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()-returnType-java.lang.String",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-returnType-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)-returnType-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int)-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Direction(int,int)",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)-returnType-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor()-returnType-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)-returnType-boolean",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)-returnType-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.getLevel()-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.game.Game.getLevel()",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader()-returnType-nl.tudelft.jpacman.points.PointCalculatorLoader",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader()",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSpriteStore()-returnType-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.getDeltaX()-returnType-int",
          "source": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.getPlayers()-returnType-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.game.Game.getPlayers()",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createPellet()-returnType-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createWall()-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()-returnType-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.getHeight()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.getHeight()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.getHeight()-returnType-int",
          "source": "nl.tudelft.jpacman.board.Board.getHeight()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites()-returnType-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)-returnType-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()-returnType-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelMap()-returnType-java.lang.String",
          "source": "nl.tudelft.jpacman.Launcher.getLevelMap()",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)-returnType-nl.tudelft.jpacman.npc.ghost.Clyde",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)-returnType-nl.tudelft.jpacman.level.MapParser",
          "source": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
          "target": "nl.tudelft.jpacman.level.MapParser",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.isAlive()-returnType-boolean",
          "source": "nl.tudelft.jpacman.level.Player.isAlive()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher()-returnType-nl.tudelft.jpacman.Launcher",
          "source": "nl.tudelft.jpacman.Launcher()",
          "target": "nl.tudelft.jpacman.Launcher",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGameFactory()-returnType-nl.tudelft.jpacman.game.GameFactory",
          "source": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "target": "nl.tudelft.jpacman.game.GameFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator()-returnType-nl.tudelft.jpacman.points.DefaultPointCalculator",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator()",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)-returnType-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getParent()-returnType-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getParent()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.getWidth()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.getWidth()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.invariant()-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.Board.invariant()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.Player.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.nextAiMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit()-returnType-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.Unit()",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)-returnType-nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()-returnType-nl.tudelft.jpacman.level.LevelFactory",
          "source": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "target": "nl.tudelft.jpacman.level.LevelFactory",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)-returnType-nl.tudelft.jpacman.ui.ButtonPanel",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-returnType-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-returnType-int",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square()-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Square()",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getOccupants()-returnType-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation()-returnType-nl.tudelft.jpacman.npc.ghost.Navigation",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)-returnType-nl.tudelft.jpacman.npc.ghost.Blinky",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()-returnType-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)-returnType-nl.tudelft.jpacman.npc.ghost.Pinky",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)-returnType-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)-returnType-nl.tudelft.jpacman.sprite.ImageSprite",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)-returnType-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.isInProgress()-returnType-boolean",
          "source": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()-returnType-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.Launcher.makeGame()",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()-returnType-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createGround()-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])-returnType-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.randomMove()-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isInProgress()-returnType-boolean",
          "source": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.getBoard()-returnType-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.level.Level.getBoard()",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()-returnType-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()-returnType-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.Unit.getSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-returnType-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getInterval()-returnType-long",
          "source": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "target": "long",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.getWidth()-returnType-int",
          "source": "nl.tudelft.jpacman.board.Board.getWidth()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)-returnType-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)-returnType-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()-returnType-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.hasSquare()-returnType-boolean",
          "source": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall-hasScript-nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener-hasScript-nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory-hasScript-nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-hasScript-nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory-hasScript-nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "source": "nl.tudelft.jpacman.level.PlayerFactory",
          "target": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor-hasScript-nl.tudelft.jpacman.npc.ghost.GhostColor()",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.isInProgress()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator-hasScript-nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.points.PointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground-hasScript-nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.getSprite()",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.getLevel()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.getLevel()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.getScore()",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.getScore()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.getBoard()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.getBoard()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator-hasScript-nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.points.PointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground-hasScript-nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall-hasScript-nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.getDirection()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet-hasScript-nl.tudelft.jpacman.level.Pellet.getValue()",
          "source": "nl.tudelft.jpacman.level.Pellet",
          "target": "nl.tudelft.jpacman.level.Pellet.getValue()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasScript-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.levelWon()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.levelWon()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getMapParser()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-hasScript-nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasScript-nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap-hasScript-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite-hasScript-nl.tudelft.jpacman.sprite.EmptySprite.getWidth()",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.getWidth()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator-hasScript-nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.points.PointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.makeLevel()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver-hasScript-nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
          "source": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.levelLost()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.levelLost()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator-hasScript-nl.tudelft.jpacman.points.DefaultPointCalculator()",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getParent()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getParent()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder()",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore-hasScript-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasScript-nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.start()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.start()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasScript-nl.tudelft.jpacman.npc.Ghost.getSprite()",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getLevelMap()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getLevelMap()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasScript-nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasScript-nl.tudelft.jpacman.board.Direction.opposite()",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.opposite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite-hasScript-nl.tudelft.jpacman.sprite.EmptySprite()",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator-hasScript-nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory-hasScript-nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore-hasScript-nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.stopNPCs()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.stopNPCs()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasScript-nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory-hasScript-nl.tudelft.jpacman.game.GameFactory.getPlayerFactory()",
          "source": "nl.tudelft.jpacman.game.GameFactory",
          "target": "nl.tudelft.jpacman.game.GameFactory.getPlayerFactory()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel-hasScript-nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask-hasScript-nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory-hasScript-nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)",
          "source": "nl.tudelft.jpacman.game.GameFactory",
          "target": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory-hasScript-nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-hasScript-nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasScript-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.getOccupants()",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-hasScript-nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasScript-nl.tudelft.jpacman.ui.PacManUI.start()",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI.start()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasScript-nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.getSprite()",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap-hasScript-nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.CollisionMap",
          "target": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasScript-nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.stop()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.stop()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.addPoints(int)",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.addPoints(int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite-hasScript-nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "source": "nl.tudelft.jpacman.sprite.Sprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasScript-nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener-hasScript-nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent)",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-hasScript-nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasScript-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.invariant()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.invariant()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator-hasScript-nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory-hasScript-nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.start()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.start()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame-hasScript-nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasScript-nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasScript-nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory-hasScript-nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "source": "nl.tudelft.jpacman.level.PlayerFactory",
          "target": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasScript-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory-hasScript-nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.game.GameFactory",
          "target": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter-hasScript-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "source": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite-hasScript-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.Sprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square()",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.getSprite()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getGame()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getGame()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame-hasScript-nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader-hasScript-nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasScript-nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator-hasScript-nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.getBoardCreator()",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.getBoardCreator()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasScript-nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall-hasScript-nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky-hasScript-nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader-hasScript-nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky-hasScript-nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost-hasScript-nl.tudelft.jpacman.level.LevelFactory$RandomGhost.nextAiMove()",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.nextAiMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap()",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde-hasScript-nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener-hasScript-nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet-hasScript-nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "source": "nl.tudelft.jpacman.level.Pellet",
          "target": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasScript-nl.tudelft.jpacman.board.Board.invariant()",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board.invariant()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.launch()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.launch()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost-hasScript-nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler-hasScript-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-hasScript-nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite-hasScript-nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "source": "nl.tudelft.jpacman.sprite.Sprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener-hasScript-nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore-hasScript-nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasScript-nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite-hasScript-nl.tudelft.jpacman.sprite.EmptySprite.getHeight()",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.getHeight()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasScript-nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.makeGame()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.makeGame()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.updateObservers()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet-hasScript-nl.tudelft.jpacman.level.Pellet.getSprite()",
          "source": "nl.tudelft.jpacman.level.Pellet",
          "target": "nl.tudelft.jpacman.level.Pellet.getSprite()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasScript-nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground-hasScript-nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.stop()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.stop()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.Action-hasScript-nl.tudelft.jpacman.ui.Action.doAction()",
          "source": "nl.tudelft.jpacman.ui.Action",
          "target": "nl.tudelft.jpacman.ui.Action.doAction()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite-hasScript-nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException-hasScript-nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getGameFactory()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader-hasScript-nl.tudelft.jpacman.points.PointCalculatorLoader()",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame-hasScript-nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.getPlayers()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.getPlayers()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky-hasScript-nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasScript-nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.getKiller()",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.getKiller()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader-hasScript-nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky-hasScript-nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasScript-nl.tudelft.jpacman.level.Player.isAlive()",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.isAlive()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite-hasScript-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.Sprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasScript-nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasScript-nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.remainingPellets()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasScript-nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore-hasScript-nl.tudelft.jpacman.sprite.SpriteStore()",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory-hasScript-nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasScript-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-hasScript-nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasScript-nl.tudelft.jpacman.sprite.PacManSprites()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap-hasScript-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasScript-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasScript-nl.tudelft.jpacman.ui.ScorePanel(java.util.List)",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasScript-nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasScript-nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory-hasScript-nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "source": "nl.tudelft.jpacman.level.PlayerFactory",
          "target": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasScript-nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasScript-nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasScript-nl.tudelft.jpacman.Launcher.dispose()",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.dispose()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasScript-nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask-hasScript-nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasScript-nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException-hasScript-nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasScript-nl.tudelft.jpacman.game.Game.isInProgress()",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap-hasScript-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasScript-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasScript-nl.tudelft.jpacman.level.Level.startNPCs()",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.startNPCs()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite-hasScript-nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasScript-nl.tudelft.jpacman.board.Direction(int,int)",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction(int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde-hasScript-nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver-hasScript-nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
          "source": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasScript-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)-hasParameter-nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).2",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).1",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)-hasParameter-nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "target": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)-hasParameter-nl.tudelft.jpacman.board.Board.withinBorders(int,int).0",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).0",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).2",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).0",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).1",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)-hasParameter-nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory).0",
          "source": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory)",
          "target": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-hasParameter-nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).3",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).4",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int)-hasParameter-nl.tudelft.jpacman.board.Board.squareAt(int,int).1",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.squareAt(int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).5",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).5",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).1",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).0",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)-hasParameter-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player).0",
          "source": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-hasParameter-nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).0",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).1",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).5",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).5",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-hasParameter-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).1",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).1",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).0",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).1",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)-hasParameter-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).2",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square).0",
          "source": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game).0",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image).0",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite(java.awt.Image).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List).0",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).1",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)-hasParameter-nl.tudelft.jpacman.board.Board.withinBorders(int,int).1",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game).0",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)-hasParameter-nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game).0",
          "source": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square).0",
          "source": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).2",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).0",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)-hasParameter-nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "source": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "target": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).3",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).4",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).2",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)-hasParameter-nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream).0",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)-hasParameter-nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int)-hasParameter-nl.tudelft.jpacman.board.Board.squareAt(int,int).0",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.squareAt(int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)-hasParameter-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String).0",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)-hasParameter-nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent).0",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).3",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).1",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)-hasParameter-nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "source": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "target": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).1",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean).0",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)-hasParameter-nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-hasParameter-nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "source": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])-hasParameter-nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][]).0",
          "source": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "source": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-hasParameter-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).2",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)-hasParameter-nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).3",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "target": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics).0",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).0",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)-hasParameter-nl.tudelft.jpacman.ui.ScorePanel(java.util.List).0",
          "source": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List)",
          "target": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)-hasParameter-nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).2",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-hasParameter-nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).0",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).2",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean)-hasParameter-nl.tudelft.jpacman.level.Player.setAlive(boolean).0",
          "source": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "target": "nl.tudelft.jpacman.level.Player.setAlive(boolean).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)-hasParameter-nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player).0",
          "source": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "target": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)-hasParameter-nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String).0",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).0",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).3",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).0",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).2",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).3",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "source": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)-hasParameter-nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).0",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)-hasParameter-nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).1",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).2",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-hasParameter-nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "source": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).2",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).1",
          "source": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-hasParameter-nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][]).0",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)-hasParameter-nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).1",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)-hasParameter-nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder).0",
          "source": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "target": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)-hasParameter-nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent).0",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).0",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)-hasParameter-nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite).0",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-hasParameter-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).4",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)-hasParameter-nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).1",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "target": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])-hasParameter-nl.tudelft.jpacman.Launcher.main(java.lang.String[]).0",
          "source": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "target": "nl.tudelft.jpacman.Launcher.main(java.lang.String[]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-hasParameter-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).3",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)-hasParameter-nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).2",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "target": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)-hasParameter-nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite).0",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)-hasParameter-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).1",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).4",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)-hasParameter-nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).0",
          "source": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
          "target": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator).0",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).2",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-hasParameter-nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).1",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game).0",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).3",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game).0",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-hasParameter-nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int)-hasParameter-nl.tudelft.jpacman.board.Direction(int,int).0",
          "source": "nl.tudelft.jpacman.board.Direction(int,int)",
          "target": "nl.tudelft.jpacman.board.Direction(int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).3",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)-hasParameter-nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).1",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "target": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)-hasParameter-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor).0",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "source": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)-hasParameter-nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).0",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).1",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator).0",
          "source": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)-hasParameter-nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).1",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)-hasParameter-nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).1",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-hasParameter-nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).2",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)-hasParameter-nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String).0",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)-hasParameter-nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)-hasParameter-nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String).0",
          "source": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String)",
          "target": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)-hasParameter-nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "source": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "target": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)-hasParameter-nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).4",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)-hasParameter-nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map).0",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map)",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).3",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).3",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-hasParameter-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).2",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.addPoints(int)-hasParameter-nl.tudelft.jpacman.level.Player.addPoints(int).0",
          "source": "nl.tudelft.jpacman.level.Player.addPoints(int)",
          "target": "nl.tudelft.jpacman.level.Player.addPoints(int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-hasParameter-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).5",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).5",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)-hasParameter-nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).0",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap)",
          "target": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)-hasParameter-nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).0",
          "source": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).1",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)-hasParameter-nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String).0",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-hasParameter-nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).1",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)-hasParameter-nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).0",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List).0",
          "source": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).0",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)-hasParameter-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).1",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).0",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)-hasParameter-nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).1",
          "source": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory)",
          "target": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).1",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-hasParameter-nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-hasParameter-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).0",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).1",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).0",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)-hasParameter-nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String).0",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent)-hasParameter-nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent).0",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent)",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.keyTyped(java.awt.event.KeyEvent).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)-hasParameter-nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "source": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites)",
          "target": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)-hasParameter-nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])-hasParameter-nl.tudelft.jpacman.level.MapParser.parseMap(char[][]).0",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int)-hasParameter-nl.tudelft.jpacman.board.Direction(int,int).1",
          "source": "nl.tudelft.jpacman.board.Direction(int,int)",
          "target": "nl.tudelft.jpacman.board.Direction(int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)-hasParameter-nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class).0",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)-hasParameter-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).2",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).1",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-hasParameter-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).4",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).4",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)-hasParameter-nl.tudelft.jpacman.board.Unit.squaresAheadOf(int).0",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "target": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).0",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-hasParameter-nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).0",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-hasParameter-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)-hasParameter-nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).1",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-hasParameter-nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.deltaX-type-int",
          "source": "nl.tudelft.jpacman.board.Direction.deltaX",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0-type-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).1-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).1",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.players-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.Level.players",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).0-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).0",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.board-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Board.board",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.lastUpdate-type-long",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.lastUpdate",
          "target": "long",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.EAST-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Direction.EAST",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).3-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).3",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).1-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action).1",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).2-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).2",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.levelMap-type-java.lang.String",
          "source": "nl.tudelft.jpacman.Launcher.levelMap",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.PINKY-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.PINKY",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2-type-boolean",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE-type-int",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.sprites-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.Player.sprites",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.image-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.Pellet.image",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).2-type-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).2",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).1-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).1",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).4-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationFrames-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationFrames",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.value-type-int",
          "source": "nl.tudelft.jpacman.level.Pellet.value",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.ui.ScorePanel(java.util.List).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.npc-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask.npc",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.SPRITE_STORE-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.Launcher.SPRITE_STORE",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).3-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).3",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1-type-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).2-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).2",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).4-type-int",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).4",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).2-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).2",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).0-type-int",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int).1-type-int",
          "source": "nl.tudelft.jpacman.board.Direction(int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.boardPanel-type-nl.tudelft.jpacman.ui.BoardPanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI.boardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).1-type-int",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handler-type-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handler",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.direction-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Unit.direction",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES-type-int",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.addPoints(int).0-type-int",
          "source": "nl.tudelft.jpacman.level.Player.addPoints(int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int).0-type-int",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).1-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).1",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1-type-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).1",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.GHOSTS-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.GHOSTS",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE-type-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.Launcher.withMapFile(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.occupants-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.Square.occupants",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game).0-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game).0",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.DEFAULT_MAP-type-java.lang.String",
          "source": "nl.tudelft.jpacman.Launcher.DEFAULT_MAP",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.level-type-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame.level",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.RED-type-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor.RED",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator).0-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator).0",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER-type-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.mappings-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener.mappings",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0-type-nl.tudelft.jpacman.level.Level$LevelObserver",
          "source": "nl.tudelft.jpacman.level.Level.removeObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game).0-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game).0",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).0-type-char",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).0",
          "target": "char",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).1-type-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).1",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pointCalculator-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).1-type-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board).1",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).0-type-nl.tudelft.jpacman.level.LevelFactory",
          "source": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).0",
          "target": "nl.tudelft.jpacman.level.LevelFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).1-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).1",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map).0-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener(java.util.Map).0",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel.serialVersionUID-type-long",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel.serialVersionUID",
          "target": "long",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.keyMappings-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.keyMappings",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES-type-int",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.pointCalculator-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.level.LevelFactory.pointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).1-type-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.level.MapParser(nl.tudelft.jpacman.level.LevelFactory,nl.tudelft.jpacman.board.BoardFactory).1",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.deltaY-type-int",
          "source": "nl.tudelft.jpacman.board.Direction.deltaY",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).2-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).2",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).0-type-int",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.direction-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.direction",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.sprites-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.board.BoardFactory.sprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION-type-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.pointCalculator-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.game.Game.pointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.inProgress-type-boolean",
          "source": "nl.tudelft.jpacman.game.Game.inProgress",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask(java.util.concurrent.ScheduledExecutorService,nl.tudelft.jpacman.npc.Ghost).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.sprites-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.Ghost.sprites",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).2-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).2",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.parent-type-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.parent",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.pointCalculator-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.pointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).2-type-int",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1-type-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).1-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).1",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).5-type-int",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).5",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.WEST-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Direction.WEST",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.game-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.game",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).3-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).3",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).4-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).4",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).1-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addButton(java.lang.String,nl.tudelft.jpacman.ui.Action).1",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.animating-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.animating",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.background-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground.background",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1-type-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).1",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction(int,int).0-type-int",
          "source": "nl.tudelft.jpacman.board.Direction(int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.moveInterval-type-int",
          "source": "nl.tudelft.jpacman.npc.Ghost.moveInterval",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.sprites-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.sprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean).0-type-boolean",
          "source": "nl.tudelft.jpacman.level.Player.setAlive(boolean).0",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.boardCreator-type-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.level.MapParser.boardCreator",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.sprites-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.level.LevelFactory.sprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0-type-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.intervalVariation-type-int",
          "source": "nl.tudelft.jpacman.npc.Ghost.intervalVariation",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.board-type-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.level.Level.board",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.pacManUI-type-nl.tudelft.jpacman.ui.PacManUI",
          "source": "nl.tudelft.jpacman.Launcher.pacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).1-type-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).1",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2-type-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.square-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.square",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).4-type-int",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).4",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0-type-nl.tudelft.jpacman.level.Level$LevelObserver",
          "source": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver).0",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).3-type-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).3",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1-type-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites).0-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.level.PlayerFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).2-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).2",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.defaultButtons-type-boolean",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.defaultButtons",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor).0-type-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor).0",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.INKY-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.INKY",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator).0-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap(nl.tudelft.jpacman.points.PointCalculator).0",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).0-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).1",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).0-type-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension).0",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean).0-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean).0",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String,java.lang.Throwable).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game).0-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game).0",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.scorePanel-type-nl.tudelft.jpacman.ui.ScorePanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI.scorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.npcs-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.Level.npcs",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.NORTH-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Direction.NORTH",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.inProgress-type-boolean",
          "source": "nl.tudelft.jpacman.level.Level.inProgress",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites).0-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.board.BoardFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.ghostFact-type-nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "source": "nl.tudelft.jpacman.level.LevelFactory.ghostFact",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.deathSprite-type-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.level.Player.deathSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).2-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).2",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).2-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit).2",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.collisions-type-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level.Level.collisions",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).2-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).2",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).1-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction).1",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap-type-java.lang.String",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).0-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).0",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).4-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).4",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).5-type-char",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).5",
          "target": "char",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.alive-type-boolean",
          "source": "nl.tudelft.jpacman.level.Player.alive",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.sprites-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.level.Player.sprites",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.serialVersionUID-type-long",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.serialVersionUID",
          "target": "long",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).1-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).1",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).0-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int).0-type-int",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.playerFactory-type-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.game.GameFactory.playerFactory",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION-type-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).3-type-int",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons-type-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).4-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).4",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.looping-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.looping",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.killer-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.Player.killer",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][]).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][]).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.sprites-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.Ghost.sprites",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).0-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).2-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).2",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game).0-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game).0",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE-type-int",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collisions-type-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collisions",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][]).0-type-char",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][]).0",
          "target": "char",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).0-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.PINK-type-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor.PINK",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL-type-int",
          "source": "nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.SOUTH-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Direction.SOUTH",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).0-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0-type-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.withScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).0",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).0-type-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).0",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.square-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Unit.square",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).1-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[]).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.Launcher.main(java.lang.String[]).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY-type-int",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).3-type-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).3",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.levelCreator-type-nl.tudelft.jpacman.level.LevelFactory",
          "source": "nl.tudelft.jpacman.level.MapParser.levelCreator",
          "target": "nl.tudelft.jpacman.level.LevelFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.current-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.current",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites).0-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory(nl.tudelft.jpacman.sprite.PacManSprites).0",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).1-type-nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "source": "nl.tudelft.jpacman.level.LevelFactory(nl.tudelft.jpacman.sprite.PacManSprites,nl.tudelft.jpacman.npc.ghost.GhostFactory,nl.tudelft.jpacman.points.PointCalculator).1",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost).1",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator).0-type-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions(nl.tudelft.jpacman.points.PointCalculator).0",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startSquares-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.Level.startSquares",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).4-type-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).4",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).5-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List).5",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.CLYDE-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.CLYDE",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0-type-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler(nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).0",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2-type-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler).2",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES-type-int",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.draw(java.awt.Graphics,int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.scoreFormatter-type-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.scoreFormatter",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).1-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square).1",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN-type-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION-type-int",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).1-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit).1",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.neighbours-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Square.neighbours",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.scoreLabels-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.scoreLabels",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.neighbours-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Square.neighbours",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int).1-type-int",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).2-type-boolean",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean).2",
          "target": "boolean",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.PacmanConfigurationException(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory).0-type-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.game.GameFactory(nl.tudelft.jpacman.level.PlayerFactory).0",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node(nl.tudelft.jpacman.board.Direction,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.npc.ghost.Navigation$Node).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.DELAY-type-long",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.DELAY",
          "target": "long",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).1-type-int",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game).0-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game).0",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).0-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).0",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.serialVersionUID-type-long",
          "source": "nl.tudelft.jpacman.ui.PacManUI.serialVersionUID",
          "target": "long",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame.player-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame.player",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0-type-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction).0",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).0-type-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List).0",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder).0-type-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder).0",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.scoreFormatter-type-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.scoreFormatter",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall.background-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall.background",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationDelay-type-int",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationDelay",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).1-type-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction).1",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).3-type-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square).3",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1-type-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit).1",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).3-type-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level.Level(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List,nl.tudelft.jpacman.level.CollisionMap).3",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.observers-type-nl.tudelft.jpacman.level.Level$LevelObserver",
          "source": "nl.tudelft.jpacman.level.Level.observers",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0-type-java.lang.String",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.sprites-type-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.sprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).1-type-int",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean).1",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).0-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).3-type-int",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int).3",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1-type-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter).1",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite).0-type-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite).0",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).4-type-int",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int).4",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.BLINKY-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.BLINKY",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.score-type-int",
          "source": "nl.tudelft.jpacman.level.Player.score",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startSquareIndex-type-int",
          "source": "nl.tudelft.jpacman.level.Level.startSquareIndex",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.game-type-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.Launcher.game",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.ghostIndex-type-int",
          "source": "nl.tudelft.jpacman.level.LevelFactory.ghostIndex",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][]).0-type-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][]).0",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.serialVersionUID-type-long",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.serialVersionUID",
          "target": "long",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)-invokes-nl.tudelft.jpacman.board.Unit()",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.Unit()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)-invokes-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-invokes-nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()-invokes-nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "source": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "target": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.updateObservers()-invokes-nl.tudelft.jpacman.level.Level.remainingPellets()",
          "source": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "target": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.leaveSquare()-invokes-nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "target": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-invokes-nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-invokes-nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)-invokes-nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-invokes-nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)-invokes-nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.level.Level.getBoard()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.level.Level.getBoard()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()-invokes-nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "target": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)-invokes-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)-invokes-nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-invokes-nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)-invokes-nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-invokes-nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "source": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.stop()-invokes-nl.tudelft.jpacman.level.Level.stopNPCs()",
          "source": "nl.tudelft.jpacman.level.Level.stop()",
          "target": "nl.tudelft.jpacman.level.Level.stopNPCs()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-invokes-nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-invokes-nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.game.Game.getLevel()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.game.Game.getLevel()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])-invokes-nl.tudelft.jpacman.board.Board.invariant()",
          "source": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board.invariant()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getSprite()-invokes-nl.tudelft.jpacman.board.Unit.getDirection()",
          "source": "nl.tudelft.jpacman.level.Player.getSprite()",
          "target": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.getOccupants()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-invokes-nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-invokes-nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-invokes-nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-invokes-nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()-invokes-nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "source": "nl.tudelft.jpacman.Launcher.makeGame()",
          "target": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.level.Level.updateObservers()",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.Launcher.getGame()",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.Launcher.getGame()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()-invokes-nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int)-invokes-nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-invokes-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()-invokes-nl.tudelft.jpacman.Launcher.getMapParser()",
          "source": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "target": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()-invokes-nl.tudelft.jpacman.board.Direction.opposite()",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Direction.opposite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()-invokes-nl.tudelft.jpacman.level.Player.isAlive()",
          "source": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "target": "nl.tudelft.jpacman.level.Player.isAlive()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-invokes-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.stop()-invokes-nl.tudelft.jpacman.game.Game.isInProgress()",
          "source": "nl.tudelft.jpacman.game.Game.stop()",
          "target": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)-invokes-nl.tudelft.jpacman.game.Game.getLevel()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "target": "nl.tudelft.jpacman.game.Game.getLevel()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getSprite()-invokes-nl.tudelft.jpacman.level.Player.isAlive()",
          "source": "nl.tudelft.jpacman.level.Player.getSprite()",
          "target": "nl.tudelft.jpacman.level.Player.isAlive()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.levelWon()-invokes-nl.tudelft.jpacman.game.Game.stop()",
          "source": "nl.tudelft.jpacman.game.Game.levelWon()",
          "target": "nl.tudelft.jpacman.game.Game.stop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "source": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Unit.invariant()",
          "source": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit.invariant()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)-invokes-nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)-invokes-nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "source": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "label": "invokes",
          "properties": {
            "weight": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)-invokes-nl.tudelft.jpacman.board.Square()",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.Square()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-invokes-nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.board.Unit.getSprite()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.board.Unit.getSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-invokes-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-invokes-nl.tudelft.jpacman.game.Game.getLevel()",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "nl.tudelft.jpacman.game.Game.getLevel()",
          "label": "invokes",
          "properties": {
            "weight": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-invokes-nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()-invokes-nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()-invokes-nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "target": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()-invokes-nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "target": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)-invokes-nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)-invokes-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.stop()-invokes-nl.tudelft.jpacman.level.Level.stop()",
          "source": "nl.tudelft.jpacman.game.Game.stop()",
          "target": "nl.tudelft.jpacman.level.Level.stop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-invokes-nl.tudelft.jpacman.level.Level.getBoard()",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "nl.tudelft.jpacman.level.Level.getBoard()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-invokes-nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()-invokes-nl.tudelft.jpacman.Launcher.getGameFactory()",
          "source": "nl.tudelft.jpacman.Launcher.makeGame()",
          "target": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.randomMove()-invokes-nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "target": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()-invokes-nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "source": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)-invokes-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-invokes-nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)-invokes-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-invokes-nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-invokes-nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)-invokes-nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "target": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.stop()-invokes-nl.tudelft.jpacman.level.Level.isInProgress()",
          "source": "nl.tudelft.jpacman.level.Level.stop()",
          "target": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.updateObservers()-invokes-nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
          "source": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.level.Level.isInProgress()",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])-invokes-nl.tudelft.jpacman.Launcher.launch()",
          "source": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "target": "nl.tudelft.jpacman.Launcher.launch()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createGround()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createPellet()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-invokes-nl.tudelft.jpacman.ui.PacManUI.start()",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.ui.PacManUI.start()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)-invokes-nl.tudelft.jpacman.level.Level.getBoard()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "target": "nl.tudelft.jpacman.level.Level.getBoard()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()-invokes-nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "source": "nl.tudelft.jpacman.Launcher.makeGame()",
          "target": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.game.Game.getLevel()",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.game.Game.getLevel()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-invokes-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-invokes-nl.tudelft.jpacman.level.Level.start()",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "nl.tudelft.jpacman.level.Level.start()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-invokes-nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-invokes-nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()-invokes-nl.tudelft.jpacman.Launcher.getLevelMap()",
          "source": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "target": "nl.tudelft.jpacman.Launcher.getLevelMap()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-invokes-nl.tudelft.jpacman.level.Pellet.getValue()",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.level.Pellet.getValue()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-invokes-nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)-invokes-nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])-invokes-nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)-invokes-nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "target": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-invokes-nl.tudelft.jpacman.Launcher.getGame()",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.Launcher.getGame()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)-invokes-nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "target": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-invokes-nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-invokes-nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSquare()-invokes-nl.tudelft.jpacman.board.Unit.invariant()",
          "source": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "target": "nl.tudelft.jpacman.board.Unit.invariant()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-invokes-nl.tudelft.jpacman.game.Game.isInProgress()",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-invokes-nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-invokes-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-invokes-nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.start()-invokes-nl.tudelft.jpacman.level.Level.isInProgress()",
          "source": "nl.tudelft.jpacman.level.Level.start()",
          "target": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.refresh()-invokes-nl.tudelft.jpacman.level.Player.isAlive()",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "target": "nl.tudelft.jpacman.level.Player.isAlive()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startNPCs()-invokes-nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "source": "nl.tudelft.jpacman.level.Level.startNPCs()",
          "target": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getMapParser()-invokes-nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "source": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "target": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGhostFactory()-invokes-nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "source": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "target": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.game.Game.isInProgress()",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-invokes-nl.tudelft.jpacman.level.Player.addPoints(int)",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.level.Player.addPoints(int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-invokes-nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()-invokes-nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "source": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "target": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-invokes-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-invokes-nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.levelLost()-invokes-nl.tudelft.jpacman.game.Game.stop()",
          "source": "nl.tudelft.jpacman.game.Game.levelLost()",
          "target": "nl.tudelft.jpacman.game.Game.stop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-invokes-nl.tudelft.jpacman.game.Game.getPlayers()",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.game.Game.getPlayers()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-invokes-nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.invariant()-invokes-nl.tudelft.jpacman.board.Square.getOccupants()",
          "source": "nl.tudelft.jpacman.board.Unit.invariant()",
          "target": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)-invokes-nl.tudelft.jpacman.ui.Action.doAction()",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "target": "nl.tudelft.jpacman.ui.Action.doAction()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getSprite()-invokes-nl.tudelft.jpacman.board.Unit.getDirection()",
          "source": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
          "target": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.stop()-invokes-nl.tudelft.jpacman.game.Game.getLevel()",
          "source": "nl.tudelft.jpacman.game.Game.stop()",
          "target": "nl.tudelft.jpacman.game.Game.getLevel()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.updateObservers()-invokes-nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "source": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "target": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)-invokes-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.start()-invokes-nl.tudelft.jpacman.level.Level.startNPCs()",
          "source": "nl.tudelft.jpacman.level.Level.start()",
          "target": "nl.tudelft.jpacman.level.Level.startNPCs()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.refresh()-invokes-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)-invokes-nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-invokes-nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-invokes-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)-invokes-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()-invokes-nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "source": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-invokes-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getMapParser()-invokes-nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "source": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "target": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)-invokes-nl.tudelft.jpacman.game.Game.getPlayers()",
          "source": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.game.Game.getPlayers()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.updateObservers()-invokes-nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
          "source": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.randomMove()-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()-invokes-nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "target": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getBoardFactory()-invokes-nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "source": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "target": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-invokes-nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-invokes-nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.loadPointCalculator()-invokes-nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "source": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)-invokes-nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "target": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()-invokes-nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "target": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])-invokes-nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "target": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-invokes-nl.tudelft.jpacman.level.Level.remainingPellets()",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-invokes-nl.tudelft.jpacman.Launcher.makeGame()",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.Launcher.makeGame()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.start()-invokes-nl.tudelft.jpacman.level.Level.updateObservers()",
          "source": "nl.tudelft.jpacman.level.Level.start()",
          "target": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextMove()-invokes-nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "source": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "target": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-invokes-nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-invokes-nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Square.getOccupants()",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createWall()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-invokes-nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)-invokes-nl.tudelft.jpacman.board.Unit()",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "target": "nl.tudelft.jpacman.board.Unit()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-invokes-nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)-invokes-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getPlayerFactory()-invokes-nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "source": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "target": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-invokes-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.board.Unit.hasSquare()",
          "source": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-invokes-nl.tudelft.jpacman.board.Square.getOccupants()",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)-invokes-nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
          "target": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)-invokes-nl.tudelft.jpacman.ui.Action.doAction()",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
          "target": "nl.tudelft.jpacman.ui.Action.doAction()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()-invokes-nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "source": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "target": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-invokes-nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-invokes-nl.tudelft.jpacman.board.Board.getHeight()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "nl.tudelft.jpacman.board.Board.getHeight()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-invokes-nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)-invokes-nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)-invokes-nl.tudelft.jpacman.board.Unit.getDirection()",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "target": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])-invokes-nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "target": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)-invokes-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()-invokes-nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "target": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-invokes-nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGameFactory()-invokes-nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "source": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "target": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites()-invokes-nl.tudelft.jpacman.sprite.SpriteStore()",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites()",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)-invokes-nl.tudelft.jpacman.board.Square()",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "nl.tudelft.jpacman.board.Square()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.leaveSquare()-invokes-nl.tudelft.jpacman.board.Unit.invariant()",
          "source": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "target": "nl.tudelft.jpacman.board.Unit.invariant()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-invokes-nl.tudelft.jpacman.board.Board.getWidth()",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "nl.tudelft.jpacman.board.Board.getWidth()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()-invokes-nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-invokes-nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)-invokes-nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Board,java.awt.Graphics,java.awt.Dimension)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)-invokes-nl.tudelft.jpacman.board.Unit()",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "target": "nl.tudelft.jpacman.board.Unit()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()-invokes-nl.tudelft.jpacman.board.Unit.getSquare()",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
          "target": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.board.Square.getSprite()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.board.Square.getSprite()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()-invokes-nl.tudelft.jpacman.Launcher.makeLevel()",
          "source": "nl.tudelft.jpacman.Launcher.makeGame()",
          "target": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()-invokes-nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)-invokes-nl.tudelft.jpacman.board.Square.getOccupants()",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
          "target": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.randomMove()-invokes-nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "source": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "target": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)-invokes-nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "target": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-invokes-nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft-contains-nl.tudelft.jpacman",
          "source": "nl.tudelft",
          "target": "nl.tudelft.jpacman",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-contains-nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-contains-nl.tudelft.jpacman.sprite.EmptySprite",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.Pinky",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.Inky",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.PacKeyListener",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc-contains-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-contains-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-contains-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-contains-nl.tudelft.jpacman.level.Level$LevelObserver",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-contains-nl.tudelft.jpacman.points.PointCalculatorLoader",
          "source": "nl.tudelft.jpacman.points",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-contains-nl.tudelft.jpacman.game.GameFactory",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.game.GameFactory",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-contains-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.game",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.game",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-contains-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.Launcher",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.Launcher",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.board",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.BoardPanel",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.BoardPanel",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.Clyde",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.Blinky",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl-contains-nl.tudelft",
          "source": "nl",
          "target": "nl.tudelft",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.points",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-contains-nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-contains-nl.tudelft.jpacman.points.DefaultPointCalculator",
          "source": "nl.tudelft.jpacman.points",
          "target": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-contains-nl.tudelft.jpacman.board.BoardFactory$Ground",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.level",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.Level$LevelObserver",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-contains-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.ScorePanel",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.ScorePanel",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.PlayerCollisions",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.BoardFactory$Ground",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.npc",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.npc",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation-contains-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-contains-nl.tudelft.jpacman.ui",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.ui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc-contains-nl.tudelft.jpacman.npc.ghost",
          "source": "nl.tudelft.jpacman.npc",
          "target": "nl.tudelft.jpacman.npc.ghost",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.BoardFactory$Wall",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.ButtonPanel",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-contains-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.points",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-contains-nl.tudelft.jpacman.sprite.SpriteStore",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.MapParser",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.MapParser",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.CollisionInteractionMap",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.GhostColor",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.Navigation",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.LevelFactory",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.LevelFactory",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-contains-nl.tudelft.jpacman.board.Direction",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.board.Direction",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-contains-nl.tudelft.jpacman.game.SinglePlayerGame",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-contains-nl.tudelft.jpacman.sprite.ImageSprite",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-contains-nl.tudelft.jpacman.sprite.PacManSprites",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-contains-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.Action",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.Action",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-contains-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-contains-nl.tudelft.jpacman.board.BoardFactory$Wall",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-contains-nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-contains-nl.tudelft.jpacman.ui.PacManUI",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.ui.PacManUI",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.current",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.current",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.ghostIndex",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.ghostIndex",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask-hasVariable-nl.tudelft.jpacman.level.Level$NpcMoveTask.npc",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask.npc",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.startSquareIndex",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.startSquareIndex",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasVariable-nl.tudelft.jpacman.ui.PacManUI.boardPanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI.boardPanel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.animationDelay",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationDelay",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasVariable-nl.tudelft.jpacman.board.Direction.EAST",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.EAST",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasVariable-nl.tudelft.jpacman.ui.ScorePanel.scoreLabels",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.scoreLabels",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.moveLock",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.moveLock",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board-hasVariable-nl.tudelft.jpacman.board.Board.board",
          "source": "nl.tudelft.jpacman.board.Board",
          "target": "nl.tudelft.jpacman.board.Board.board",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-hasVariable-nl.tudelft.jpacman.level.CollisionInteractionMap.handlers",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap.handlers",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory-hasVariable-nl.tudelft.jpacman.game.GameFactory.playerFactory",
          "source": "nl.tudelft.jpacman.game.GameFactory",
          "target": "nl.tudelft.jpacman.game.GameFactory.playerFactory",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.npcs",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.npcs",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasVariable-nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasVariable-nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasVariable-nl.tudelft.jpacman.level.Player.alive",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.alive",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap-hasVariable-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collisions",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collisions",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory-hasVariable-nl.tudelft.jpacman.board.BoardFactory.sprites",
          "source": "nl.tudelft.jpacman.board.BoardFactory",
          "target": "nl.tudelft.jpacman.board.BoardFactory.sprites",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasVariable-nl.tudelft.jpacman.board.Direction.SOUTH",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.SOUTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasVariable-nl.tudelft.jpacman.game.Game.progressLock",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.progressLock",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasVariable-nl.tudelft.jpacman.board.Square.neighbours",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.neighbours",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky-hasVariable-nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky.INTERVAL_VARIATION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky-hasVariable-nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasVariable-nl.tudelft.jpacman.ui.PacManUiBuilder.buttons",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.buttons",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap-hasVariable-nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.pointCalculator",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "target": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.pointCalculator",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasVariable-nl.tudelft.jpacman.Launcher.levelMap",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.levelMap",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask-hasVariable-nl.tudelft.jpacman.level.Level$NpcMoveTask.service",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask.service",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde-hasVariable-nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde.MOVE_INTERVAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasVariable-nl.tudelft.jpacman.Launcher.game",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.game",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasVariable-nl.tudelft.jpacman.Launcher.DEFAULT_MAP",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.DEFAULT_MAP",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor-hasVariable-nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasVariable-nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasVariable-nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasVariable-nl.tudelft.jpacman.board.Unit.direction",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.direction",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel-hasVariable-nl.tudelft.jpacman.ui.ButtonPanel.serialVersionUID",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel.serialVersionUID",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasVariable-nl.tudelft.jpacman.ui.PacManUiBuilder.keyMappings",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.keyMappings",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasVariable-nl.tudelft.jpacman.ui.BoardPanel.game",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.game",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasVariable-nl.tudelft.jpacman.level.MapParser.boardCreator",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.boardCreator",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.PINKY",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.PINKY",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor-hasVariable-nl.tudelft.jpacman.npc.ghost.GhostColor.RED",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor.RED",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde-hasVariable-nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.GHOSTS",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.GHOSTS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet-hasVariable-nl.tudelft.jpacman.level.Pellet.image",
          "source": "nl.tudelft.jpacman.level.Pellet",
          "target": "nl.tudelft.jpacman.level.Pellet.image",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.players",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.players",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasVariable-nl.tudelft.jpacman.npc.Ghost.sprites",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.sprites",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasVariable-nl.tudelft.jpacman.ui.PacManUiBuilder.scoreFormatter",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.scoreFormatter",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall-hasVariable-nl.tudelft.jpacman.board.BoardFactory$Wall.background",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall.background",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.ghostFact",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.ghostFact",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasVariable-nl.tudelft.jpacman.ui.PacManUI.serialVersionUID",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI.serialVersionUID",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-hasVariable-nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasVariable-nl.tudelft.jpacman.ui.PacManUiBuilder.defaultButtons",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.defaultButtons",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.animationFrames",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.animationFrames",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasVariable-nl.tudelft.jpacman.npc.ghost.Navigation$Node.parent",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.parent",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasVariable-nl.tudelft.jpacman.game.Game.inProgress",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.inProgress",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost-hasVariable-nl.tudelft.jpacman.level.LevelFactory$RandomGhost.DELAY",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost.DELAY",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame-hasVariable-nl.tudelft.jpacman.game.SinglePlayerGame.player",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame.player",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame-hasVariable-nl.tudelft.jpacman.game.SinglePlayerGame.level",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame.level",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.inProgress",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.inProgress",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.looping",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.looping",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasVariable-nl.tudelft.jpacman.level.Player.score",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.score",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasVariable-nl.tudelft.jpacman.board.Direction.deltaY",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.deltaY",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde-hasVariable-nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde.INTERVAL_VARIATION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasVariable-nl.tudelft.jpacman.ui.ScorePanel.scoreFormatter",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.scoreFormatter",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory-hasVariable-nl.tudelft.jpacman.level.PlayerFactory.sprites",
          "source": "nl.tudelft.jpacman.level.PlayerFactory",
          "target": "nl.tudelft.jpacman.level.PlayerFactory.sprites",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky-hasVariable-nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky.INTERVAL_VARIATION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasVariable-nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.SQUARE_SIZE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasVariable-nl.tudelft.jpacman.npc.Ghost.intervalVariation",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.intervalVariation",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square-hasVariable-nl.tudelft.jpacman.board.Square.occupants",
          "source": "nl.tudelft.jpacman.board.Square",
          "target": "nl.tudelft.jpacman.board.Square.occupants",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky-hasVariable-nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky.MOVE_INTERVAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasVariable-nl.tudelft.jpacman.Launcher.pacManUI",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.pacManUI",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-hasVariable-nl.tudelft.jpacman.sprite.ImageSprite.image",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite.image",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground-hasVariable-nl.tudelft.jpacman.board.BoardFactory$Ground.background",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground.background",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler-hasVariable-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handler",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-hasVariable-nl.tudelft.jpacman.game.Game.pointCalculator",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.game.Game.pointCalculator",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasVariable-nl.tudelft.jpacman.ui.PacManUI.scorePanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI.scorePanel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasVariable-nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore-hasVariable-nl.tudelft.jpacman.sprite.SpriteStore.spriteMap",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore.spriteMap",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-hasVariable-nl.tudelft.jpacman.level.PlayerCollisions.pointCalculator",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions.pointCalculator",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasVariable-nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.startStopLock",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.startStopLock",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-hasVariable-nl.tudelft.jpacman.npc.Ghost.moveInterval",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.npc.Ghost.moveInterval",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.board",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.board",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader-hasVariable-nl.tudelft.jpacman.points.PointCalculatorLoader.clazz",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader.clazz",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.BLINKY",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.BLINKY",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener-hasVariable-nl.tudelft.jpacman.ui.PacKeyListener.mappings",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener.mappings",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasVariable-nl.tudelft.jpacman.npc.ghost.Navigation$Node.square",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.square",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher-hasVariable-nl.tudelft.jpacman.Launcher.SPRITE_STORE",
          "source": "nl.tudelft.jpacman.Launcher",
          "target": "nl.tudelft.jpacman.Launcher.SPRITE_STORE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasVariable-nl.tudelft.jpacman.board.Direction.deltaX",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.deltaX",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory-hasVariable-nl.tudelft.jpacman.npc.ghost.GhostFactory.sprites",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory.sprites",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder-hasVariable-nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI-hasVariable-nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL",
          "source": "nl.tudelft.jpacman.ui.PacManUI",
          "target": "nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.lastUpdate",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.lastUpdate",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasVariable-nl.tudelft.jpacman.board.Direction.NORTH",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.NORTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasVariable-nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.DEFAULT_SCORE_FORMATTER",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node-hasVariable-nl.tudelft.jpacman.npc.ghost.Navigation$Node.direction",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.direction",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky-hasVariable-nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky.MOVE_INTERVAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit-hasVariable-nl.tudelft.jpacman.board.Unit.square",
          "source": "nl.tudelft.jpacman.board.Unit",
          "target": "nl.tudelft.jpacman.board.Unit.square",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.startSquares",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.startSquares",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet-hasVariable-nl.tudelft.jpacman.level.Pellet.value",
          "source": "nl.tudelft.jpacman.level.Pellet",
          "target": "nl.tudelft.jpacman.level.Pellet.value",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor-hasVariable-nl.tudelft.jpacman.npc.ghost.GhostColor.PINK",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor.PINK",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.collisions",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.collisions",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.INKY",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.INKY",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.sprites",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.sprites",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasVariable-nl.tudelft.jpacman.ui.BoardPanel.BACKGROUND_COLOR",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.BACKGROUND_COLOR",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel-hasVariable-nl.tudelft.jpacman.ui.BoardPanel.serialVersionUID",
          "source": "nl.tudelft.jpacman.ui.BoardPanel",
          "target": "nl.tudelft.jpacman.ui.BoardPanel.serialVersionUID",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level-hasVariable-nl.tudelft.jpacman.level.Level.observers",
          "source": "nl.tudelft.jpacman.level.Level",
          "target": "nl.tudelft.jpacman.level.Level.observers",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser-hasVariable-nl.tudelft.jpacman.level.MapParser.levelCreator",
          "source": "nl.tudelft.jpacman.level.MapParser",
          "target": "nl.tudelft.jpacman.level.MapParser.levelCreator",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.pointCalculator",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.pointCalculator",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasVariable-nl.tudelft.jpacman.level.Player.sprites",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.sprites",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostColor-hasVariable-nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostColor",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasVariable-nl.tudelft.jpacman.level.Player.killer",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.killer",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel-hasVariable-nl.tudelft.jpacman.ui.ScorePanel.serialVersionUID",
          "source": "nl.tudelft.jpacman.ui.ScorePanel",
          "target": "nl.tudelft.jpacman.ui.ScorePanel.serialVersionUID",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-hasVariable-nl.tudelft.jpacman.sprite.AnimatedSprite.animating",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite.animating",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-hasVariable-nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.MOVE_INTERVAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-hasVariable-nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-hasVariable-nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky.INTERVAL_VARIATION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory-hasVariable-nl.tudelft.jpacman.level.LevelFactory.CLYDE",
          "source": "nl.tudelft.jpacman.level.LevelFactory",
          "target": "nl.tudelft.jpacman.level.LevelFactory.CLYDE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction-hasVariable-nl.tudelft.jpacman.board.Direction.WEST",
          "source": "nl.tudelft.jpacman.board.Direction",
          "target": "nl.tudelft.jpacman.board.Direction.WEST",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-hasVariable-nl.tudelft.jpacman.level.Player.deathSprite",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.level.Player.deathSprite",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet-specializes-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.Pellet",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame-specializes-nl.tudelft.jpacman.game.Game",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "target": "nl.tudelft.jpacman.game.Game",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky-specializes-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall-specializes-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game-specializes-nl.tudelft.jpacman.level.Level$LevelObserver",
          "source": "nl.tudelft.jpacman.game.Game",
          "target": "nl.tudelft.jpacman.level.Level$LevelObserver",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites-specializes-nl.tudelft.jpacman.sprite.SpriteStore",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites",
          "target": "nl.tudelft.jpacman.sprite.SpriteStore",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky-specializes-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost-specializes-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player-specializes-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.level.Player",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions-specializes-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground-specializes-nl.tudelft.jpacman.board.Square",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "target": "nl.tudelft.jpacman.board.Square",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler-specializes-nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite-specializes-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite-specializes-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap-specializes-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite-specializes-nl.tudelft.jpacman.sprite.Sprite",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "target": "nl.tudelft.jpacman.sprite.Sprite",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky-specializes-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator-specializes-nl.tudelft.jpacman.points.PointCalculator",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator",
          "target": "nl.tudelft.jpacman.points.PointCalculator",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost-specializes-nl.tudelft.jpacman.board.Unit",
          "source": "nl.tudelft.jpacman.npc.Ghost",
          "target": "nl.tudelft.jpacman.board.Unit",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde-specializes-nl.tudelft.jpacman.npc.Ghost",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "target": "nl.tudelft.jpacman.npc.Ghost",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap-specializes-nl.tudelft.jpacman.level.CollisionMap",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap",
          "target": "nl.tudelft.jpacman.level.CollisionMap",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)-instantiates-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-instantiates-nl.tudelft.jpacman.level.Level",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.Level",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()-instantiates-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()-instantiates-nl.tudelft.jpacman.npc.ghost.Pinky",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "target": "nl.tudelft.jpacman.npc.ghost.Pinky",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-instantiates-nl.tudelft.jpacman.ui.PacManUiBuilder",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-instantiates-nl.tudelft.jpacman.game.SinglePlayerGame",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "nl.tudelft.jpacman.game.SinglePlayerGame",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-instantiates-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGhostFactory()-instantiates-nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "source": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "target": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createGhost()-instantiates-nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
          "target": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startNPCs()-instantiates-nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "source": "nl.tudelft.jpacman.level.Level.startNPCs()",
          "target": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()-instantiates-nl.tudelft.jpacman.level.Player",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "target": "nl.tudelft.jpacman.level.Player",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)-instantiates-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-instantiates-nl.tudelft.jpacman.ui.BoardPanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.BoardPanel",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()-instantiates-nl.tudelft.jpacman.level.CollisionInteractionMap",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.defaultCollisions()",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-instantiates-nl.tudelft.jpacman.sprite.EmptySprite",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)-instantiates-nl.tudelft.jpacman.sprite.ImageSprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()-instantiates-nl.tudelft.jpacman.level.LevelFactory",
          "source": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "target": "nl.tudelft.jpacman.level.LevelFactory",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()-instantiates-nl.tudelft.jpacman.npc.ghost.Blinky",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "target": "nl.tudelft.jpacman.npc.ghost.Blinky",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createWall()-instantiates-nl.tudelft.jpacman.board.BoardFactory$Wall",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Wall",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getMapParser()-instantiates-nl.tudelft.jpacman.level.MapParser",
          "source": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "target": "nl.tudelft.jpacman.level.MapParser",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createGround()-instantiates-nl.tudelft.jpacman.board.BoardFactory$Ground",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "target": "nl.tudelft.jpacman.board.BoardFactory$Ground",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-instantiates-nl.tudelft.jpacman.ui.ButtonPanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.ButtonPanel",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createPellet()-instantiates-nl.tudelft.jpacman.level.Pellet",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "target": "nl.tudelft.jpacman.level.Pellet",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)-instantiates-nl.tudelft.jpacman.sprite.EmptySprite",
          "source": "nl.tudelft.jpacman.sprite.EmptySprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.EmptySprite",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)-instantiates-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-instantiates-nl.tudelft.jpacman.ui.ScorePanel",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.ScorePanel",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-instantiates-nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGameFactory()-instantiates-nl.tudelft.jpacman.game.GameFactory",
          "source": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "target": "nl.tudelft.jpacman.game.GameFactory",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-instantiates-nl.tudelft.jpacman.board.Board",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "nl.tudelft.jpacman.board.Board",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()-instantiates-nl.tudelft.jpacman.npc.ghost.Inky",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "target": "nl.tudelft.jpacman.npc.ghost.Inky",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)-instantiates-nl.tudelft.jpacman.PacmanConfigurationException",
          "source": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "target": "nl.tudelft.jpacman.PacmanConfigurationException",
          "label": "instantiates",
          "properties": {
            "weight": 4,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])-instantiates-nl.tudelft.jpacman.Launcher",
          "source": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "target": "nl.tudelft.jpacman.Launcher",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getPlayerFactory()-instantiates-nl.tudelft.jpacman.level.PlayerFactory",
          "source": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "target": "nl.tudelft.jpacman.level.PlayerFactory",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()-instantiates-nl.tudelft.jpacman.npc.ghost.Clyde",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "target": "nl.tudelft.jpacman.npc.ghost.Clyde",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-instantiates-nl.tudelft.jpacman.level.PlayerCollisions",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "nl.tudelft.jpacman.level.PlayerCollisions",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)-instantiates-nl.tudelft.jpacman.ui.PacManUI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "target": "nl.tudelft.jpacman.ui.PacManUI",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.loadPointCalculator()-instantiates-nl.tudelft.jpacman.points.PointCalculatorLoader",
          "source": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "target": "nl.tudelft.jpacman.points.PointCalculatorLoader",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getBoardFactory()-instantiates-nl.tudelft.jpacman.board.BoardFactory",
          "source": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "target": "nl.tudelft.jpacman.board.BoardFactory",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-instantiates-nl.tudelft.jpacman.ui.PacKeyListener",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "nl.tudelft.jpacman.ui.PacKeyListener",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-instantiates-nl.tudelft.jpacman.sprite.AnimatedSprite",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "nl.tudelft.jpacman.sprite.AnimatedSprite",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-instantiates-nl.tudelft.jpacman.sprite.ImageSprite",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "nl.tudelft.jpacman.sprite.ImageSprite",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-instantiates-nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "layer:UI-allowedDependency-layer:Logic",
          "source": "layer:UI",
          "target": "layer:Logic",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:Logic-allowedDependency-layer:Data",
          "source": "layer:Logic",
          "target": "layer:Data",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:UI-allowedDependency-layer:Logic",
          "source": "layer:UI",
          "target": "layer:Logic",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:Logic-allowedDependency-layer:Data",
          "source": "layer:Logic",
          "target": "layer:Data",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:UI-allowedDependency-layer:Logic",
          "source": "layer:UI",
          "target": "layer:Logic",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:Logic-allowedDependency-layer:Data",
          "source": "layer:Logic",
          "target": "layer:Data",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game(nl.tudelft.jpacman.points.PointCalculator)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.getDeltaY()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.getBoard()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.getBoard()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.getHeight()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Board.getHeight()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.PointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.stopNPCs()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.stopNPCs()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.PointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.getLevel()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.getLevel()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.invariant()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Board.invariant()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getDirection()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.getDirection()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getOccupants()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.getOccupants()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.Sprite.split(int,int,int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.PointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite.Sprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGame()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getGame()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.opposite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Direction.opposite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.isAlive()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Player.isAlive()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.hasSquare()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.hasSquare()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.isInProgress()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.isInProgress()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.getSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.setScoreFormatter(nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getInterval()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.getWidth()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.Sprite.getWidth()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.getWidth()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Board.getWidth()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isInProgress()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.isInProgress()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level$LevelObserver.levelLost()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.start()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUI.start()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelMap()-implements-layer:Data",
          "source": "nl.tudelft.jpacman.Launcher.getLevelMap()",
          "target": "layer:Data",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet.getValue()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Pellet.getValue()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Direction.getDeltaX()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSpriteStore()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.addPoints(int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Player.addPoints(int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean,boolean)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.addHandler(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.getPlayers()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.getPlayers()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.Action.doAction()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.Action.doAction()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter.format(nl.tudelft.jpacman.level.Player)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.getInheritance(java.lang.Class)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level$LevelObserver.levelWon()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.Sprite.getHeight()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.Sprite.getHeight()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.Ghost.nextAiMove()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore()-implements-layer:Data",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore()",
          "target": "layer:Data",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.getSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.getSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Pellet(int,nl.tudelft.jpacman.sprite.Sprite)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.Ghost(java.util.Map,int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.restart()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Player(java.util.Map,nl.tudelft.jpacman.sprite.AnimatedSprite)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Board(nl.tudelft.jpacman.board.Square[][])",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.getSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.invariant()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.invariant()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap$InverseCollisionHandler.handleCollision(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.getSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Player.getSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Ground(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.BoardFactory$Wall(nl.tudelft.jpacman.sprite.Sprite)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.startNPCs()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.startNPCs()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getWidth()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.BoardPanel(nl.tudelft.jpacman.game.Game)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Board.withinBorders(int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.stop()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.stop()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.DefaultPlayerInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGhostFactory()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getBoardFactory()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getPlayerFactory()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite(nl.tudelft.jpacman.sprite.Sprite[],int,boolean)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,boolean,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUI(nl.tudelft.jpacman.game.Game,java.util.Map,java.util.Map,nl.tudelft.jpacman.ui.ScorePanel$ScoreFormatter)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.ButtonPanel(java.util.Map,javax.swing.JFrame)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.ScorePanel.refresh()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.getMostSpecificClass(java.util.Map,java.lang.Class)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.getHeight()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.nextMove()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.AnimatedSprite.split(int,int,int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Clyde(java.util.Map)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.LevelFactory$RandomGhost(java.util.Map)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Inky(java.util.Map)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Blinky(java.util.Map)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Pinky(java.util.Map)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Player.setAlive(boolean)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Player.setAlive(boolean)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.leaveSquare()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.getSquare()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.getSquare()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Board.squareAt(int,int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.stop()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.stop()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getGameFactory()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getGameFactory()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.onCollision(java.lang.Class,java.lang.Class,nl.tudelft.jpacman.level.CollisionInteractionMap$CollisionHandler)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.CollisionInteractionMap.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Square.invariant(nl.tudelft.jpacman.board.Square)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.Ghost.randomMove()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.Ghost.randomMove()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.registerPlayer(nl.tudelft.jpacman.level.Player)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.remainingPellets()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.remainingPellets()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnitInBoard(java.lang.Class,nl.tudelft.jpacman.board.Board)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.levelWon()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.levelWon()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.levelLost()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.levelLost()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.loadPointCalculator()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.pelletColliding(nl.tudelft.jpacman.level.Pellet,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.SinglePlayerGame(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createWall()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board.BoardFactory.createGround()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.LevelFactory.createPellet()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.updateObservers()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.updateObservers()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getLevelFactory()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level.start()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level.start()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.getMapParser()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.getMapParser()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game.Game.start()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game.Game.start()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)-implements-layer:UI",
          "source": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.util.List)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.io.InputStream)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.level.MapParser.parseMap(java.lang.String)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeLevel()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.makeLevel()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.makeGame()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.Launcher.makeGame()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.launch()-implements-layer:UI",
          "source": "nl.tudelft.jpacman.Launcher.launch()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])-implements-layer:UI",
          "source": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-implements-layer:Logic",
          "source": "nl.tudelft.jpacman",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft-implements-layer:Logic",
          "source": "nl.tudelft",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl-implements-layer:Logic",
          "source": "nl",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.npc",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.sprite-implements-layer:UI",
          "source": "nl.tudelft.jpacman.sprite",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.game",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-implements-layer:Logic",
          "source": "nl.tudelft.jpacman.points",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.board package and the nl.tudelft.jpacman.sprite package interact through their dependency on sprite management for creating game elements like ground and walls. The board package uses methods from the sprite package to load and manage visual representations of these elements, ensuring that the game's graphical components are correctly displayed."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.level package and the nl.tudelft.jpacman.sprite package interact through sprite management, where the level package uses sprites for visual representation of game elements like Pac-Man, ghosts, and pellets. This interaction is essential for rendering these elements on the screen and handling their graphical properties and animations, thereby enhancing the visual appeal and gameplay experience of the Pac-Man game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.ui package and the nl.tudelft.jpacman.sprite package in the jpacman project are interconnected through their dependency on sprite management for rendering game elements. The ui package utilizes sprite objects to draw characters and objects on the game board, while the sprite package provides the necessary classes and interfaces for creating, managing, and drawing these sprites efficiently."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.npc.ghost package and the nl.tudelft.jpacman.sprite package interact through a dependency on sprite management, where the ghost classes rely on the sprite factory to obtain specific sprites for their visual representation in the game. This design ensures that the ghost behavior is decoupled from the details of how they are visually rendered, promoting modularity and easier maintenance of both the ghost logic and the graphical elements."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-dependsOn-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.points",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.game` package and the `nl.tudelft.jpacman.points` package interact to manage player movement and scoring in a Pac-Man game. The `Game` class in the `nl.tudelft.jpacman.game` package invokes methods from the `PointCalculator` interface in the `nl.tudelft.jpacman.points` package to update the player's score based on actions such as consuming pellets, ensuring that the game logic and scoring are decoupled and maintainable."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.game` package and the `nl.tudelft.jpacman.level` package are interconnected through their shared responsibility for managing the game state and interactions within Pac-Man. The `Game` class in the `game` package depends on classes from the `level` package to handle player movement, collision detection, and level progression, ensuring a cohesive and functional game experience."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.game",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.game",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.ui` package and the `nl.tudelft.jpacman.game` package interact through a dependency that facilitates the rendering and user interface management of a Pac-Man game. The UI package relies on the game logic provided by the game package to retrieve information about the current level, players, and other game state details, which it then uses to update the graphical representation of the game in real-time."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.game",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.game",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package and the `nl.tudelft.jpacman.game` package are interconnected through their shared responsibility for managing the game logic of a Pac-Man implementation. The `nl.tudelft.jpacman` package handles high-level operations such as launching the game and configuring it, while the `nl.tudelft.jpacman.game` package focuses on the core mechanics of the game, including player movement, level management, and scoring. This interaction ensures that the game can be initialized, configured, and played according to the rules defined in the game logic."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.level package depends on the nl.tudelft.jpacman.board package to manage game entities and their interactions within a grid-based environment. This dependency facilitates operations such as moving units, registering players, and counting remaining pellets by leveraging the board's structure and unit management capabilities."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.ui` package is responsible for handling user interface interactions and rendering the game board, while the `nl.tudelft.jpacman.board` package manages the game logic and data structures representing the board and its elements. The interaction between these packages is primarily through the `BoardPanel` class in the UI package, which uses methods from the `Board` class in the board package to retrieve information about the game state (such as the dimensions of the board and the contents of each square) and render it visually. This design allows for a clear separation of concerns, with the UI handling presentation and user input, and the board handling the underlying game logic and data."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.npc.ghost package and the nl.tudelft.jpacman.board package interact through dependency, where the ghost package utilizes classes from the board package to navigate and interact within the game environment. This interaction is essential for the movement and behavior of ghosts in Pac-Man, enabling them to move around the board, detect player positions, and perform other actions necessary for gameplay."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.npc",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.npc` package and the `nl.tudelft.jpacman.board` package interact to manage the behavior and interactions within a Pacman game, specifically focusing on non-player characters (NPCs) like ghosts. The `nl.tudelft.jpacman.npc.Ghost` class depends on the `nl.tudelft.jpacman.board.Unit` class for movement logic, utilizing methods to check accessibility of squares and retrieve current positions, thereby enabling the dynamic behavior of ghosts within the game environment."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.points",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.level` package manages game logic and interactions between entities like players, ghosts, and pellets, while the `nl.tudelft.jpacman.points` package handles scoring based on these interactions. The packages are interconnected through methods that invoke point calculation logic when specific events occur, such as a player consuming a pellet or colliding with a ghost, thus ensuring that points are correctly awarded or deducted in response to gameplay actions."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman.points",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.points` package is responsible for managing point calculations based on player interactions within a Pacman game, such as consuming pellets. It interacts with the `nl.tudelft.jpacman.level` package to handle these interactions by invoking methods that retrieve the value of pellets and update the player's score accordingly."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.points",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package and the `nl.tudelft.jpacman.points` package are interconnected through their dependency on each other, specifically for handling point calculations in a Pac-Man game. The `Launcher` class in the `nl.tudelft.jpacman` package uses the `PointCalculatorLoader` class from the `nl.tudelft.jpacman.points` package to dynamically load and utilize a `PointCalculator` instance, which manages how points are awarded or deducted based on player interactions with the game environment. This interaction ensures that the game logic for scoring is modular and can be easily extended or modified without altering the core game mechanics."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.ui` package is responsible for rendering and handling user interactions in a Pacman game, while the `nl.tudelft.jpacman.level` package manages the game logic, including collision detection and player movement. The two packages interact by allowing the UI to display the current state of the game as managed by the level package, such as updating the board and score based on player actions and collisions."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.npc.ghost",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.npc.ghost",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.level` package and the `nl.tudelft.jpacman.npc.ghost` package interact through the creation and management of non-player characters (NPCs), specifically ghosts, within a Pacman game. The `LevelFactory` class in the `level` package uses methods from the `GhostFactory` class in the `npc.ghost` package to instantiate different types of ghosts such as Blinky, Clyde, Inky, and Pinky, thereby establishing their presence and behavior within the game level."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.npc",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.npc",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.level` package and the `nl.tudelft.jpacman.npc` package interact to manage the movement and behavior of non-player characters (NPCs) in a Pacman game. The `Level` class in the `level` package uses instances of the `Ghost` class from the `npc` package to create tasks for moving ghosts, which are then executed at regular intervals to simulate their movement through the game level."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package and the `nl.tudelft.jpacman.level` package are interconnected through their dependency, where the former relies on the latter for creating game levels. The `Launcher` class within `nl.tudelft.jpacman` invokes methods from `MapParser` in `nl.tudelft.jpacman.level` to parse a textual representation of a Pac-Man level into an actual game level object, thereby establishing their functional relationship."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.ui",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.ui",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package contains the core game logic and entities for Pac-Man, while the `nl.tudelft.jpacman.ui` package handles the graphical user interface components. The packages interact by allowing the UI to display and control the game state managed in the core logic, ensuring that the visual representation accurately reflects the game's current state and player actions."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-dependsOn-nl.tudelft.jpacman.npc",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.npc.ghost` package contains classes that extend the `nl.tudelft.jpacman.npc.Ghost` class, forming an inheritance hierarchy where each ghost type (Blinky, Clyde, Inky, Pinky) inherits common behavior and properties from the base `Ghost` class. This design promotes code reuse and encapsulates ghost-specific logic within their respective classes while maintaining a clear separation of concerns between different types of NPCs in the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.board-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.board",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.board package and the nl.tudelft.jpacman.sprite package interact through a dependency that facilitates the creation and management of game elements' visual representations. The board package relies on the sprite package to load and manage sprites for ground and wall squares, ensuring that the game's visual aspects are correctly rendered without hardcoding specific sprite details within the board logic."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.level package and the nl.tudelft.jpacman.sprite package interact through sprite management, where the level package uses sprites for visual representation of game elements like Pac-Man, ghosts, and pellets. This interaction is designed to separate concerns by managing game logic in the level package and handling graphical representations in the sprite package, promoting a clean separation of responsibilities within the PacMan implementation."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.ui package and the nl.tudelft.jpacman.sprite package interact through the rendering of game elements on the user interface. The ui package, particularly the BoardPanel class, relies on the sprite package to draw characters and objects on the game board by invoking methods from the Sprite interface and its implementations like ImageSprite and AnimatedSprite. This interaction ensures that the visual representation of the Pacman game is accurately displayed to the player."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-dependsOn-nl.tudelft.jpacman.sprite",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.sprite",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.npc.ghost package and the nl.tudelft.jpacman.sprite package interact through a dependency that facilitates the creation and management of ghost sprites in the Pacman game. The GhostFactory class within the ghost package relies on methods from the PacManSprites class in the sprite package to retrieve specific sprite images for different colored ghosts, thereby enabling the visual representation and behavior of the ghosts in the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-dependsOn-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.points",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.game` package and the `nl.tudelft.jpacman.points` package in the jpacman project are interconnected through their dependency on each other, specifically in managing game events that affect player points. The `Game` class invokes methods from the `PointCalculator` class to update player scores based on actions such as eating pellets or colliding with ghosts, thereby ensuring that the game logic and scoring system are tightly integrated and dynamically managed."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.game-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman.game",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.game` package and the `nl.tudelft.jpacman.level` package in the jpacman project are interconnected through their dependency, which facilitates the management and control of game logic and level components. The `GameFactory` class in the `game` package creates instances of games by utilizing classes from the `level` package to instantiate players and levels, while the `Game` class interacts with the `Level` class to manage game state, handle collisions, and coordinate the movement of non-player characters (NPCs). This interaction ensures that the game logic is decoupled from the level-specific details, promoting a clean separation of concerns and enhancing modularity."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.game",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.game",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.ui` package and the `nl.tudelft.jpacman.game` package in the JPacman project are interconnected through their dependency on each other, primarily for managing game state and user interactions. The UI packages utilize game logic from the game package to render the board, display scores, and handle player actions, while the game package relies on UI components to provide a visual representation of the game's current state and facilitate user input."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.game",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.game",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package and the `nl.tudelft.jpacman.game` package are interconnected through their roles in managing a Pacman game. The `nl.tudelft.jpacman` package handles user interactions and configurations, while the `nl.tudelft.jpacman.game` package manages the core game logic, including player movement and game state. The dependency between these packages facilitates the creation and management of single-player games by providing necessary components and methods for game initialization and execution."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.level package depends on the nl.tudelft.jpacman.board package to manage game levels, where the level interacts with the board's squares and units for movement, collision detection, and game logic. This interaction ensures that the level can accurately reflect changes in the board state as units move and interact within the game environment."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.ui` package is responsible for rendering the game state and handling user input, while the `nl.tudelft.jpacman.board` package manages the game logic and board structure. The packages interact by passing the game board to UI components like `BoardPanel`, which uses methods from the board package to retrieve information about squares, units, and their positions to render the game visually and respond to user inputs effectively."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The nl.tudelft.jpacman.npc.ghost package and the nl.tudelft.jpacman.board package are interconnected through their dependency, which facilitates the movement and behavior of ghosts within the Pac-Man game environment. The ghost package utilizes methods from the board package to navigate the game grid, find targets, and interact with other units on the board, thereby defining the dynamic gameplay mechanics."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc-dependsOn-nl.tudelft.jpacman.board",
          "source": "nl.tudelft.jpacman.npc",
          "target": "nl.tudelft.jpacman.board",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.npc` package and the `nl.tudelft.jpacman.board` package in the jpacman project are interconnected through their shared dependency on the `Unit` class, which represents entities that can move within the game board. The `npc` package contains classes like `Ghost`, which utilize methods from the `board` package to navigate and interact with the game environment, such as checking for accessible squares and retrieving adjacent squares based on movement directions. This interaction is crucial for implementing the dynamic behavior of non-player characters in a Pacman-like game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.points",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.level` package and the `nl.tudelft.jpacman.points` package in the jpacman project are interconnected through their dependency on each other, specifically for handling game events related to player interactions with ghosts and pellets. The `level` package invokes methods from the `points` package to calculate points based on these interactions, ensuring that the game logic accurately reflects changes in the player's score as they progress through the level."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.points-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman.points",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.points` package and the `nl.tudelft.jpacman.level` package in the jpacman project are interconnected through their roles in managing game points and player interactions, respectively. The `nl.tudelft.jpacman.points` package calculates points based on game events such as pellets being consumed or ghosts being collided with, while the `nl.tudelft.jpacman.level` package handles these events and updates the game state accordingly. This interaction ensures that players receive appropriate points for their actions within the game environment."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.points",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.points",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package and the `nl.tudelft.jpacman.points` package in the jpacman project are interconnected through their dependency on each other, specifically for handling point calculations in a Pacman game. The `Launcher` class in the `nl.tudelft.jpacman` package relies on the `PointCalculatorLoader` class from the `nl.tudelft.jpacman.points` package to dynamically load and use different implementations of the `PointCalculator` interface, which defines how points are awarded or deducted based on game events such as eating pellets or colliding with ghosts. This design allows for flexibility in changing point calculation strategies without altering the core game logic, promoting a clean separation of concerns and easier maintenance."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.ui-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman.ui",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.ui` package and the `nl.tudelft.jpacman.level` package interact to create a functional Pacman game user interface. The UI package is responsible for rendering the game board and handling user input, while the level package manages the game logic, including collision detection and player movement. The dependency between these packages allows the UI to display the current state of the game as defined by the level logic, ensuring that the visual representation accurately reflects the in-game actions and events."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.npc.ghost",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.npc.ghost",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.level` package and the `nl.tudelft.jpacman.npc.ghost` package interact through the creation and management of ghosts within the game level. The `LevelFactory` class from the `level` package uses the `GhostFactory` class from the `npc.ghost` package to instantiate different types of ghosts (Blinky, Clyde, Inky, Pinky) as part of the level setup, thereby establishing a dependency that ensures the correct ghost AI and behavior are integrated into the game environment."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.level-dependsOn-nl.tudelft.jpacman.npc",
          "source": "nl.tudelft.jpacman.level",
          "target": "nl.tudelft.jpacman.npc",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.level` package and the `nl.tudelft.jpacman.npc` package interact through the management and movement of non-player characters (NPCs) in a Pacman game. The `Level` class in the `level` package uses instances of the `Ghost` class from the `npc` package to create and manage ghost entities, including their movement intervals and behaviors. This interaction is crucial for the dynamic gameplay experience, ensuring that ghosts move according to predefined rules and contribute to the overall challenge of the game."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.level",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.level",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package and the `nl.tudelft.jpacman.level` package are interconnected through their dependency, where the former relies on the latter for creating game levels. The `Launcher` class within `nl.tudelft.jpacman` invokes methods from `MapParser` in `nl.tudelft.jpacman.level` to parse a textual representation of a level into an actual game level object, thereby establishing the interaction between these packages."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman-dependsOn-nl.tudelft.jpacman.ui",
          "source": "nl.tudelft.jpacman",
          "target": "nl.tudelft.jpacman.ui",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman` package handles the core game logic and mechanics, while the `nl.tudelft.jpacman.ui` package manages the graphical user interface. The dependency between these packages facilitates the integration of game logic with user interaction, allowing for a responsive and interactive Pacman experience."
          }
        }
      },
      {
        "data": {
          "id": "nl.tudelft.jpacman.npc.ghost-dependsOn-nl.tudelft.jpacman.npc",
          "source": "nl.tudelft.jpacman.npc.ghost",
          "target": "nl.tudelft.jpacman.npc",
          "label": "dependsOn",
          "properties": {
            "description": "The `nl.tudelft.jpacman.npc.ghost` package contains classes that represent and manage the behavior of ghosts in a Pacman game, while the `nl.tudelft.jpacman.npc` package provides a general framework for handling non-player characters (NPCs). The interaction between these packages is primarily through inheritance and composition, where ghost classes like Blinky, Clyde, Inky, and Pinky inherit from a base class in the `nl.tudelft.jpacman.npc` package. This design allows for a structured and reusable approach to managing ghost behavior within the Pacman game."
          }
        }
      }
    ]
  }
}
