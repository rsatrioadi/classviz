{
  "elements": {
    "nodes": [
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pOrigin",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.Location aOrigin;",
            "visibility": "private",
            "simpleName": "aOrigin",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "boolean",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "boolean",
            "qualifiedName": "boolean",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "cs",
            "qualifiedName": "ca.mcgill.cs",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to move."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Keeps track of the current state of the game and provides\r\na facade to it. \r\n\r\nThe game state can logically be separated into four distinct \r\nconceptual elements: the deck, the discard pile, the foundations\r\nwhere completed suits are accumulated, and the tableau, which consists of\r\nseven piles where cards fan down in sequences of alternating suit colors.\r\n",
            "simpleName": "GameModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "(no description)",
            "roleStereotype": "Controller"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.Move[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
            "kind": "constructor",
            "sourceText": "/**\r\n *\r\n * @param pMoves\r\n * \t\tAny move to be added to this composite\r\n */\r\npublic CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move... pMoves) {\r\n    for (ca.mcgill.cs.stg.solitaire.model.Move move : pMoves) {\r\n        aMoves.add(move);\r\n    }\r\n}",
            "docComment": "\r\n@param pMoves\r\n\t\tAny move to be added to this composite\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The desired location for pCard."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The ImageView that represents the card pile."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SPADES",
            "visibility": "public",
            "simpleName": "SPADES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int TO_PERCENT = 100;",
            "visibility": "private",
            "simpleName": "TO_PERCENT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "buildLayout()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
            "kind": "method",
            "sourceText": "private void buildLayout() {\r\n    getChildren().clear();\r\n    int offset = 0;\r\n    ca.mcgill.cs.stg.solitaire.cards.CardStack stack = aModel.getTableauPile(aIndex);\r\n    // this essentially acts as a spacer\r\n    if (stack.isEmpty()) {\r\n        javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack());\r\n        image.setVisible(false);\r\n        getChildren().add(image);\r\n        return;\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card cardView : stack) {\r\n        final javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(getImage(cardView));\r\n        image.setTranslateY(ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET * offset);\r\n        offset++;\r\n        getChildren().add(image);\r\n        setOnDragOver(createDragOverHandler(image, cardView));\r\n        setOnDragEntered(createDragEnteredHandler(image, cardView));\r\n        setOnDragExited(createDragExitedHandler(image, cardView));\r\n        setOnDragDropped(createDragDroppedHandler(image, cardView));\r\n        if (aModel.isVisibleInTableau(cardView)) {\r\n            image.setOnDragDetected(createDragDetectedHandler(image, cardView));\r\n        }\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "method": "buildUI",
            "description": "This method is responsible for building the user interface of a card pile in a Solitaire game. It lays out the cards and sets up drag-and-drop functionality.",
            "returnType": "void",
            "architectureLayer": "UI"
          }
        }
      },
      {
        "data": {
          "id": "char",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "char",
            "qualifiedName": "char",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pIndex\r\n * \t\tThe position of the stack to return.\r\n * @return A copy of the stack at position pIndex\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.CardStack getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex);",
            "docComment": "\r\n@param pIndex\r\n\t\tThe position of the stack to return.\r\n@return A copy of the stack at position pIndex\r\n",
            "metaSrc": "source code",
            "description": "Retrieves a tableau pile from the game model view.",
            "howItWorks": "The method takes an instance of TableauPile as a parameter and returns a CardStack object representing the tableau pile.",
            "howToUse": "Call this method with an instance of TableauPile to get the corresponding CardStack.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [],
            "returns": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "clear()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
            "kind": "method",
            "sourceText": "/**\r\n * Removes all the cards in the stack.\r\n */\r\npublic void clear() {\r\n    aCards.clear();\r\n}",
            "docComment": "Removes all the cards in the stack.\r\n",
            "metaSrc": "source code",
            "description": "Clears the list of cards in a card stack.",
            "howItWorks": "Calls the clear() method on the aCards list to remove all elements.",
            "howToUse": "Call the clear() method on an instance of CardStack to empty its contents.",
            "layer": "Logic",
            "postConditions": [
              "aCards list is empty"
            ],
            "preConditions": [
              "aCards list contains one or more cards"
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "long",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "long",
            "qualifiedName": "long",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile to search within."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String SEPARATOR = \";\";",
            "visibility": "private",
            "simpleName": "SEPARATOR",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "static method",
            "sourceText": "private static void playGame(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    pModel.reset();\r\n    boolean advanced = true;\r\n    while (advanced) {\r\n        advanced = pModel.tryToAutoPlay();\r\n    } \r\n    while (pModel.canUndo()) {\r\n        pModel.undoLast();\r\n    } \r\n    advanced = true;\r\n    while (advanced) {\r\n        advanced = pModel.tryToAutoPlay();\r\n    } \r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Resets the game state by clearing moves, shuffling the deck, clearing the discard pile, initializing foundations and tableau; then attempts to automatically play moves until no more can be made. It also undoes any possible moves before attempting to auto-play again.",
            "howItWorks": "The method resets the game model, then enters a loop that tries to auto-play moves until no more can be made. After that, it undoes any possible moves and attempts to auto-play again.",
            "howToUse": "Call playGame() with an instance of GameModel to start playing the solitaire game automatically.",
            "layer": "Logic",
            "postConditions": [
              "The game model is reset to its initial state.",
              "All possible moves are attempted and auto-played until no more can be made.",
              "Any possible undo operations are performed before attempting to auto-play again."
            ],
            "preConditions": [
              "An instance of GameModel is provided with a valid game state."
            ],
            "returns": "Void. This method does not return any value."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
          "labels": [
            "Script"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>1()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
            "kind": "object initializer",
            "sourceText": "// Create the flyweight objects\r\nstatic {\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Suit suit : ca.mcgill.cs.stg.solitaire.cards.Suit.values()) {\r\n        CARDS[suit.ordinal()] = new Card[ca.mcgill.cs.stg.solitaire.cards.Rank.values().length];\r\n        for (ca.mcgill.cs.stg.solitaire.cards.Rank rank : ca.mcgill.cs.stg.solitaire.cards.Rank.values()) {\r\n            CARDS[suit.ordinal()][rank.ordinal()] = new Card(rank, suit);\r\n        }\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The playing strategy to be used by the game model."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SEVENTH",
            "visibility": "public",
            "simpleName": "SEVENTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location for the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "peek()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The card at the top of the stack.\r\n * @pre !isEmpty();\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peek() {\r\n    assert !isEmpty();\r\n    return aCards.get(aCards.size() - 1);\r\n}",
            "docComment": "\r\n@return The card at the top of the stack.\r\n@pre !isEmpty();\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the top card of a card stack without removing it.",
            "howItWorks": "The method checks if the stack is not empty using the isEmpty() method. If the stack is not empty, it returns the last card in the list 'aCards'.",
            "howToUse": "Call this method on an instance of CardStack to get the top card without removing it from the stack.",
            "layer": "Logic",
            "postConditions": [
              "The stack remains unchanged after calling peek()."
            ],
            "preConditions": [
              "The stack must not be empty before calling peek()."
            ],
            "returns": "The top card of the stack.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getScore()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The number of cards in the foundations.\r\n */\r\npublic int getScore() {\r\n    return aFoundations.getTotalSize();\r\n}",
            "docComment": "\r\n@return The number of cards in the foundations.\r\n",
            "metaSrc": "source code",
            "description": "Calculates the total number of cards in all stacks within the Foundations class.",
            "howItWorks": "The method calls getTotalSize() on an instance of Foundations to get the total number of cards across all stacks.",
            "howToUse": "Call getScore() on an instance of GameModel to retrieve the total score based on the number of cards in the Foundations.",
            "layer": "Logic",
            "postConditions": [
              "The returned integer represents the total number of cards across all stacks in the Foundations."
            ],
            "preConditions": [
              "There must be an instance of Foundations available to call getTotalSize() on."
            ],
            "returns": "An integer representing the total number of cards across all stacks.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String BORDER_STYLE_DRAGGED = \"-fx-border-color: darkgray;\" + (\"-fx-border-width: 3;\" + \" -fx-border-radius: 10.0\");",
            "visibility": "private",
            "simpleName": "BORDER_STYLE_DRAGGED",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The foundation pile where the card might be moved."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FIFTH",
            "visibility": "public",
            "simpleName": "FIFTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Application class for Solitaire. The responsibility\r\nof this class is limited to assembling the major UI components \r\nand launching the application. All gesture handling logic is \r\nhandled by its composed elements, which act as observers\r\nof the game model.\r\n",
            "simpleName": "Solitaire",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A solitaire card game implementation. The Solitaire class is the main entry point of the application, responsible for launching and managing the game.",
            "keywords": [
              "Solitaire",
              "GUI",
              "Application",
              "Launch"
            ],
            "roleStereotype": "Controller"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pSuit\r\n * \t\tThe suit to test against.\r\n * @return True if this suit and pSuit are of the same color.\r\n * @pre pSuit != null;\r\n */\r\npublic boolean sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit pSuit) {\r\n    assert pSuit != null;\r\n    if ((this == ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS) || (this == ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES)) {\r\n        return (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS) || (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES);\r\n    } else {\r\n        return (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS) || (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS);\r\n    }\r\n}",
            "docComment": "\r\n@param pSuit\r\n\t\tThe suit to test against.\r\n@return True if this suit and pSuit are of the same color.\r\n@pre pSuit != null;\r\n",
            "metaSrc": "source code",
            "description": "Determines if two card suits are of the same color.",
            "howItWorks": "The method checks if the current suit is either CLUBS or SPADES (both black) and compares it with the provided suit. If both are black, it returns true; otherwise, it checks if both are red (DIAMONDS or HEARTS) and returns true if they are.",
            "howToUse": "Call this method with a ca.mcgill.cs.stg.solitaire.cards.Suit object to determine if the current suit is of the same color as the provided suit.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if both suits are of the same color (both black or both red)."
            ],
            "preConditions": [
              "pSuit is not null."
            ],
            "returns": "A boolean indicating whether the two suits are of the same color.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "shuffle()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
            "kind": "method",
            "sourceText": "/**\r\n * Reinitializes the deck with all 52 cards, and shuffles them.\r\n */\r\npublic void shuffle() {\r\n    java.util.List<ca.mcgill.cs.stg.solitaire.cards.Card> cards = new java.util.ArrayList<>();\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Suit suit : ca.mcgill.cs.stg.solitaire.cards.Suit.values()) {\r\n        for (ca.mcgill.cs.stg.solitaire.cards.Rank rank : ca.mcgill.cs.stg.solitaire.cards.Rank.values()) {\r\n            cards.add(ca.mcgill.cs.stg.solitaire.cards.Card.get(rank, suit));\r\n        }\r\n    }\r\n    java.util.Collections.shuffle(cards);\r\n    aCards = new ca.mcgill.cs.stg.solitaire.cards.CardStack(cards);\r\n}",
            "docComment": "Reinitializes the deck with all 52 cards, and shuffles them.\r\n",
            "metaSrc": "source code",
            "description": "Shuffles a deck of cards.",
            "howItWorks": "Creates a list of all possible cards using nested loops for suits and ranks, then shuffles the list using Collections.shuffle() method.",
            "howToUse": "Call shuffle() on an instance of ca.mcgill.cs.stg.solitaire.cards.Deck to shuffle its cards.",
            "layer": "Logic",
            "postConditions": [
              "aCards contains a shuffled list of Card objects."
            ],
            "preConditions": [
              "aCards is initialized with all possible cards."
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "private static ca.mcgill.cs.stg.solitaire.model.Move substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDeckEmpty()) {\r\n        return pModel.getNullMove();\r\n    } else {\r\n        return pModel.getDiscardMove();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Determines the next move in a solitaire game based on whether the deck is empty.",
            "howItWorks": "Checks if the deck is empty. If it is, returns a null move; otherwise, returns a discard move.",
            "howToUse": "Call substrategyDiscard with a GameModelView object to get the next move in the game.",
            "layer": "Logic",
            "postConditions": [
              "Returns a Move object representing the next valid move in the game."
            ],
            "preConditions": [
              "pModel is not null"
            ],
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.Stack<ca.mcgill.cs.stg.solitaire.model.Move> aMoves = new java.util.Stack<>();",
            "visibility": "private",
            "simpleName": "aMoves",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "ca",
            "qualifiedName": "ca",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The current state of the game model."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "reveals the top of the stack.\r\n",
            "simpleName": "RevealTopMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "A class representing a move to reveal the top card of a TableauPile in a solitaire game.",
            "keywords": [
              "solitaire",
              "game",
              "move",
              "TableauPile",
              "reveal",
              "undo"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "constructor",
            "sourceText": "RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    aIndex = pIndex;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new strategy.\r\n */\r\npublic NullPlayingStrategy() {\r\n}",
            "docComment": "Creates a new strategy.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.MouseEvent> createDragDetectedHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.MouseEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.MouseEvent pMouseEvent) {\r\n            javafx.scene.input.Dragboard db = pImageView.startDragAndDrop(javafx.scene.input.TransferMode.ANY);\r\n            ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT.putString(ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(aModel.getSubStack(pCard, aIndex)));\r\n            db.setContent(ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT);\r\n            pMouseEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles drag-and-drop functionality for a card in the Solitaire game.",
            "howItWorks": "Creates an event handler that initiates a drag operation when a mouse event occurs on a card image view. It serializes the sub-stack of cards starting from the clicked card and stores it in a clipboard content object, which is then set as the content of the dragboard.",
            "howToUse": "Call this method with an ImageView representing a card and the Card object associated with that ImageView to create a drag-and-drop handler for that card.",
            "layer": "UI",
            "postConditions": [
              "A drag-and-drop operation is initiated on the specified card.",
              "The sub-stack of cards starting from the clicked card is serialized and stored in a clipboard content object."
            ],
            "preConditions": [
              "pImageView != null",
              "pCard != null and is in a valid pile"
            ],
            "returns": {
              "description": "An event handler that can be attached to an ImageView to handle drag-and-drop operations.",
              "type": "javafx.event.EventHandler<javafx.scene.input.MouseEvent>"
            },
            "stereotype": "Handler",
            "taggedValue": [
              {
                "name": "UI",
                "value": "true"
              }
            ]
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A read-only version of a game model.\r\n",
            "simpleName": "GameModelView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new strategy.\r\n */\r\npublic GreedyPlayingStrategy() {\r\n}",
            "docComment": "Creates a new strategy.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "int",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "int",
            "qualifiedName": "int",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
            "kind": "method",
            "sourceText": "/**\r\n * Undoes the move by reversing\r\n * its effect.\r\n */\r\nvoid undo();",
            "docComment": "Undoes the move by reversing\r\nits effect.\r\n",
            "metaSrc": "source code",
            "description": "A method to undo a move in the solitaire game.",
            "howItWorks": "This method does not take any parameters and simply undoes the last move made by the player.",
            "howToUse": "Call this method when the user wants to undo their last action in the game.",
            "layer": "Logic",
            "postConditions": [
              "The previous move should be removed from the game state.",
              "The game board should reflect the state before the last move."
            ],
            "preConditions": [
              "There must be at least one move to undo.",
              "The game state must be in a valid state before calling this method."
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The ImageView representing the card being dragged over."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model that the DiscardPileView will interact with."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "private void move(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    ca.mcgill.cs.stg.solitaire.model.Location source = find(pCard);\r\n    if ((source instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile) && (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile)) {\r\n        aTableau.moveWithin(pCard, ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (source)), ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pDestination)));\r\n    } else {\r\n        absorbCard(source);\r\n        if (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.FoundationPile) {\r\n            aFoundations.push(pCard, ((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pDestination)));\r\n        } else if (pDestination == ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE) {\r\n            aDiscard.push(pCard);\r\n        } else {\r\n            assert pDestination instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile;\r\n            aTableau.push(pCard, ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pDestination)));\r\n        }\r\n    }\r\n    notifyListeners();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.scene.image.Image getImage(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    if (aModel.isVisibleInTableau(pCard)) {\r\n        return ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(pCard);\r\n    } else {\r\n        return ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the image of a card based on its visibility in the tableau.",
            "howItWorks": "Checks if the card is visible using GameModel's isVisibleInTableau method. If visible, retrieves the card's image; otherwise, returns the back image.",
            "howToUse": "Call getImage with an instance of Card to get its image based on visibility.",
            "layer": "UI",
            "postConditions": [
              "Returns a javafx.scene.image.Image object representing the card's image or its back if not visible."
            ],
            "preConditions": [
              "pCard must be an instance of ca.mcgill.cs.stg.solitaire.cards.Card."
            ],
            "returns": "A javafx.scene.image.Image object.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    ca.mcgill.cs.stg.solitaire.model.Location source = find(pCard);\r\n    if ((source instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile) && aTableau.revealsTop(pCard)) {\r\n        return new ca.mcgill.cs.stg.solitaire.model.CompositeMove(new ca.mcgill.cs.stg.solitaire.model.GameModel.CardMove(pCard, pDestination), new ca.mcgill.cs.stg.solitaire.model.GameModel.RevealTopMove(((ca.mcgill.cs.stg.solitaire.model.TableauPile) (source))));\r\n    }\r\n    return new ca.mcgill.cs.stg.solitaire.model.GameModel.CardMove(pCard, pDestination);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Determines the move for a card in Solitaire based on its current location and destination.",
            "howItWorks": "The method finds the source location of the card, checks if it's a TableauPile and if the top card is revealed. If so, it creates a CompositeMove with two moves: one to move the card and another to reveal the top card. Otherwise, it simply returns a CardMove.",
            "howToUse": "Call this method with an instance of Card and a Location representing the destination to get the appropriate Move for the card.",
            "layer": "Logic",
            "postConditions": [
              "A valid Move object is returned based on the game rules."
            ],
            "preConditions": [
              "pCard is not null and is in a valid location.",
              "pDestination is a valid Location object."
            ],
            "returns": "A ca.mcgill.cs.stg.solitaire.model.Move object representing the move for the card.",
            "stereotype": "Operation"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card for which to find the previous card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragEnteredHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n            if (aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                pImageView.setEffect(new javafx.scene.effect.DropShadow());\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag enter event for a card image view in the Solitaire game.",
            "howItWorks": "The method creates a new DragEventHandler that checks if a legal move can be made using the provided card. If so, it applies a drop shadow effect to the image view. The event is then consumed to prevent further processing.",
            "howToUse": "Create an instance of CardPileView and call createDragEnteredHandler() with a valid ImageView and Card object to get a drag event handler for the card image view.",
            "layer": "Logic",
            "postConditions": [
              "The drag enter event is handled appropriately based on whether a legal move can be made."
            ],
            "preConditions": [
              "pImageView and pCard must not be null."
            ],
            "returns": "A javafx.event.EventHandler<javafx.scene.input.DragEvent> that handles drag enter events.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FOUR",
            "visibility": "public",
            "simpleName": "FOUR",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile to retrieve."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the TableauPile to show the top card from."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check for visibility."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.Location aDestination;",
            "visibility": "private",
            "simpleName": "aDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isNull()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the move is not a move that\r\nadvances the game. False by default.\r\n */\r\ndefault boolean isNull() {\r\n    return false;\r\n}",
            "docComment": "\r\n@return True if the move is not a move that\r\nadvances the game. False by default.\r\n",
            "metaSrc": "source code",
            "description": "Checks if a move is null.",
            "howItWorks": "The method returns false, indicating that the move is not null.",
            "howToUse": "Call this method on an instance of Move to check if it is null.",
            "layer": "Logic",
            "postConditions": [
              "The method returns false."
            ],
            "preConditions": [],
            "returns": "A boolean indicating whether the move is null (always false in this case).",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "NINE",
            "visibility": "public",
            "simpleName": "NINE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return Whether pCard is contains in any stack.\r\n * @pre pCard != null;\r\n */\r\nboolean contains(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert pCard != null;\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (contains(pCard, index)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return Whether pCard is contains in any stack.\r\n@pre pCard != null;\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific card is present in any of the tableau piles.",
            "howItWorks": "The method iterates through all possible tableau piles and checks if the given card is present in any of them using the contains method from TableauPile.",
            "howToUse": "Call this method with an instance of Card to check if it is present in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pCard != null"
            ],
            "returns": "A boolean indicating whether the card is present in any of the tableau piles.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "constructor",
            "sourceText": "SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel pModel, ca.mcgill.cs.stg.solitaire.model.FoundationPile pIndex) {\r\n    aModel = pModel;\r\n    aIndex = pIndex;\r\n    setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING));\r\n    setStyle(ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE);\r\n    final javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack());\r\n    image.setVisible(false);\r\n    getChildren().add(image);\r\n    aDragHandler = new ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(image);\r\n    image.setOnDragDetected(aDragHandler);\r\n    setOnDragOver(createOnDragOverHandler(image));\r\n    setOnDragEntered(createOnDragEnteredHandler());\r\n    setOnDragExited(createOnDragExitedHandler());\r\n    setOnDragDropped(createOnDragDroppedHandler());\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragDroppedHandler()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragDroppedHandler() {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            javafx.scene.input.Dragboard db = pEvent.getDragboard();\r\n            boolean success = false;\r\n            if (db.hasString()) {\r\n                ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n                aModel.getCardMove(transfer.getTop(), aIndex).perform();\r\n                success = true;\r\n            }\r\n            pEvent.setDropCompleted(success);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic for creating a drag-and-drop event handler in the Solitaire game.",
            "howItWorks": "The method creates an anonymous class that implements javafx.event.EventHandler<javafx.scene.input.DragEvent>. It retrieves the Dragboard from the event, checks if it contains a string (representing a card), and then performs a move using the CardTransfer object. The success of the drag-and-drop operation is set based on whether the move was performed successfully.",
            "howToUse": "Call createOnDragDroppedHandler() to get an EventHandler that can be used to handle drag-and-drop events in the SuitStack class.",
            "layer": "UI",
            "postConditions": [
              "The drag-and-drop operation is completed with the success status set based on whether a valid move was performed."
            ],
            "preConditions": [
              "A Dragboard containing a string (representing a card) must be available in the event."
            ],
            "returns": "An EventHandler that can handle drag-and-drop events.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Remove the card at the top of the pile at pLocation,\r\n * and returns it.\r\n *\r\n * @param pLocation\r\n * \t\tThe location where to obtain the card.\r\n * @pre pLocation != null && !isEmpty(pLocation)\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.Card pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pLocation != null) && (!isEmpty(pLocation));\r\n    return aPiles.get(pLocation).pop();\r\n}",
            "docComment": "Remove the card at the top of the pile at pLocation,\r\nand returns it.\r\n\r\n@param pLocation\r\n\t\tThe location where to obtain the card.\r\n@pre pLocation != null && !isEmpty(pLocation)\r\n",
            "metaSrc": "source code",
            "description": "Removes the top card from a FoundationPile in the Solitaire game.",
            "howItWorks": "The method checks if the provided FoundationPile is not null and not empty. It then removes and returns the top card from the pile using the pop() method of the CardStack class.",
            "howToUse": "Call this method with an instance of FoundationPile to remove the top card from it.",
            "layer": "Logic",
            "postConditions": [
              "The specified FoundationPile is not null.",
              "The specified FoundationPile is not empty before and after the operation."
            ],
            "preConditions": [
              "The specified FoundationPile is not null."
            ],
            "returns": "The top card that was removed from the FoundationPile.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents a general-purpose stack of cards. New CardStack\r\ninstances are initially empty.\r\n",
            "simpleName": "CardStack",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n *\r\n * @param pArgs\r\n * \t\tNot used.\r\n */\r\npublic static void main(java.lang.String[] pArgs) {\r\n    ca.mcgill.cs.stg.solitaire.model.GameModel model = new ca.mcgill.cs.stg.solitaire.model.GameModel(new ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy());\r\n    for (int i = 0; i < ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES; i++) {\r\n        ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(model);\r\n    }\r\n    java.lang.System.out.println(\"Runs completed.\");\r\n}",
            "docComment": "\r\n@param pArgs\r\n\t\tNot used.\r\n",
            "metaSrc": "source code",
            "description": "The main method initializes a game model with a greedy playing strategy and runs multiple games to test the crash resistance of the solitaire implementation.",
            "howItWorks": "A GameModel is created with a GreedyPlayingStrategy. The playGame method from CrashTest is called in a loop for a specified number of games, resetting the game state each time before attempting to automatically play moves until no more can be made.",
            "howToUse": "Call main() without any arguments to run the crash test on the solitaire implementation.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The ImageView representing the card on the UI."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "/* Only if it reveals a card or empties a pile. We also don't move kings between empty piles */\r\nprivate static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        ca.mcgill.cs.stg.solitaire.cards.CardStack stack = pModel.getTableauPile(pile);\r\n        for (ca.mcgill.cs.stg.solitaire.cards.Card card : stack) {\r\n            if (pModel.isBottomKing(card)) {\r\n                continue;\r\n            }\r\n            if (pModel.isLowestVisibleInTableau(card)) {\r\n                for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile2 : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n                    if (pModel.isLegalMove(card, pile2)) {\r\n                        return pModel.getCardMove(card, pile2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "@param str The original string.\n@param startIndex The starting index of the substring.\n@optional @param endIndex The ending index of the substring (exclusive).\n@return A substring of the specified string.",
            "metaSrc": "source code",
            "functionName": "substr",
            "description": "Returns a substring of the specified string.",
            "returns": "String",
            "howToUse": "Call this method with two parameters: the original string and the starting index. Optionally, provide an end index to specify the length of the substring."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "size()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The number of cards in the transfer.\r\n */\r\npublic int size() {\r\n    return aCards.length;\r\n}",
            "docComment": "\r\n@return The number of cards in the transfer.\r\n",
            "metaSrc": "source code",
            "description": "Returns the number of cards in the transfer.",
            "howItWorks": "The method returns the length of the 'aCards' array, which holds the cards being transferred.",
            "howToUse": "Call this method on an instance of CardTransfer to get the current number of cards in the transfer.",
            "layer": "Logic",
            "postConditions": [
              "The returned value should be a non-negative integer representing the number of cards in 'aCards'.",
              "The value should not change if no new cards are added or removed from 'aCards'."
            ],
            "preConditions": [
              "The method assumes that 'aCards' is an array and has been properly initialized before calling this method."
            ],
            "returns": "An integer representing the number of cards in the transfer.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.Move aDiscardMove = new ca.mcgill.cs.stg.solitaire.model.Move() {\r\n    @java.lang.Override\r\n    public void perform() {\r\n        assert !isDeckEmpty();\r\n        aDiscard.push(aDeck.draw());\r\n        aMoves.push(this);\r\n        notifyListeners();\r\n    }\r\n\r\n    @java.lang.Override\r\n    public void undo() {\r\n        assert !isDiscardPileEmpty();\r\n        aDeck.push(aDiscard.pop());\r\n        notifyListeners();\r\n    }\r\n};",
            "visibility": "private",
            "simpleName": "aDiscardMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model that the CardPileView will interact with."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Make the top card of a pile visible.\r\n *\r\n * @param pIndex\r\n * \t\tThe index of the requested pile.\r\n * @pre pIndex != null && !isEmpty(pIndex)\r\n */\r\nvoid showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert !aPiles.get(pIndex).isEmpty();\r\n    aVisible.add(aPiles.get(pIndex).peek());\r\n}",
            "docComment": "Make the top card of a pile visible.\r\n\r\n@param pIndex\r\n\t\tThe index of the requested pile.\r\n@pre pIndex != null && !isEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Displays the top card of a TableauPile.",
            "howItWorks": "The method checks if the pile is not empty and then adds the top card to the visible list.",
            "howToUse": "Call this method on an instance of Tableau with a valid TableauPile index.",
            "layer": "Logic",
            "postConditions": [
              "aVisible contains the top card of aPiles.get(pIndex)."
            ],
            "preConditions": [
              "!aPiles.get(pIndex).isEmpty()"
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n *\r\n * @param pArgs\r\n * \t\tNot used.\r\n */\r\npublic static void main(java.lang.String[] pArgs) {\r\n    int total = 0;\r\n    int totalWon = 0;\r\n    ca.mcgill.cs.stg.solitaire.model.GameModel model = new ca.mcgill.cs.stg.solitaire.model.GameModel(new ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy());\r\n    for (int i = 0; i < ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES; i++) {\r\n        ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(model);\r\n        int score = model.getScore();\r\n        total += score;\r\n        if (score == ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS) {\r\n            totalWon++;\r\n        }\r\n    }\r\n    java.lang.System.out.println(java.lang.String.format(\"Ratio won     %d/%d=%.1f%%\", totalWon, ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES, (((double) (totalWon)) / ((double) (ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES))) * ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT));\r\n    java.lang.System.out.println(java.lang.String.format(\"Average score %d/%d=%.1f\", total, ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES, ((double) (total)) / ((double) (ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES))));\r\n}",
            "docComment": "\r\n@param pArgs\r\n\t\tNot used.\r\n",
            "metaSrc": "source code",
            "description": "The main method of the Driver class in a solitaire game implementation. It initializes a GameModel with a GreedyPlayingStrategy and runs multiple games to calculate the average score and win ratio.",
            "howItWorks": "The method initializes a GameModel, iterates through a specified number of games, plays each game using the playGame method, calculates the total score and number of won games, and then prints the win ratio and average score.",
            "howToUse": "Call this method with no arguments to run the solitaire game simulation and print the results.",
            "layer": "Logic",
            "postConditions": [
              "The total score and win ratio are printed to the console."
            ],
            "preConditions": [
              "A GameModel instance is created with a GreedyPlayingStrategy.",
              "The number of games to be played is defined by the NUMBER_OF_GAMES constant."
            ],
            "returns": "void"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Models a deck of 52 cards.\r\n",
            "simpleName": "Deck",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "A class representing a deck of cards in a solitaire game.",
            "keywords": [
              "Deck",
              "CardStack",
              "Shuffle",
              "Draw"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "constructor",
            "sourceText": "CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel pModel, ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    aModel = pModel;\r\n    aIndex = pIndex;\r\n    setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING));\r\n    setAlignment(javafx.geometry.Pos.TOP_CENTER);\r\n    buildLayout();\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes a CardPileView with a GameModel and TableauPile.",
            "howItWorks": "Sets up the model and index, configures padding and alignment, builds the layout, and adds a listener to the game model.",
            "howToUse": "Create an instance of CardPileView by passing a GameModel and TableauPile as parameters.",
            "layer": "UI",
            "postConditions": [
              "The model and index are set to the provided parameters.",
              "Padding and alignment are configured.",
              "The layout is built.",
              "A listener is added to the game model."
            ],
            "preConditions": [
              "pModel is not null.",
              "pIndex is not null."
            ],
            "returns": "Void. Initializes the CardPileView with the provided GameModel and TableauPile.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "HEARTS",
            "visibility": "public",
            "simpleName": "HEARTS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be set."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Move pCard and all the cards below to pDestination.\r\n *\r\n * @param pCard\r\n * \t\tThe card to move, possibly including all the cards on top of it.\r\n * @param pOrigin\r\n * \t\tThe location of the card before the move.\r\n * @param pDestination\r\n * \t\tThe intended destination of the card.\r\n * @pre this is a legal move\r\n */\r\nvoid moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pOrigin, ca.mcgill.cs.stg.solitaire.model.TableauPile pDestination) {\r\n    assert ((pCard != null) && (pOrigin != null)) && (pDestination != null);\r\n    assert contains(pCard, pOrigin);\r\n    assert isVisible(pCard);\r\n    java.util.Stack<ca.mcgill.cs.stg.solitaire.cards.Card> temp = new java.util.Stack<>();\r\n    ca.mcgill.cs.stg.solitaire.cards.Card card = aPiles.get(pOrigin).pop();\r\n    temp.push(card);\r\n    while (card != pCard) {\r\n        card = aPiles.get(pOrigin).pop();\r\n        temp.push(card);\r\n    } \r\n    while (!temp.isEmpty()) {\r\n        aPiles.get(pDestination).push(temp.pop());\r\n    } \r\n}",
            "docComment": "@param pCard The card to move.\n@param pOrigin The origin tableau pile from which the card is moved.\n@param pDestination The destination tableau pile to which the card is moved.",
            "metaSrc": "source code",
            "description": "Moves a card within the same tableau in a solitaire game.",
            "howItWorks": "The method moves a specified card from one tableau pile to another by popping cards off the origin pile and pushing them onto a temporary stack until the target card is reached. The temporary stack is then popped and pushed onto the destination pile, effectively moving the card within the same tableau.",
            "howToUse": "Call this method with an instance of Card representing the card to move, and two instances of TableauPile representing the origin and destination piles.",
            "layer": "Logic",
            "postconditions": [],
            "preconditions": [
              "pCard != null",
              "pOrigin != null",
              "pDestination != null",
              "contains(pCard, pOrigin)",
              "isVisible(pCard)"
            ],
            "returns": "Void"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the card to retrieve."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card from which to start collecting the sequence."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be added to the stack."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pRank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "kind": "static method",
            "sourceText": "/**\r\n * Get a flyweight Card object.\r\n *\r\n * @param pRank\r\n * \t\tThe rank of the card (from ace to kind)\r\n * @param pSuit\r\n * \t\tThe suit of the card (clubs, diamond, spades, hearts)\r\n * @return The card object representing the card with pRank and pSuit\r\n */\r\npublic static ca.mcgill.cs.stg.solitaire.cards.Card get(ca.mcgill.cs.stg.solitaire.cards.Rank pRank, ca.mcgill.cs.stg.solitaire.cards.Suit pSuit) {\r\n    assert (pRank != null) && (pSuit != null);\r\n    return ca.mcgill.cs.stg.solitaire.cards.Card.CARDS[pSuit.ordinal()][pRank.ordinal()];\r\n}",
            "docComment": "Get a flyweight Card object.\r\n\r\n@param pRank\r\n\t\tThe rank of the card (from ace to kind)\r\n@param pSuit\r\n\t\tThe suit of the card (clubs, diamond, spades, hearts)\r\n@return The card object representing the card with pRank and pSuit\r\n",
            "metaSrc": "source code",
            "description": "Creates a card object based on the given rank and suit.",
            "howItWorks": "The method uses an array of cards to retrieve a specific card by its rank and suit. It asserts that both rank and suit are not null before accessing the array.",
            "howToUse": "Call this method with a Rank and Suit enum value to get the corresponding Card object.",
            "layer": "Logic",
            "postConditions": [
              "The returned Card object is not null.",
              "The returned Card object corresponds to the given rank and suit."
            ],
            "preConditions": [
              "pRank is not null.",
              "pSuit is not null."
            ],
            "returns": "A ca.mcgill.cs.stg.solitaire.cards.Card object representing the card with the specified rank and suit.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "float",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "float",
            "qualifiedName": "float",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "EIGHT",
            "visibility": "public",
            "simpleName": "EIGHT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
            "kind": "method",
            "sourceText": "/**\r\n * Registers an observer for the state of the game model.\r\n *\r\n * @param pListener\r\n * \t\tA listener to register.\r\n * @pre pListener != null\r\n */\r\npublic void addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener pListener) {\r\n    assert pListener != null;\r\n    aListeners.add(pListener);\r\n}",
            "docComment": "Registers an observer for the state of the game model.\r\n\r\n@param pListener\r\n\t\tA listener to register.\r\n@pre pListener != null\r\n",
            "metaSrc": "source code",
            "description": "Adds a listener to the game model.",
            "howItWorks": "The method checks if the provided listener is not null and then adds it to the list of listeners.",
            "howToUse": "Call this method with an instance of GameModelListener to receive notifications about changes in the game model.",
            "layer": "Logic",
            "postConditions": [
              "The provided listener is added to the list of listeners."
            ],
            "preConditions": [
              "The provided listener is not null."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Make the top card of a pile not visible.\r\n *\r\n * @param pIndex\r\n * \t\tThe index of the requested stack.\r\n * @pre pIndex != null && !isEmpty(pIndex)\r\n */\r\nvoid hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert !aPiles.get(pIndex).isEmpty();\r\n    aVisible.remove(aPiles.get(pIndex).peek());\r\n}",
            "docComment": "Make the top card of a pile not visible.\r\n\r\n@param pIndex\r\n\t\tThe index of the requested stack.\r\n@pre pIndex != null && !isEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Hides the top card of a TableauPile.",
            "howItWorks": "The method removes the top card from the specified TableauPile and ensures that it is no longer visible by removing it from the aVisible list. It first checks if the pile is not empty using assert !aPiles.get(pIndex).isEmpty();, then retrieves the top card with aPiles.get(pIndex).peek() and removes it from aVisible.",
            "howToUse": "Call this method on an instance of Tableau to hide the top card of a specific TableauPile. Ensure that the pile is not empty before calling this method.",
            "layer": "Logic",
            "postConditions": [
              "The top card of the specified TableauPile is no longer visible.",
              "The aVisible list does not contain the top card of the specified TableauPile."
            ],
            "preConditions": [
              "The specified TableauPile is not empty."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragOverHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            if ((pEvent.getGestureSource() != pImageView) && pEvent.getDragboard().hasString()) {\r\n                ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n                if (aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                    pEvent.acceptTransferModes(javafx.scene.input.TransferMode.MOVE);\r\n                }\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles drag-and-drop events for card movement in the Solitaire game.",
            "howItWorks": "The method creates a DragEvent handler that checks if the drag source is not the ImageView and if the dragboard contains a string. If both conditions are met, it attempts to create a CardTransfer object from the string data. It then checks if the move is legal using the GameModel's isLegalMove method. If the move is legal, it accepts the transfer mode as MOVE.",
            "howToUse": "Call createDragOverHandler with an ImageView and a Card object to get a DragEvent handler that can be used to handle drag-and-drop events for card movement in the Solitaire game.",
            "layer": "UI",
            "postConditions": [
              "The drag event is consumed.",
              "If the move is legal, the transfer mode is set to MOVE."
            ],
            "preConditions": [
              "The drag source is not the ImageView.",
              "The dragboard contains a string."
            ],
            "returns": "A javafx.event.EventHandler<javafx.scene.input.DragEvent> that handles drag-and-drop events for card movement in the Solitaire game.",
            "stereotype": "Handler"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private javafx.scene.image.ImageView aImageView;",
            "visibility": "private",
            "simpleName": "aImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pId",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "A string representation of the card's ID."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final javafx.scene.input.ClipboardContent CLIPBOARD_CONTENT = new javafx.scene.input.ClipboardContent();",
            "visibility": "private",
            "simpleName": "CLIPBOARD_CONTENT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model instance that represents the current state of the solitaire game."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final javafx.scene.input.ClipboardContent CLIPBOARD_CONTENT = new javafx.scene.input.ClipboardContent();",
            "visibility": "private",
            "simpleName": "CLIPBOARD_CONTENT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Component that shows a stack of cards in \r\nwhich a completed suit is accumulated.\r\n",
            "simpleName": "SuitStack",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.Rank aRank;",
            "visibility": "private",
            "simpleName": "aRank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pString",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "A string representation of cards."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "TWO",
            "visibility": "public",
            "simpleName": "TWO",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Determines if it is legal to move pCard on top of pPile,\r\n * i.e. if a king is moved to an empty pile or any other rank on\r\n * a card of immediately greater rank but of a different color.\r\n *\r\n * @param pCard\r\n * \t\tThe card we wish to move\r\n * @param pPile\r\n * \t\tThe desired destination pile\r\n * @return True if the move is legal\r\n * @pre pCard != null && pPile != null\r\n */\r\nboolean canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert (pCard != null) && (pPile != null);\r\n    ca.mcgill.cs.stg.solitaire.cards.CardStack pile = aPiles.get(pPile);\r\n    if (pile.isEmpty()) {\r\n        return pCard.getRank() == ca.mcgill.cs.stg.solitaire.cards.Rank.KING;\r\n    } else {\r\n        return (pCard.getRank().ordinal() == (pile.peek().getRank().ordinal() - 1)) && (!pCard.getSuit().sameColorAs(pile.peek().getSuit()));\r\n    }\r\n}",
            "docComment": "Determines if it is legal to move pCard on top of pPile, \r\ni.e. if a king is moved to an empty pile or any other rank on \r\na card of immediately greater rank but of a different color.\r\n\r\n@param pCard\r\n\t\tThe card we wish to move\r\n@param pPile\r\n\t\tThe desired destination pile\r\n@return True if the move is legal\r\n@pre pCard != null && pPile != null\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void undo() {\r\n    move(aCard, aOrigin);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Reverses a card move in the game model.",
            "howItWorks": "Calls the 'move' method with the original card and its origin location to undo the previous move.",
            "howToUse": "Call the 'undo' method on an instance of GameModel.CardMove, passing the card and its origin as arguments.",
            "layer": "Logic",
            "postConditions": [
              "The card is returned to its original position."
            ],
            "preConditions": [
              "A previous move has been made and stored in the game model."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return aTableau.contains(pCard) && aTableau.isVisible(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a specific card is visible in any of the tableau piles.",
            "howItWorks": "This method checks if a specific card is present in any of the tableau piles and then verifies if it is visible. It uses two helper methods: contains() and isVisible().",
            "howToUse": "Call this method with an instance of Card to determine if it is visible in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [
              "The returned boolean indicates whether pCard is visible in any of the tableau piles."
            ],
            "preConditions": [
              "pCard != null"
            ],
            "returns": "A boolean indicating whether the card is visible in any of the tableau piles.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view representing the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True iff there are no cards in the deck.\r\n */\r\npublic boolean isEmpty() {\r\n    return aCards.isEmpty();\r\n}",
            "docComment": "\r\n@return True iff there are no cards in the deck.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the deck is empty.",
            "howItWorks": "The method calls the isEmpty() method of the aCards field, which is an instance of CardStack.",
            "howToUse": "Call this method on an instance of Deck to determine if it contains any cards.",
            "layer": "Logic",
            "postConditions": [
              "The returned value will be true if the deck has no cards, otherwise false."
            ],
            "preConditions": [
              "aCards should be initialized before calling this method."
            ],
            "returns": "A boolean indicating whether the deck is empty or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.CardStack aCards;",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.List<ca.mcgill.cs.stg.solitaire.model.GameModelListener> aListeners = new java.util.ArrayList<>();",
            "visibility": "private",
            "simpleName": "aListeners",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An immutable utility object to facilitate the transfer of card \r\nthrough the drag board (drag and drop space).\r\n",
            "simpleName": "CardTransfer",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class for transferring card objects between different parts of a solitaire game.",
            "keywords": [
              "CardTransfer",
              "CardStack",
              "Card",
              "serialization"
            ],
            "roleStereotype": "Information Holder"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return True if the card is visible and there is no\r\nvisible card below it in its pile. This includes\r\nthe case where the card is at the bottom of the pile.\r\n * @pre pCard != null && contains(pCard)\r\n */\r\nboolean isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && contains(pCard);\r\n    if (!isVisible(pCard)) {\r\n        return false;\r\n    } else {\r\n        java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> previousCard = getPreviousCard(pCard);\r\n        return (!previousCard.isPresent()) || (!isVisible(previousCard.get()));\r\n    }\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return True if the card is visible and there is no\r\nvisible card below it in its pile. This includes\r\nthe case where the card is at the bottom of the pile.\r\n@pre pCard != null && contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific card is the lowest visible card in any of the tableau piles.",
            "howItWorks": "The method first checks if the given card is visible using isVisible(). If it is not visible, it returns false. Otherwise, it retrieves the previous card using getPreviousCard() and checks if it is also visible. If there is no previous card or it is not visible, it returns true.",
            "howToUse": "Call this method with an instance of Card to determine if it is the lowest visible card in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if the given card is the lowest visible card in any of the tableau piles.",
              "Returns false if the given card is not visible or has a previous visible card."
            ],
            "preConditions": [
              "pCard != null",
              "contains(pCard)"
            ],
            "returns": "A boolean indicating whether the given card is the lowest visible card in any of the tableau piles.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragEnteredHandler()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragEnteredHandler() {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n            if ((transfer.size() == 1) && aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                setStyle(ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED);\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag-and-drop event when a card is dragged over a SuitStack in the Solitaire game.",
            "howItWorks": "Creates an event handler that checks if a single card can be legally moved to the current SuitStack based on the game model. If legal, it sets the border style of the SuitStack to indicate a drag operation.",
            "howToUse": "Call createOnDragEnteredHandler() to get the event handler for handling drag events over a SuitStack.",
            "layer": "UI",
            "postConditions": [
              "The border style of the SuitStack is updated if a legal move can be made.",
              "The drag event is consumed to prevent further processing."
            ],
            "preConditions": [
              "A card transfer object is created from the dragboard data.",
              "The game model is checked for a legal move with the top card and the current index of the SuitStack."
            ],
            "returns": "An EventHandler that handles DragEvents over a SuitStack.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getRank()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
            "kind": "method",
            "sourceText": "/**\r\n * Obtain the rank of the card.\r\n *\r\n * @return An object representing the rank of the card.\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Rank getRank() {\r\n    return aRank;\r\n}",
            "docComment": "Obtain the rank of the card.\r\n\r\n@return An object representing the rank of the card.\r\n",
            "metaSrc": "source code",
            "description": "Returns the rank of a card.",
            "howItWorks": "The method returns the value of the private field 'aRank' from the Card class.",
            "howToUse": "Call getRank() on an instance of the Card class to retrieve its rank.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is one of the predefined ranks in the Rank enum."
            ],
            "preConditions": [
              "The Card object must be properly initialized with a valid rank."
            ],
            "returns": "A ca.mcgill.cs.stg.solitaire.cards.Rank representing the card's rank.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSuit()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
            "kind": "method",
            "sourceText": "/**\r\n * Obtain the suit of the card.\r\n *\r\n * @return An object representing the suit of the card\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Suit getSuit() {\r\n    return aSuit;\r\n}",
            "docComment": "Obtain the suit of the card.\r\n\r\n@return An object representing the suit of the card\r\n",
            "metaSrc": "source code",
            "description": "Returns the suit of a card.",
            "howItWorks": "The method returns the value of the instance variable 'aSuit'.",
            "howToUse": "Call getSuit() on an instance of Card to retrieve its suit.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is one of the valid suits (e.g., Hearts, Diamonds, Clubs, Spades)."
            ],
            "preConditions": [
              "The instance variable 'aSuit' has been initialized with a valid suit before calling this method."
            ],
            "returns": "A ca.mcgill.cs.stg.solitaire.cards.Suit object representing the card's suit.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getNullMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getNullMove() {\r\n    return ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents the rank of a playing card.\r\n",
            "simpleName": "Rank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Represents the ranks of cards in a standard deck. Each rank corresponds to a specific card value.",
            "keywords": [
              "Rank",
              "Card",
              "Enum"
            ],
            "roleStereotype": "Information Holder"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.Card aCard;",
            "visibility": "private",
            "simpleName": "aCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pMoves",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "mcgill",
            "qualifiedName": "ca.mcgill",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.Card aCard;",
            "visibility": "private",
            "simpleName": "aCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The pile to obtain."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card associated with the image view."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "size()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The number of cards in the stack.\r\n */\r\npublic int size() {\r\n    return aCards.size();\r\n}",
            "docComment": "\r\n@return The number of cards in the stack.\r\n",
            "metaSrc": "source code",
            "description": "Returns the number of cards in the stack.",
            "howItWorks": "The method calls the size() method on the aCards field, which is presumably an instance of a collection that holds the cards.",
            "howToUse": "Call this method to get the current number of cards in the CardStack object.",
            "layer": "Logic",
            "postConditions": [
              "The returned value is an integer representing the number of cards in the stack."
            ],
            "preConditions": [
              "The CardStack object must be instantiated and have a non-null aCards field."
            ],
            "returns": "An integer representing the number of cards in the stack.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Places a card on top of the pile at pIndex. The\r\n * card will be visible by default.\r\n *\r\n * @param pCard\r\n * \t\tThe card to push.\r\n * @param pIndex\r\n * \t\tThe index of the destination stack.\r\n * @pre pCard != null && pIndex != null;\r\n */\r\nvoid push(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert (pCard != null) && (pIndex != null);\r\n    aPiles.get(pIndex).push(pCard);\r\n    aVisible.add(pCard);\r\n}",
            "docComment": "Places a card on top of the pile at pIndex. The\r\ncard will be visible by default.\r\n\r\n@param pCard\r\n\t\tThe card to push.\r\n@param pIndex\r\n\t\tThe index of the destination stack.\r\n@pre pCard != null && pIndex != null;\r\n",
            "metaSrc": "source code",
            "description": "Adds a card to the specified tableau pile.",
            "howItWorks": "The method checks if the card and pile are not null, then pushes the card onto the pile using CardStack's push method and adds it to the visible cards list.",
            "howToUse": "Call push with an instance of Card and TableauPile to add the card to the specified tableau pile.",
            "layer": "Logic",
            "postConditions": [
              "The card is added to the specified tableau pile.",
              "The card is added to the visible cards list."
            ],
            "preConditions": [
              "pCard is not null.",
              "pIndex is not null."
            ],
            "returns": "Void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Component that shows the deck and allows clicking\r\nit to draw cards. Listens to game model state changes\r\nand updates itself to disappear if it is empty.\r\n",
            "simpleName": "DeckView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class representing the view for the deck in a solitaire card game.",
            "keywords": [
              "DeckView",
              "GameModelListener",
              "Canvas",
              "GraphicsContext"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "stg",
            "qualifiedName": "ca.mcgill.cs.stg",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    buildLayout();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "This method is responsible for handling changes in the game state by rebuilding the layout of a card pile in a Solitaire game.",
            "howItWorks": "The method calls another method, buildLayout(), to rebuild the user interface of the card pile based on the current game state.",
            "howToUse": "This method should be called whenever there is a change in the game state that affects the visual representation of the card pile.",
            "layer": "UI",
            "postConditions": [
              "The card pile's layout should be updated to reflect the current game state."
            ],
            "preConditions": [
              "There should be a valid game state that affects the visual representation of the card pile."
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "THIRD",
            "visibility": "public",
            "simpleName": "THIRD",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object to generate the code for."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card being dragged."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "/* If the discard pile is empty, discard. */\r\nprivate static ca.mcgill.cs.stg.solitaire.model.Move substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDiscardPileEmpty() && (!pModel.isDeckEmpty())) {\r\n        return pModel.getDiscardMove();\r\n    } else {\r\n        return pModel.getNullMove();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the discard pile is empty and returns a discard move if it is not; otherwise, returns a null move.",
            "howItWorks": "The method checks if the discard pile is empty using pModel.isDiscardPileEmpty(). If true and the deck is not empty (pModel.isDeckEmpty() is false), it calls pModel.getDiscardMove() to return a discard move. Otherwise, it returns pModel.getNullMove().",
            "howToUse": "Call this method with an instance of GameModelView to determine if a discard move should be made based on the current state of the game.",
            "layer": "Logic",
            "returns": {
              "description": "A move object representing either a discard move or a null move based on the game's state.",
              "type": "ca.mcgill.cs.stg.solitaire.model.Move"
            }
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static java.util.Map<java.lang.String, javafx.scene.image.Image> aCards = new java.util.HashMap<java.lang.String, javafx.scene.image.Image>();",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int ALL_CARDS = 52;",
            "visibility": "private",
            "simpleName": "ALL_CARDS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String BUTTON_STYLE_NORMAL = \"-fx-background-color: transparent; -fx-padding: 5, 5, 5, 5;\";",
            "visibility": "private",
            "simpleName": "BUTTON_STYLE_NORMAL",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "DIAMONDS",
            "visibility": "public",
            "simpleName": "DIAMONDS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The CardStack to be serialized."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.Map<ca.mcgill.cs.stg.solitaire.model.FoundationPile, ca.mcgill.cs.stg.solitaire.cards.CardStack> aPiles = new java.util.HashMap<>();",
            "visibility": "private",
            "simpleName": "aPiles",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The Card object associated with the ImageView."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createNewGameImage()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
            "kind": "method",
            "sourceText": "private javafx.scene.canvas.Canvas createNewGameImage() {\r\n    double width = ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack().getWidth();\r\n    double height = ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack().getHeight();\r\n    javafx.scene.canvas.Canvas canvas = new javafx.scene.canvas.Canvas(width, height);\r\n    javafx.scene.canvas.GraphicsContext context = canvas.getGraphicsContext2D();\r\n    // The reset image\r\n    context.setStroke(javafx.scene.paint.Color.DARKGREEN);\r\n    context.setLineWidth(ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH);\r\n    context.strokeOval(width / 4, ((height / 2) - (width / 4)) + ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE, width / 2, width / 2);\r\n    // The text\r\n    context.setTextAlign(javafx.scene.text.TextAlignment.CENTER);\r\n    context.setTextBaseline(javafx.geometry.VPos.CENTER);\r\n    context.setFill(javafx.scene.paint.Color.DARKKHAKI);\r\n    context.setFont(javafx.scene.text.Font.font(javafx.scene.text.Font.getDefault().getName(), ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE));\r\n    if (aModel.isCompleted()) {\r\n        context.fillText(\"You won!\", java.lang.Math.round(width / 2), ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE);\r\n    } else {\r\n        context.fillText(\"Give up?\", java.lang.Math.round(width / 2), ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE);\r\n    }\r\n    context.setTextAlign(javafx.scene.text.TextAlignment.CENTER);\r\n    return canvas;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Creates a new game image for the solitaire card game.",
            "howItWorks": "The method creates a canvas with dimensions based on the back of a card image, sets up a graphics context, and draws an oval with text indicating whether the game is completed or not.",
            "howToUse": "Call createNewGameImage() to obtain a Canvas object representing the new game image.",
            "layer": "UI",
            "postConditions": [
              "A javafx.scene.canvas.Canvas object is returned with the game image drawn on it."
            ],
            "preConditions": [
              "The GameModel instance passed to the method should be initialized and have a valid state."
            ],
            "returns": "A javafx.scene.canvas.Canvas object containing the new game image.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SECOND",
            "visibility": "public",
            "simpleName": "SECOND",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model representing the current state of the solitaire game."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int PADDING = 5;",
            "visibility": "private",
            "simpleName": "PADDING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
            "kind": "method",
            "sourceText": "/**\r\n * Called whenever the state of the\r\n * game model changes.\r\n */\r\nvoid gameStateChanged();",
            "docComment": "Called whenever the state of the \r\ngame model changes.\r\n",
            "metaSrc": "source code",
            "description": "Notifies listeners that the game state has changed.",
            "howItWorks": "The method does not take any parameters and simply returns void. It is intended to be implemented by classes that listen for game state changes.",
            "howToUse": "This method should be called whenever the game state changes to notify all registered listeners.",
            "layer": "Logic",
            "postConditions": [
              "All registered listeners are notified of the game state change."
            ],
            "preConditions": [],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragExitedHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            pImageView.setEffect(null);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag exited event for a card image view in the Solitaire game.",
            "howItWorks": "Creates an event handler that removes any visual effects from the ImageView when a drag operation exits the ImageView, and consumes the event to prevent further processing.",
            "howToUse": "Call this method with an ImageView and a Card object to set up the drag exited handler for that card image view.",
            "layer": "UI",
            "postConditions": [
              "The visual effects of pImageView are removed.",
              "pEvent is consumed to prevent further processing."
            ],
            "preConditions": [],
            "returns": "A javafx.event.EventHandler<javafx.scene.input.DragEvent> that handles the drag exited event for the ImageView.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.lang.String)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a card transfer from a serialized\r\n * version of the cards.\r\n *\r\n * @param pString\r\n * \t\tThe serialized version\r\n */\r\npublic CardTransfer(java.lang.String pString) {\r\n    assert (pString != null) && (pString.length() > 0);\r\n    java.lang.String[] tokens = pString.split(ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR);\r\n    aCards = new ca.mcgill.cs.stg.solitaire.cards.Card[tokens.length];\r\n    for (int i = 0; i < tokens.length; i++) {\r\n        aCards[i] = ca.mcgill.cs.stg.solitaire.cards.Card.get(tokens[i]);\r\n    }\r\n    assert aCards.length > 0;\r\n}",
            "docComment": "Creates a card transfer from a serialized\r\nversion of the cards.\r\n\r\n@param pString\r\n\t\tThe serialized version\r\n",
            "metaSrc": "source code",
            "description": "Creates a card transfer object based on a string representation of cards.",
            "howItWorks": "The constructor takes a string input, splits it into tokens using a separator, and then creates an array of Card objects from these tokens. Each token is converted to a Card object using the Card.get method.",
            "howToUse": "Create an instance of CardTransfer by passing a string representation of cards to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "aCards array is initialized with Card objects created from the input string.",
              "aCards array length is greater than 0."
            ],
            "preConditions": [
              "pString is not null and has a length greater than 0."
            ],
            "returns": "A new instance of CardTransfer containing an array of Card objects.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "model",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void perform() {\r\n    assert isLegalMove(aCard, aDestination);\r\n    move(aCard, aDestination);\r\n    aMoves.push(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Performs a legal move of a card in the game of solitaire.",
            "howItWorks": "The method checks if the move is legal using isLegalMove(), then moves the card to the destination using move(). It also pushes the move onto a stack of moves.",
            "howToUse": "Call perform() with a Card object and a Location object (which could be either a FoundationPile or a TableauPile) to execute the move.",
            "layer": "Logic",
            "postConditions": [
              "The card is moved to the specified destination.",
              "The move is added to a stack of moves."
            ],
            "preConditions": [
              "isLegalMove(aCard, aDestination) returns true."
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "static method",
            "sourceText": "private static java.lang.String getCode(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES[pCard.getRank().ordinal()] + ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES[pCard.getSuit().ordinal()];\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Generates a unique code for a card based on its rank and suit.",
            "howItWorks": "The method concatenates the rank code and suit code of a card to form a unique string identifier.",
            "howToUse": "Call getCode() with an instance of Card to retrieve its unique code.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [],
            "returns": "A string representing the unique code of the card.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "cards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards",
            "kind": "package",
            "metaSrc": "source code",
            "description": "A package containing classes related to card game components in a solitaire game implementation.",
            "title": "ca.mcgill.cs.stg.solitaire.cards",
            "keywords": [
              "Card",
              "Deck",
              "Rank",
              "Suit",
              "CardStack",
              "CardImages"
            ],
            "layer": "Logic"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(javafx.scene.image.ImageView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
            "kind": "constructor",
            "sourceText": "CardDragHandler(javafx.scene.image.ImageView pView) {\r\n    aImageView = pView;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isDeckEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the deck has no card left in it.\r\n */\r\nboolean isDeckEmpty();",
            "docComment": "\r\n@return True if the deck has no card left in it.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the deck is empty.",
            "howItWorks": "This method returns a boolean value indicating whether the deck of cards in the game model view is empty or not.",
            "howToUse": "Call this method to determine if there are any cards left in the deck. It can be used before dealing a card to check if the game should end.",
            "layer": "Logic",
            "postConditions": [
              "The returned boolean value is true if the deck is empty, false otherwise."
            ],
            "preConditions": [
              "The GameModelView object must be properly initialized and contain a reference to the deck of cards."
            ],
            "returns": "A boolean indicating whether the deck is empty.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FOURTH",
            "visibility": "public",
            "simpleName": "FOURTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "QUEEN",
            "visibility": "public",
            "simpleName": "QUEEN",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
            "kind": "constructor",
            "sourceText": "Suit() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "getTotalSize()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The total number of cards in all the foundation piles.\r\n */\r\nint getTotalSize() {\r\n    int total = 0;\r\n    for (ca.mcgill.cs.stg.solitaire.cards.CardStack stack : aPiles.values()) {\r\n        total += stack.size();\r\n    }\r\n    return total;\r\n}",
            "docComment": "\r\n@return The total number of cards in all the foundation piles.\r\n",
            "metaSrc": "source code",
            "description": "Calculates the total number of cards in all stacks within the Foundations class.",
            "howItWorks": "Iterates through each CardStack in aPiles and adds its size to a running total.",
            "howToUse": "Call getTotalSize() on an instance of Foundations to get the total number of cards across all stacks.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The returned integer is equal to the sum of all CardStack sizes in aPiles."
              }
            ],
            "preConditions": [
              {
                "condition": "aPiles contains instances of CardStack."
              }
            ],
            "returns": "An integer representing the total number of cards across all stacks.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pArgs",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Command-line arguments (not used in this method)."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n * Places pCard on top of the deck.\r\n *\r\n * @param pCard\r\n * \t\tThe card to place on top of the deck.\r\n * @pre pCard !=null\r\n */\r\npublic void push(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert pCard != null;\r\n    aCards.push(pCard);\r\n}",
            "docComment": "Places pCard on top of the deck.\r\n\r\n@param pCard\r\n\t\tThe card to place on top of the deck.\r\n@pre pCard !=null\r\n",
            "metaSrc": "source code",
            "description": "Adds a card to the deck.",
            "howItWorks": "The method checks if the card is not null and then pushes it onto the stack using aCards.push(pCard).",
            "howToUse": "Call push with an instance of Card to add it to the deck.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pCard != null"
            ],
            "returns": "Void.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card we wish to move\r\n * @param pLocation\r\n * \t\tThe desired location for pCard\r\n * @return True if pCard can be moved to the top of pLocation.\r\nThis is only possible if its rank is immediately superior\r\nto that of the card currently on top of the pile or, in\r\nthe case of an ace, if the location is empty.\r\n * @pre pCard != null && pLocation != null\r\n */\r\nboolean canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pCard != null) && (pLocation != null);\r\n    if (isEmpty(pLocation)) {\r\n        return pCard.getRank() == ca.mcgill.cs.stg.solitaire.cards.Rank.ACE;\r\n    } else {\r\n        return (pCard.getSuit() == peek(pLocation).getSuit()) && (pCard.getRank().ordinal() == (peek(pLocation).getRank().ordinal() + 1));\r\n    }\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card we wish to move\r\n@param pLocation\r\n\t\tThe desired location for pCard\r\n@return True if pCard can be moved to the top of pLocation.\r\nThis is only possible if its rank is immediately superior\r\nto that of the card currently on top of the pile or, in\r\nthe case of an ace, if the location is empty.\r\n@pre pCard != null && pLocation != null\r\n",
            "metaSrc": "source code",
            "assertions": [
              {
                "condition": "(pCard != null) && (pLocation != null)",
                "message": "Both pCard and pLocation must not be null."
              }
            ],
            "description": "Determines if a card can be moved to a foundation pile based on the card's rank and suit.",
            "howItWorks": "The method checks if the foundation pile is empty. If it is, it returns true only if the card is an Ace. Otherwise, it checks if the card has the same suit as the top card in the pile and if its rank is exactly one higher than the top card's rank.",
            "howToUse": "Call canMoveTo() with a Card object and a FoundationPile object to determine if the card can be moved to that foundation pile.",
            "layer": "Logic",
            "returns": "A boolean indicating whether the card can be moved to the specified foundation pile."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be added."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.gui.CardDragHandler aDragHandler;",
            "visibility": "private",
            "simpleName": "aDragHandler",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.Deck aDeck = new ca.mcgill.cs.stg.solitaire.cards.Deck();",
            "visibility": "private",
            "simpleName": "aDeck",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.Foundations aFoundations = new ca.mcgill.cs.stg.solitaire.model.Foundations();",
            "visibility": "private",
            "simpleName": "aFoundations",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.TableauPile aIndex;",
            "visibility": "private",
            "simpleName": "aIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "initialize()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
            "kind": "method",
            "sourceText": "/**\r\n * Initializes the FoundationPiles object to reset it to four empty piles.\r\n */\r\nvoid initialize() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile index : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        aPiles.put(index, new ca.mcgill.cs.stg.solitaire.cards.CardStack());\r\n    }\r\n}",
            "docComment": "Initializes the FoundationPiles object to reset it to four empty piles.\r\n",
            "metaSrc": "source code",
            "description": "Initializes the foundations in a solitaire game by creating new card stacks for each foundation pile.",
            "howItWorks": "Iterates over all FoundationPile values and creates a new CardStack for each, storing them in a map with the FoundationPile as the key.",
            "howToUse": "Call this method to set up the foundations before starting a game of solitaire.",
            "layer": "Logic",
            "postConditions": [
              "All FoundationPile values have a new CardStack associated with them in the aPiles map."
            ],
            "preConditions": [],
            "returns": "void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int PADDING = 5;",
            "visibility": "private",
            "simpleName": "PADDING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "CLUBS",
            "visibility": "public",
            "simpleName": "CLUBS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.TableauPile aIndex;",
            "visibility": "private",
            "simpleName": "aIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": null
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "toString()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @see java.lang.Object#toString()\r\n */\r\n@java.lang.Override\r\npublic java.lang.String toString() {\r\n    return (aRank + \" of \") + aSuit;\r\n}",
            "docComment": "\r\n@see java.lang.Object#toString()\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isDiscardPileEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the discard pile has no card in it.\r\n */\r\nboolean isDiscardPileEmpty();",
            "docComment": "\r\n@return True if the discard pile has no card in it.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the discard pile is empty.",
            "howItWorks": "This method returns a boolean value indicating whether the discard pile in the game model view is currently empty or not.",
            "howToUse": "Call this method to determine if there are any cards left in the discard pile. It can be used to check if the player has won by successfully discarding all cards from their hand and the draw pile.",
            "layer": "Logic",
            "postConditions": [
              "The returned boolean value accurately reflects whether the discard pile is empty or not."
            ],
            "preConditions": [
              "The game model view must be initialized and have a valid discard pile object."
            ],
            "returns": "A boolean indicating whether the discard pile is empty (true) or not (false).",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pIndex\r\n * \t\tThe suit stack to check\r\n * @return True if the suit stack for pSuit is empty\r\n */\r\nboolean isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile pIndex);",
            "docComment": "\r\n@param pIndex\r\n\t\tThe suit stack to check\r\n@return True if the suit stack for pSuit is empty\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Component that shows a stack of cards in \r\nthe bottom stacks.\r\n",
            "simpleName": "CardPileView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return True if pCard is a visible king located at the bottom\r\nof the pile.\r\n * @pre pCard != null && contains(pCard);\r\n */\r\npublic boolean isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && contains(pCard);\r\n    return (pCard.getRank() == ca.mcgill.cs.stg.solitaire.cards.Rank.KING) && (aPiles.get(getPile(pCard)).peek(0) == pCard);\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return True if pCard is a visible king located at the bottom\r\nof the pile.\r\n@pre pCard != null && contains(pCard);\r\n",
            "metaSrc": "source code",
            "description": "Checks if a given card is the bottom king in any of the tableau piles.",
            "howItWorks": "The method checks if the provided card is not null and is present in any of the tableau piles. It then verifies if the rank of the card is King and if it is at the bottom of its respective pile by comparing it with the top card of that pile.",
            "howToUse": "Call this method with an instance of Card to determine if it is the bottom king in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if the card is the bottom king in any of the tableau piles, otherwise false."
            ],
            "preConditions": [
              "pCard is not null.",
              "pCard is present in any of the tableau piles."
            ],
            "returns": "A boolean indicating whether the given card is the bottom king in any of the tableau piles.",
            "stereotype": "Query"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "void setCard(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    aCard = pCard;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Sets the card for the CardDragHandler.",
            "howItWorks": "The method assigns the provided card to the instance variable aCard.",
            "howToUse": "Call setCard with an instance of ca.mcgill.cs.stg.solitaire.cards.Card to update the card associated with this handler.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FIRST",
            "visibility": "public",
            "simpleName": "FIRST",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    if (aModel.isDiscardPileEmpty()) {\r\n        getChildren().get(0).setVisible(false);\r\n    } else {\r\n        getChildren().get(0).setVisible(true);\r\n        ca.mcgill.cs.stg.solitaire.cards.Card topCard = aModel.peekDiscardPile();\r\n        javafx.scene.image.ImageView image = ((javafx.scene.image.ImageView) (getChildren().get(0)));\r\n        image.setImage(ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(topCard));\r\n        aDragHandler.setCard(topCard);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the visibility of the top card image in the discard pile based on whether the discard pile is empty or not.",
            "howItWorks": "Checks if the discard pile is empty. If it is, sets the visibility of the top card image to false. Otherwise, sets it to true and updates the image with the current top card from the model.",
            "howToUse": "Call this method whenever the game state changes to update the visibility and content of the discard pile view.",
            "layer": "UI",
            "postConditions": [
              "The visibility of the top card image is updated based on whether the discard pile is empty or not.",
              "If the discard pile is not empty, the image is updated to reflect the current top card."
            ],
            "preConditions": [
              "The game model must be initialized and contain a valid state for the discard pile."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    if (aModel.isFoundationPileEmpty(aIndex)) {\r\n        getChildren().get(0).setVisible(false);\r\n    } else {\r\n        getChildren().get(0).setVisible(true);\r\n        ca.mcgill.cs.stg.solitaire.cards.Card topCard = aModel.peekSuitStack(aIndex);\r\n        javafx.scene.image.ImageView image = ((javafx.scene.image.ImageView) (getChildren().get(0)));\r\n        image.setImage(ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(topCard));\r\n        aDragHandler.setCard(topCard);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the visibility of a card image based on whether the foundation pile is empty or not.",
            "howItWorks": "Checks if the foundation pile is empty using aModel.isFoundationPileEmpty(aIndex). If it is, sets the visibility of the first child to false. Otherwise, sets it to true and updates the ImageView with the top card's image from aModel.peekSuitStack(aIndex) and sets the card for aDragHandler.",
            "howToUse": "Call gameStateChanged() on an instance of SuitStack when the game state changes, typically after a move is made or checked.",
            "layer": "UI",
            "returns": "void"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The location of the foundation pile."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents the suit of a playing card.\r\n",
            "simpleName": "Suit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit",
            "kind": "enum",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Represents the four suits in a standard deck of cards: DIAMONDS, SPADES, HEARTS, and CLUBS.",
            "keywords": [
              "Suit",
              "Enum",
              "Card Game"
            ],
            "roleStereotype": "Information Holder"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "The different piles of the tableau.\r\n",
            "simpleName": "TableauPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Represents different positions in a tableau pile of cards in the solitaire game. It inherits from Location and contains constants representing specific card positions.",
            "keywords": [
              "TableauPile",
              "Location",
              "FIRST",
              "FIFTH",
              "THIRD",
              "SIXTH",
              "SECOND",
              "FOURTH",
              "SEVENTH"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SIXTH",
            "visibility": "public",
            "simpleName": "SIXTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Plays N games and computes the number of wins.\r\n",
            "simpleName": "Driver",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "The Driver class in a solitaire game implementation. It initializes a GameModel with a GreedyPlayingStrategy and runs multiple games to calculate the average score and win ratio.",
            "keywords": [
              "solitaire",
              "game",
              "Driver",
              "GameModel",
              "GreedyPlayingStrategy"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pLocation\r\n * \t\tThe location of the pile to check.\r\n * @return True if the pile at pLocation is empty\r\n * @pre pLocation != null\r\n */\r\nboolean isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert pLocation != null;\r\n    return aPiles.get(pLocation).isEmpty();\r\n}",
            "docComment": "\r\n@param pLocation\r\n\t\tThe location of the pile to check.\r\n@return True if the pile at pLocation is empty\r\n@pre pLocation != null\r\n",
            "metaSrc": "source code",
            "description": "Checks if a FoundationPile is empty.",
            "howItWorks": "The method calls the isEmpty() method of a CardStack object retrieved from a collection using the provided FoundationPile as a key. It asserts that the input FoundationPile is not null before performing the check.",
            "howToUse": "Call this method with an instance of FoundationPile to determine if it contains any cards.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The method returns true if the FoundationPile is empty, and false otherwise."
              }
            ],
            "preConditions": [
              {
                "condition": "The input FoundationPile must not be null."
              }
            ],
            "returns": "A boolean indicating whether the FoundationPile is empty or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "/* If it's possible to move the top of the discard pile to the foundation, do it. */\r\nprivate static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDiscardPileEmpty()) {\r\n        return pModel.getNullMove();\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile pile : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        if (pModel.isLegalMove(pModel.peekDiscardPile(), pile)) {\r\n            return pModel.getCardMove(pModel.peekDiscardPile(), pile);\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location for the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCode",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The code representing the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.CardStack aDiscard = new ca.mcgill.cs.stg.solitaire.cards.CardStack();",
            "visibility": "private",
            "simpleName": "aDiscard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "kind": "constructor",
            "sourceText": "private Card(ca.mcgill.cs.stg.solitaire.cards.Rank pRank, ca.mcgill.cs.stg.solitaire.cards.Suit pSuit) {\r\n    aRank = pRank;\r\n    aSuit = pSuit;\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location for the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new deck of 52 cards, shuffled.\r\n */\r\npublic Deck() {\r\n    shuffle();\r\n}",
            "docComment": "Creates a new deck of 52 cards, shuffled.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new deck of cards and shuffles them.",
            "howItWorks": "The constructor initializes the deck with all 52 cards and then calls the shuffle method to randomize the order of the cards.",
            "howToUse": "Create an instance of ca.mcgill.cs.stg.solitaire.cards.Deck. The constructor will automatically shuffle the deck.",
            "layer": "Logic",
            "postConditions": [
              "The deck contains all 52 cards in a shuffled order."
            ],
            "preConditions": [],
            "returns": "Void. The newly created instance of Deck is returned with its cards shuffled.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int PADDING = 5;",
            "visibility": "private",
            "simpleName": "PADDING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location for the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "find(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tA card to locate\r\n * @return The game location where this card currently is.\r\n * @pre the card is in a location where it can be found and moved.\r\n */\r\nprivate ca.mcgill.cs.stg.solitaire.model.Location find(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    if ((!aDiscard.isEmpty()) && (aDiscard.peek() == pCard)) {\r\n        return ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE;\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile index : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        if ((!aFoundations.isEmpty(index)) && (aFoundations.peek(index) == pCard)) {\r\n            return index;\r\n        }\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (aTableau.contains(pCard, index)) {\r\n            return index;\r\n        }\r\n    }\r\n    assert false;// We did not find the card: the precondition was not met.\r\n\r\n    return null;\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tA card to locate\r\n@return The game location where this card currently is.\r\n@pre the card is in a location where it can be found and moved.\r\n",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The target pile."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "JACK",
            "visibility": "public",
            "simpleName": "JACK",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
            "kind": "constructor",
            "sourceText": "TableauPile() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()",
          "labels": [
            "Script"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<clinit>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()",
            "kind": "class initializer",
            "sourceText": "static {\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyDiscardIfDiscardPileIsEmpty);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveDiscardToFoundation);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveDiscardToTableau);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveFromTableauToFoundation);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveWithinTableau);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyDiscard);\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Obtain the card on top of the foundation pile pPile\r\n * without removing it.\r\n *\r\n * @param pPile\r\n * \t\tThe pile to check.\r\n * @return The card on top of the pile.\r\n * @pre pPile != null && !isFoundationPileEmpty(pIndex)\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile pPile) {\r\n    assert (pPile != null) && (!isFoundationPileEmpty(pPile));\r\n    return aFoundations.peek(pPile);\r\n}",
            "docComment": "Obtain the card on top of the foundation pile pPile\r\nwithout removing it.\r\n\r\n@param pPile\r\n\t\tThe pile to check.\r\n@return The card on top of the pile.\r\n@pre pPile != null && !isFoundationPileEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the top card of a foundation pile without removing it.",
            "howItWorks": "The method checks if the FoundationPile is not empty and then retrieves the top card using the peek method of the Foundations class.",
            "howToUse": "Call this method on an instance of FoundationPile to get the top card without removing it from the pile.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pPile != null",
              "!isFoundationPileEmpty(pPile)"
            ],
            "returns": "The top card of the foundation pile.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
            "kind": "constructor",
            "sourceText": "Rank() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragOverHandler(javafx.scene.image.ImageView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragOverHandler(final javafx.scene.image.ImageView pView) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            if ((pEvent.getGestureSource() != pView) && pEvent.getDragboard().hasString()) {\r\n                ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n                if ((transfer.size() == 1) && aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                    pEvent.acceptTransferModes(javafx.scene.input.TransferMode.MOVE);\r\n                }\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles drag-and-drop events for cards in the SuitStack of a solitaire game.",
            "howItWorks": "The handler checks if the dragged item is not the same as the target view and if it contains a string (indicating a card). It then creates a CardTransfer object from the string. If the transfer contains exactly one card and the move is legal according to the game model, it accepts the transfer mode as MOVE.",
            "howToUse": "Create an instance of this handler and set it as the onDragOverHandler for a card's ImageView in the SuitStack.",
            "layer": "UI",
            "postConditions": [
              "If conditions are met, pEvent.acceptTransferModes(javafx.scene.input.TransferMode.MOVE)"
            ],
            "preConditions": [
              "pEvent.getGestureSource() != pView",
              "pEvent.getDragboard().hasString()"
            ],
            "returns": "A javafx.event.EventHandler<javafx.scene.input.DragEvent> that handles drag-and-drop events.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragExitedHandler()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragExitedHandler() {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            setStyle(ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag exited event for a card stack in the Solitaire game.",
            "howItWorks": "Creates an event handler that sets the border style of the SuitStack to normal and consumes the drag event.",
            "howToUse": "Call this method to get the event handler for handling drag exited events on a SuitStack.",
            "layer": "UI",
            "postConditions": [
              "The border style of the SuitStack is set to normal.",
              "The drag event is consumed."
            ],
            "preConditions": [],
            "returns": "A javafx.event.EventHandler<javafx.scene.input.DragEvent> that handles the drag exited event.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FIVE",
            "visibility": "public",
            "simpleName": "FIVE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && aTableau.contains(pCard);\r\n    return aTableau.isBottomKing(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a given card is the bottom king in any of the tableau piles.",
            "howItWorks": "The method checks if the provided card is the bottom king by calling the isBottomKing method on the aTableau object.",
            "howToUse": "Call this method with an instance of Card to determine if it is the bottom king in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pCard != null",
              "aTableau.contains(pCard)"
            ],
            "returns": "A boolean indicating whether the given card is the bottom king in any of the tableau piles.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Component that shows the state of the discard pile and allows\r\ndragging cards from it.\r\n",
            "simpleName": "DiscardPileView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A view component for displaying the discard pile in a solitaire game.",
            "keywords": [
              "DiscardPileView",
              "GameModelListener",
              "CardDragHandler"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "pop()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
            "kind": "method",
            "sourceText": "/**\r\n * Removes the card on top of the stack and returns it.\r\n *\r\n * @return The card on top of the stack.\r\n * @pre !isEmpty()\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card pop() {\r\n    assert !isEmpty();\r\n    return aCards.remove(aCards.size() - 1);\r\n}",
            "docComment": "Removes the card on top of the stack and returns it.\r\n\r\n@return The card on top of the stack.\r\n@pre !isEmpty()\r\n",
            "metaSrc": "source code",
            "description": "Removes the top card from a card stack.",
            "howItWorks": "The method checks if the stack is not empty using the isEmpty() method. If it's not empty, it removes and returns the last card in the list 'aCards'.",
            "howToUse": "Call this method on an instance of CardStack to remove the top card from the stack.",
            "layer": "Logic",
            "postConditions": [
              "The size of 'aCards' is reduced by one."
            ],
            "preConditions": [
              "The stack is not empty."
            ],
            "returns": "The top card that was removed from the stack.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view from which to retrieve a null move."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view containing the current state of the game."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String TITLE = \"Solitaire\";",
            "visibility": "private",
            "simpleName": "TITLE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Implementation of the Composite object in the composite \r\ndesign pattern.\r\n",
            "simpleName": "CompositeMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Handles the logic of performing a composite move in the solitaire game and provides functionality to undo a sequence of moves.",
            "keywords": [
              "CompositeMove",
              "solitaire",
              "moves",
              "perform",
              "undo"
            ],
            "roleStereotype": "Coordinator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "// Indexed by suit, then rank\r\nprivate static final ca.mcgill.cs.stg.solitaire.cards.Card[][] CARDS = new ca.mcgill.cs.stg.solitaire.cards.Card[ca.mcgill.cs.stg.solitaire.cards.Suit.values().length][];",
            "visibility": "private",
            "simpleName": "CARDS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Location",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents anywhere a card can be placed in Solitaire.\r\n",
            "simpleName": "Location",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Location",
            "kind": "interface",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new game model initialized to a new game.\r\n *\r\n * @param pPlayingStrategy\r\n * \t\tThe strategy to use for auto-play.\r\n * @pre pPlayingStrategy != null\r\n */\r\npublic GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy pPlayingStrategy) {\r\n    assert pPlayingStrategy != null;\r\n    aPlayingStrategy = pPlayingStrategy;\r\n    reset();\r\n}",
            "docComment": "Creates a new game model initialized to a new game.\r\n\r\n@param pPlayingStrategy\r\n\t\tThe strategy to use for auto-play.\r\n@pre pPlayingStrategy != null\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new game model with a specific playing strategy.",
            "howItWorks": "The constructor sets the playing strategy and then calls the reset method to initialize the game state.",
            "howToUse": "Create an instance of GameModel by passing a PlayingStrategy object to its constructor.",
            "layer": "Logic",
            "postConditions": [
              "aPlayingStrategy is set to pPlayingStrategy.",
              "Game state is reset."
            ],
            "preConditions": [
              "pPlayingStrategy is not null."
            ],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    if (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.FoundationPile) {\r\n        return aFoundations.canMoveTo(pCard, ((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pDestination)));\r\n    } else if (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile) {\r\n        return aTableau.canMoveTo(pCard, ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pDestination)));\r\n    } else {\r\n        return false;\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Determines if a card can be legally moved to a specified destination in the game of solitaire.",
            "howItWorks": "The method checks if the destination is an instance of FoundationPile or TableauPile and then calls the respective canMoveTo method on either Foundations or Tableau, passing the card and destination as arguments.",
            "howToUse": "Call isLegalMove() with a Card object and a Location object (which could be either a FoundationPile or a TableauPile) to determine if the card can be moved to that location.",
            "layer": "Logic",
            "preconditions": [
              "pCard != null && pDestination != null"
            ],
            "returns": "A boolean indicating whether the card can be moved to the specified destination."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The suit of the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void undo() {\r\n    aTableau.hideTop(aIndex);\r\n    aMoves.pop().undo();\r\n    notifyListeners();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "A method to undo a move in the solitaire game by hiding the top card of a TableauPile and undoing the last move.",
            "howItWorks": "The method calls hideTop() on aTableau with aIndex as the parameter, then pops the last move from aMoves and calls its undo() method. Finally, it notifies all listeners about the change in game state.",
            "howToUse": "Call this method when the user wants to undo their last action in the game.",
            "layer": "Logic",
            "postConditions": [
              "The top card of aTableau at aIndex is hidden.",
              "The last move in aMoves is undone.",
              "All registered listeners are notified about the change in game state."
            ],
            "preConditions": [
              "aTableau is not null and contains cards.",
              "aIndex is valid for aTableau."
            ],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Get the sequence consisting of pCard and all\r\n * the other cards below it, from the tableau.\r\n *\r\n * @param pCard\r\n * \t\tThe top card of the sequence\r\n * @param pPile\r\n * \t\tThe requested pile\r\n * @return A non-empty sequence of cards.\r\n * @pre pCard != null and is in pile pPile\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.CardStack getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert ((pCard != null) && (pPile != null)) && (find(pCard) == pPile);\r\n    return aTableau.getSequence(pCard, pPile);\r\n}",
            "docComment": "Get the sequence consisting of pCard and all \r\nthe other cards below it, from the tableau.\r\n\r\n@param pCard\r\n\t\tThe top card of the sequence\r\n@param pPile\r\n\t\tThe requested pile\r\n@return A non-empty sequence of cards.\r\n@pre pCard != null and is in pile pPile\r\n",
            "metaSrc": "source code",
            "description": "Retrieves a sequence of cards starting from a given card in a tableau pile.",
            "howItWorks": "This method retrieves a sequence of cards starting from a given card in a tableau pile by calling another method that performs the actual retrieval.",
            "howToUse": "Call this method with a specific card and the tableau pile from which you want to retrieve the sequence of cards.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pCard != null",
              "pPile != null"
            ],
            "returns": "A CardStack containing the sequence of cards starting from pCard.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.Card[] aCards;",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The FoundationPile to check for emptiness."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Place pCard onto the pile at the desired location.\r\n *\r\n * @param pCard\r\n * \t\tThe card to place.\r\n * @param pLocation\r\n * \t\tThe location where to place the card.\r\n * @pre pCard != null && pLocation != null\r\n */\r\nvoid push(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pCard != null) && (pLocation != null);\r\n    aPiles.get(pLocation).push(pCard);\r\n}",
            "docComment": "Place pCard onto the pile at the desired location.\r\n\r\n@param pCard\r\n\t\tThe card to place.\r\n@param pLocation\r\n\t\tThe location where to place the card.\r\n@pre pCard != null && pLocation != null\r\n",
            "metaSrc": "source code",
            "description": "Adds a card to the specified foundation pile.",
            "howItWorks": "The method checks if both the card and location are not null, then pushes the card onto the stack associated with the given location.",
            "howToUse": "Call push with an instance of Card and FoundationPile to add the card to the specified pile.",
            "layer": "Logic",
            "postConditions": [
              "The specified card is added to the stack of the given foundation pile."
            ],
            "preConditions": [
              "pCard is not null.",
              "pLocation is not null."
            ],
            "returns": "Void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isDeckEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isDeckEmpty() {\r\n    return aDeck.isEmpty();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the deck is empty.",
            "howItWorks": "Calls the isEmpty() method on an instance of Deck to determine if it contains any cards.",
            "howToUse": "Call this method on an instance of GameModel to check if the deck is empty.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "Returns true if the deck is empty, false otherwise."
              }
            ],
            "preConditions": [],
            "returns": "A boolean indicating whether the deck is empty or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String IMAGE_LOCATION = \"\";",
            "visibility": "private",
            "simpleName": "IMAGE_LOCATION",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "handle(javafx.scene.input.MouseEvent)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void handle(javafx.scene.input.MouseEvent pMouseEvent) {\r\n    javafx.scene.input.Dragboard db = aImageView.startDragAndDrop(javafx.scene.input.TransferMode.ANY);\r\n    ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT.putString(aCard.getIDString());\r\n    db.setContent(ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT);\r\n    pMouseEvent.consume();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles a mouse event to initiate a drag-and-drop operation for a card in the Solitaire game.",
            "howItWorks": "The method starts a drag-and-drop operation on an ImageView, sets a clipboard content with the card's unique identifier, and consumes the mouse event.",
            "howToUse": "Call handle(MouseEvent) on an instance of CardDragHandler to initiate a drag-and-drop operation for a specific card.",
            "layer": "UI",
            "postConditions": [],
            "preConditions": [],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.Tableau aTableau = new ca.mcgill.cs.stg.solitaire.model.Tableau();",
            "visibility": "private",
            "simpleName": "aTableau",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents one possible action in the game.\r\n",
            "simpleName": "Move",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Handles the logic of performing a move in the solitaire game, checks if a move is null, and undoes a move.",
            "keywords": [
              "Move",
              "solitaire",
              "logic",
              "perform",
              "undo"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object whose unique code is to be generated."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The pile from which to retrieve the card stack."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card being dragged."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.Map<ca.mcgill.cs.stg.solitaire.model.TableauPile, ca.mcgill.cs.stg.solitaire.cards.CardStack> aPiles = new java.util.HashMap<>();",
            "visibility": "private",
            "simpleName": "aPiles",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A class to store and manage images of the 52 cards.\r\n",
            "simpleName": "CardImages",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "This class is responsible for managing card images in the Solitaire game, including retrieving back images and generating unique codes for cards based on their rank and suit.",
            "keywords": [
              "CardImages",
              "Solitaire",
              "card images",
              "back image",
              "unique code"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "get(java.lang.String)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
            "kind": "static method",
            "sourceText": "/**\r\n * Get a flyweight card object based on its serialized form.\r\n *\r\n * @param pId\r\n * \t\tThe id string for the card. This is needs to have\r\n * \t\tbeen produced by Card.getIDString to be considered a\r\n * \t\tvalid input to this method.\r\n * @return The card object with id string pId\r\n */\r\npublic static ca.mcgill.cs.stg.solitaire.cards.Card get(java.lang.String pId) {\r\n    assert pId != null;\r\n    int id = java.lang.Integer.parseInt(pId);\r\n    return ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank.values()[id % ca.mcgill.cs.stg.solitaire.cards.Rank.values().length], ca.mcgill.cs.stg.solitaire.cards.Suit.values()[id / ca.mcgill.cs.stg.solitaire.cards.Rank.values().length]);\r\n}",
            "docComment": "Get a flyweight card object based on its serialized form.\r\n\r\n@param pId\r\n\t\tThe id string for the card. This is needs to have\r\n\t\tbeen produced by Card.getIDString to be considered a\r\n\t\tvalid input to this method.\r\n@return The card object with id string pId\r\n",
            "metaSrc": "source code",
            "description": "Creates a card object based on the given rank and suit.",
            "howItWorks": "The method parses the input string to extract an integer, which is then used to determine the rank and suit of the card. It uses these values to call another static method that creates and returns a Card object.",
            "howToUse": "Call this method with a string representation of the card's ID to get the corresponding Card object.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              {
                "condition": "pId != null",
                "description": "The input string must not be null."
              }
            ],
            "returns": "A ca.mcgill.cs.stg.solitaire.cards.Card object representing the card with the specified rank and suit.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
            "kind": "constructor",
            "sourceText": "private CardImages() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.util.List<java.util.function.Function<ca.mcgill.cs.stg.solitaire.model.GameModelView, ca.mcgill.cs.stg.solitaire.model.Move>> SUBSTRATEGIES = new java.util.ArrayList<>();",
            "visibility": "private",
            "simpleName": "SUBSTRATEGIES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "The different foundation piles.\r\n",
            "simpleName": "FoundationPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "FoundationPile is an enumeration representing the four foundation piles in a solitaire game. It inherits from Location and contains constants for the positions of the four foundation piles.",
            "keywords": [
              "solitaire",
              "foundation piles",
              "Location"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pArgs",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isDiscardPileEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isDiscardPileEmpty() {\r\n    return aDiscard.isEmpty();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the discard pile is empty.",
            "howItWorks": "The method calls the isEmpty() method on the aDiscard object, which is an instance of CardStack. This method returns true if the stack has no cards in it and false otherwise.",
            "howToUse": "Call this method on an instance of GameModel to determine if the discard pile contains any cards.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if the discard pile is empty and false otherwise."
            ],
            "preConditions": [
              "The aDiscard object must be initialized before calling this method."
            ],
            "returns": "A boolean indicating whether the discard pile is empty or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getDiscardMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getDiscardMove() {\r\n    return aDiscardMove;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the current discard move in a solitaire game.",
            "howItWorks": "The method retrieves the value of the 'aDiscardMove' field and returns it as a Move object.",
            "howToUse": "Call this method to get the current discard move in the game model.",
            "layer": "Logic",
            "postConditions": [
              "The returned Move object represents the current discard move."
            ],
            "preConditions": [
              "The 'aDiscardMove' field must be initialized with a valid Move object before calling this method."
            ],
            "returns": "A Move object representing the current discard move in the game.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "peek(int)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pIndex\r\n * \t\tThe index to peek in the stack.\r\n * @return The card at the position indicated by pIndex\r\n * @pre pIndex >= 0 && pIndex < size();\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peek(int pIndex) {\r\n    assert (pIndex >= 0) && (pIndex < size());\r\n    return aCards.get(pIndex);\r\n}",
            "docComment": "\r\n@param pIndex\r\n\t\tThe index to peek in the stack.\r\n@return The card at the position indicated by pIndex\r\n@pre pIndex >= 0 && pIndex < size();\r\n",
            "metaSrc": "source code",
            "description": "Returns the card at a specified index without removing it from the stack.",
            "howItWorks": "The method checks if the provided index is within the valid range of indices for the CardStack. If it is, it retrieves and returns the card at that index using the get() method of the ArrayList aCards.",
            "howToUse": "Call this method with an integer index to retrieve the card at that position in the stack without removing it.",
            "layer": "Logic",
            "postConditions": [
              "The method returns a Card object at the specified index if the index is valid."
            ],
            "preConditions": [
              "The index must be greater than or equal to 0 and less than the size of the stack."
            ],
            "returns": "A Card object representing the card at the specified index.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getNullMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return An instance of the Move interface\r\nthat represents no move at all.\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getNullMove();",
            "docComment": "\r\n@return An instance of the Move interface\r\nthat represents no move at all.\r\n",
            "metaSrc": "source code",
            "description": "Returns a null move in the game model view.",
            "howItWorks": "The method does not perform any operations and simply returns a null value of type Move.",
            "howToUse": "Call getNullMove() to retrieve a null move object from the GameModelView interface.",
            "layer": "Logic",
            "postConditions": [
              "Returns a null value of type ca.mcgill.cs.stg.solitaire.model.Move."
            ],
            "preConditions": [],
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a copy of the entire pile at the specified position in the tableau.\r\n *\r\n * @param pPile\r\n * \t\tThe pile to obtain.\r\n * @return A copy of the at pPile.\r\n * @pre pPile != null\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.CardStack getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert pPile != null;\r\n    return new ca.mcgill.cs.stg.solitaire.cards.CardStack(aPiles.get(pPile));\r\n}",
            "docComment": "Returns a copy of the entire pile at the specified position in the tableau.\r\n\r\n@param pPile\r\n\t\tThe pile to obtain.\r\n@return A copy of the at pPile.\r\n@pre pPile != null\r\n",
            "metaSrc": "source code",
            "description": "Retrieves a card stack from the tableau based on the given pile.",
            "howItWorks": "The method checks if the provided pile is not null and then returns a new CardStack object containing cards from the specified pile in the tableau.",
            "howToUse": "Call this method with an instance of TableauPile to get the corresponding card stack.",
            "layer": "Logic",
            "postConditions": [
              "A new CardStack object is returned containing cards from the specified pile.",
              "The returned CardStack is not null."
            ],
            "preConditions": [
              "The provided pPile parameter is not null."
            ],
            "returns": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "static method",
            "sourceText": "private static void playGame(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    pModel.reset();\r\n    boolean advanced = true;\r\n    while (advanced) {\r\n        advanced = pModel.tryToAutoPlay();\r\n    } \r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Resets the game state and attempts to automatically play moves in a solitaire game.",
            "howItWorks": "The method first resets the game state using pModel.reset(). It then enters a loop where it attempts to automatically play moves using pModel.tryToAutoPlay() until no more moves can be made.",
            "howToUse": "Call this method on an instance of GameModel to reset the game and attempt to automatically play moves.",
            "layer": "Logic",
            "postConditions": [
              "Game state is reset.",
              "All legal moves are attempted and performed if possible."
            ],
            "preConditions": [
              "pModel is not null."
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "notifyListeners()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
            "kind": "method",
            "sourceText": "private void notifyListeners() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.GameModelListener listener : aListeners) {\r\n        listener.gameStateChanged();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Notifies all registered listeners that the game state has changed.",
            "howItWorks": "The method iterates over a list of listener objects and calls their gameStateChanged() method.",
            "howToUse": "Call this method whenever the game state changes to notify all registered listeners.",
            "layer": "Logic",
            "postConditions": [
              "All registered listeners will have received the gameStateChanged() notification."
            ],
            "preConditions": [
              "There must be at least one listener registered in the aListeners list."
            ],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int Y_OFFSET = 17;",
            "visibility": "private",
            "simpleName": "Y_OFFSET",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragDroppedHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            javafx.scene.input.Dragboard db = pEvent.getDragboard();\r\n            boolean success = false;\r\n            if (db.hasString()) {\r\n                aModel.getCardMove(new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(db.getString()).getTop(), aIndex).perform();\r\n                success = true;\r\n            }\r\n            pEvent.setDropCompleted(success);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic for a drag-and-drop event in a solitaire game.",
            "howItWorks": "The method retrieves the dragboard from the drag event, checks if it contains a string (representing a card), and then performs the move using the model. It sets the drop completed status based on whether the move was successful and consumes the event to prevent further processing.",
            "howToUse": "This method should be called when a drag-and-drop event occurs in the game.",
            "layer": "UI",
            "postConditions": [
              "The specified move is performed if the dragboard contains a valid card."
            ],
            "preConditions": [
              "The dragboard must contain a string representing a valid card."
            ],
            "returns": "Void.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "double",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "double",
            "qualifiedName": "double",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.lang.Iterable)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a CardStack that contains all the cards\r\n * in pCard, in the iteration order, from bottom to top.\r\n *\r\n * @param pCards\r\n * \t\tThe cards to initialize the stack with.\r\n */\r\npublic CardStack(java.lang.Iterable<ca.mcgill.cs.stg.solitaire.cards.Card> pCards) {\r\n    this();\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : pCards) {\r\n        aCards.add(card);\r\n    }\r\n}",
            "docComment": "Creates a CardStack that contains all the cards\r\nin pCard, in the iteration order, from bottom to top.\r\n\r\n@param pCards\r\n\t\tThe cards to initialize the stack with.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the CardStack class with cards from an iterable collection.",
            "howItWorks": "The constructor initializes a new empty CardStack and then iterates over the provided iterable, adding each card to the stack.",
            "howToUse": "Call the constructor with an iterable collection of cards to create a new CardStack object.",
            "layer": "Logic",
            "postConditions": [
              "The newly created CardStack contains all cards from the provided iterable."
            ],
            "preConditions": [
              "pCards is not null."
            ],
            "returns": "A new instance of CardStack with the specified cards.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "THREE",
            "visibility": "public",
            "simpleName": "THREE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pArgs",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Command-line arguments (not used in this method)."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile where the card will be added."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getIDString()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
            "kind": "method",
            "sourceText": "/**\r\n * Return the id string for this card.\r\n *\r\n * @return A string uniquely representing this card. The string\r\nformat is not specified except that it is fully compatible\r\nwith the format expected by Card.get(String).\r\n */\r\npublic java.lang.String getIDString() {\r\n    return java.lang.Integer.toString((getSuit().ordinal() * ca.mcgill.cs.stg.solitaire.cards.Rank.values().length) + getRank().ordinal());\r\n}",
            "docComment": "Return the id string for this card.\r\n\r\n@return A string uniquely representing this card. The string\r\nformat is not specified except that it is fully compatible\r\nwith the format expected by Card.get(String).\r\n",
            "metaSrc": "source code",
            "description": "Returns a unique string identifier for a card based on its suit and rank.",
            "howItWorks": "The method calculates an integer value by multiplying the ordinal of the card's suit with the number of ranks, then adding the ordinal of the card's rank. This integer is then converted to a string using Integer.toString().",
            "howToUse": "Call getIDString() on an instance of Card to retrieve its unique identifier string.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The returned string is a valid representation of an integer."
              }
            ],
            "preConditions": [],
            "returns": "A java.lang.String representing the unique identifier of the card.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "THIRD",
            "visibility": "public",
            "simpleName": "THIRD",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The current state of the game model view."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "A move that represents the intention to move pCard\r\nto pDestination, possibly including all cards stacked\r\non top of pCard if pCard is in a working stack.\r\n",
            "simpleName": "CardMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "A class representing a card move in a solitaire game model.",
            "keywords": [
              "CardMove",
              "GameModel",
              "Card",
              "Location",
              "perform",
              "undo"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> previous = java.util.Optional.empty();\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : aPiles.get(getPile(pCard))) {\r\n        if (card == pCard) {\r\n            return previous;\r\n        }\r\n        previous = java.util.Optional.of(card);\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the previous card in a pile given a specific card.",
            "howItWorks": "Iterates through the cards in the pile and returns the card immediately before the specified card. If the specified card is not found, it returns an empty Optional.",
            "howToUse": "Call this method with an instance of Card to get the previous card in its respective pile.",
            "layer": "Logic",
            "postConditions": [
              "Returns an Optional containing the previous card if found.",
              "Returns an empty Optional if the specified card is not found in its pile."
            ],
            "preConditions": [
              "The specified card must be present in one of the tableau piles."
            ],
            "returns": "java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card>",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a legal move for the game, or the\r\n * Null move if that is not possible.\r\n *\r\n * @param pModel\r\n * \t\tA game model to query.\r\n * @return The move computed.\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel);",
            "docComment": "Returns a legal move for the game, or the \r\nNull move if that is not possible.\r\n\r\n@param pModel\r\n\t\tA game model to query.\r\n@return The move computed.\r\n",
            "metaSrc": "source code",
            "description": "Determines the legal moves in a solitaire game based on the current game model.",
            "howItWorks": "The method takes a GameModelView object as input, which represents the current state of the game. It then evaluates the possible moves according to the rules of solitaire and returns a Move object representing one of the legal moves if any are available.",
            "howToUse": "Call this method with an instance of GameModelView containing the current game state. The method will return a Move object if there is at least one legal move; otherwise, it may return null or throw an exception depending on the implementation.",
            "layer": "Logic",
            "postConditions": [
              "A Move object representing a legal move is returned if any are available.",
              "If no legal moves are found, null or an exception may be returned depending on the implementation."
            ],
            "preConditions": [
              "The GameModelView object must be properly initialized with the current state of the game."
            ],
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "KING",
            "visibility": "public",
            "simpleName": "KING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy aPlayingStrategy;",
            "visibility": "private",
            "simpleName": "aPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pListener",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The listener to be added."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The current state of the game model."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPrimaryStage",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.FoundationPile aIndex;",
            "visibility": "private",
            "simpleName": "aIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SECOND",
            "visibility": "public",
            "simpleName": "SECOND",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.Suit aSuit;",
            "visibility": "private",
            "simpleName": "aSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return true if pCard is visible in the piles.\r\n * @pre contains(pCard)\r\n */\r\nboolean isVisible(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert contains(pCard);\r\n    return aVisible.contains(pCard);\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return true if pCard is visible in the piles.\r\n@pre contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific card is visible in any of the tableau piles.",
            "howItWorks": "The method uses an assertion to ensure that the card is present in any of the tableau piles before checking if it is visible. It then returns whether the card is contained within the 'aVisible' set.",
            "howToUse": "Call this method with an instance of Card to determine if it is visible in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The method returns true if the card is visible in any of the tableau piles, and false otherwise."
              }
            ],
            "preConditions": [
              {
                "condition": "The card must be present in any of the tableau piles before checking for visibility."
              },
              {
                "condition": "pCard != null"
              }
            ],
            "returns": "A boolean indicating whether the card is visible in any of the tableau piles.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The Card object associated with the ImageView, though it is not used in this method."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "draw()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
            "kind": "method",
            "sourceText": "/**\r\n * Draws a card from the deck and removes the card from the deck.\r\n *\r\n * @return The card drawn.\r\n * @pre !isEmpty()\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card draw() {\r\n    assert !isEmpty();\r\n    return aCards.pop();\r\n}",
            "docComment": "Draws a card from the deck and removes the card from the deck.\r\n\r\n@return The card drawn.\r\n@pre !isEmpty()\r\n",
            "metaSrc": "source code",
            "description": "Removes the top card from a deck of cards.",
            "howItWorks": "The method checks if the deck is not empty using the isEmpty() method. If it's not empty, it removes and returns the top card from the deck using the pop() method of CardStack.",
            "howToUse": "Call this method on an instance of Deck to remove the top card from the deck. Ensure that the deck is not empty before calling draw() to avoid assertion errors.",
            "layer": "Logic",
            "postConditions": [
              "The top card has been removed from the deck."
            ],
            "preConditions": [
              "The deck is not empty."
            ],
            "returns": "A Card object representing the top card that was removed from the deck.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return True if pCard is a visible king located at the bottom of the pile.\r\n * @pre pCard != null && contains(pCard);\r\n */\r\nboolean isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card pCard);",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return True if pCard is a visible king located at the bottom of the pile.\r\n@pre pCard != null && contains(pCard);\r\n",
            "metaSrc": "source code",
            "description": "Determines if a given card is the bottom king in a solitaire game.",
            "howItWorks": "The method checks if the provided card is an instance of King and if it is the last card in its column.",
            "howToUse": "Call this method with a Card object to check if it is the bottom king.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if the card is the bottom king, false otherwise."
            ],
            "preConditions": [
              "The card must be part of a valid game state."
            ],
            "returns": "A boolean indicating whether the card is the bottom king.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "tryToAutoPlay()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
            "kind": "method",
            "sourceText": "/**\r\n * Try to automatically make a move. This may result in nothing happening\r\n * if the auto-play strategy cannot make a decision.\r\n *\r\n * @return Whether a move was performed or not.\r\n */\r\npublic boolean tryToAutoPlay() {\r\n    ca.mcgill.cs.stg.solitaire.model.Move move = aPlayingStrategy.getLegalMove(this);\r\n    move.perform();\r\n    return !move.isNull();\r\n}",
            "docComment": "Try to automatically make a move. This may result in nothing happening\r\nif the auto-play strategy cannot make a decision.\r\n\r\n@return Whether a move was performed or not.\r\n",
            "metaSrc": "source code",
            "description": "Determines if a legal move can be automatically played in the solitaire game.",
            "howItWorks": "The method calls aPlayingStrategy.getLegalMove() to get a legal move, performs it using move.perform(), and checks if the move is not null.",
            "howToUse": "Call this method on an instance of GameModel to attempt to automatically play a legal move in the game.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The game model is updated with the performed move if it is legal."
              },
              {
                "condition": "Returns true if a non-null move was performed, otherwise false."
              }
            ],
            "preConditions": [
              {
                "condition": "There must be at least one legal move available according to the playing strategy."
              }
            ],
            "returns": "A boolean indicating whether a non-null move was successfully performed.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates an empty CardStack.\r\n */\r\npublic CardStack() {\r\n    aCards = new java.util.ArrayList<>();\r\n}",
            "docComment": "Creates an empty CardStack.\r\n",
            "metaSrc": "source code",
            "description": "Initializes a new instance of the CardStack class.",
            "howItWorks": "Creates an empty ArrayList to store cards.",
            "howToUse": "Call the constructor without any parameters to create a new CardStack object.",
            "layer": "Logic",
            "postConditions": [
              "aCards is initialized as an empty ArrayList."
            ],
            "preConditions": [],
            "returns": "A new instance of CardStack with an empty list of cards.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "DISCARD_PILE",
            "visibility": "public",
            "simpleName": "DISCARD_PILE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getCard(java.lang.String)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
            "kind": "static method",
            "sourceText": "private static javafx.scene.image.Image getCard(java.lang.String pCode) {\r\n    javafx.scene.image.Image image = ((javafx.scene.image.Image) (ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards.get(pCode)));\r\n    if (image == null) {\r\n        image = new javafx.scene.image.Image(ca.mcgill.cs.stg.solitaire.cards.CardImages.class.getClassLoader().getResourceAsStream((ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION + pCode) + ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX));\r\n        ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards.put(pCode, image);\r\n    }\r\n    return image;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves a card image based on its code.",
            "howItWorks": "The method first attempts to retrieve an image from a cache. If the image is not found, it loads the image from a resource and caches it for future use.",
            "howToUse": "Call getCard with a string representing the card code.",
            "layer": "Data",
            "postConditions": [
              "The method returns a javafx.scene.image.Image object corresponding to the card code provided."
            ],
            "preConditions": [
              "The card code must be valid and correspond to an existing image resource."
            ],
            "returns": "A javafx.scene.image.Image object representing the card.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates an empty tableau.\r\n */\r\nTableau() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        aPiles.put(index, new ca.mcgill.cs.stg.solitaire.cards.CardStack());\r\n    }\r\n}",
            "docComment": "Creates an empty tableau.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The suit to compare with the current suit."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getTop()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The top card in the transfer (the one with the highest rank)\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card getTop() {\r\n    return aCards[0];\r\n}",
            "docComment": "\r\n@return The top card in the transfer (the one with the highest rank)\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the top card from a collection of cards.",
            "howItWorks": "The method returns the first element in an array of cards.",
            "howToUse": "Call getTop() on an instance of CardTransfer to retrieve the top card.",
            "layer": "Logic",
            "postConditions": [
              "The returned card is the first element in the array aCards."
            ],
            "preConditions": [
              "The array aCards must not be empty."
            ],
            "returns": "A Card object representing the top card.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Stores a string representing the card dragged.\r\n",
            "simpleName": "CardDragHandler",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Handles a mouse event to initiate a drag-and-drop operation for a card in the Solitaire game.",
            "keywords": [
              "CardDragHandler",
              "handle",
              "MouseEvent",
              "drag-and-drop",
              "Solitaire"
            ],
            "roleStereotype": "User Interfacer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "static method",
            "sourceText": "/**\r\n * Return the image of a card.\r\n *\r\n * @param pCard\r\n * \t\tthe target card\r\n * @return An icon representing the chosen card.\r\n */\r\npublic static javafx.scene.image.Image getCard(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert pCard != null;\r\n    return ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(pCard));\r\n}",
            "docComment": "Return the image of a card.\r\n\r\n@param pCard\r\n\t\tthe target card\r\n@return An icon representing the chosen card.\r\n",
            "metaSrc": "source code",
            "description": "Generates a unique code for a card based on its rank and suit.",
            "howItWorks": "This method takes a Card object as input, asserts that it is not null, and then calls another method to generate a unique code based on the card's rank and suit. The generated code is then used to retrieve the corresponding card image.",
            "howToUse": "Call getCode() with an instance of Card to retrieve its unique code.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              {
                "condition": "pCard != null",
                "description": "The input card object must not be null."
              }
            ],
            "returns": "A string representing the unique code of the card.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view associated with the card being dragged."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The FoundationPile from which to peek at the top card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pRank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The rank of the card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final ca.mcgill.cs.stg.solitaire.model.Move NULL_MOVE = new ca.mcgill.cs.stg.solitaire.model.Move() {\r\n    @java.lang.Override\r\n    public void perform() {\r\n    }// Does nothing on purpose\r\n\r\n\r\n    @java.lang.Override\r\n    public boolean isNull() {\r\n        return true;\r\n    }\r\n\r\n    @java.lang.Override\r\n    public void undo() {\r\n    }// Does nothing on purpose\r\n\r\n};",
            "visibility": "private",
            "simpleName": "NULL_MOVE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "/**\r\n * that represents moving a card (and possibly\r\n * all cards below it if applicable) to pDestination.\r\n *\r\n * @param pCard\r\n * \t\tThe card to move, assumed to be in a\r\n * \t\tlegal position.\r\n * @param pDestination\r\n * \t\tThe required destination of the card.\r\n * @return An instance of the Move interface\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination);",
            "docComment": "that represents moving a card (and possibly\r\nall cards below it if applicable) to pDestination.\r\n\r\n@param pCard\r\n\t\tThe card to move, assumed to be in a\r\n\t\tlegal position.\r\n@param pDestination\r\n\t\tThe required destination of the card.\r\n@return An instance of the Move interface\r\n",
            "metaSrc": "source code",
            "description": "Determines the move for a card in solitaire based on its current location and destination.",
            "howItWorks": "The method takes a card and a destination location as parameters. It checks if the move is valid according to the rules of solitaire and returns the move if it is valid, otherwise null.",
            "howToUse": "Call this method with a Card object and a Location object representing the current and desired positions of the card.",
            "layer": "Logic",
            "postConditions": [
              "If the move is valid, a Move object representing the card and its new position is returned.",
              "If the move is invalid, null is returned."
            ],
            "preConditions": [
              "pCard must not be null.",
              "pDestination must not be null."
            ],
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    if (aModel.isDeckEmpty()) {\r\n        ((javafx.scene.control.Button) (getChildren().get(0))).setGraphic(createNewGameImage());\r\n    } else {\r\n        ((javafx.scene.control.Button) (getChildren().get(0))).setGraphic(new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()));\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the state change of the game deck in the Solitaire card game.",
            "howItWorks": "Checks if the deck is empty using aModel.isDeckEmpty(). If it is, sets the button's graphic to a new game image created by createNewGameImage(). Otherwise, sets the button's graphic to the back of a card image retrieved from CardImages.getBack().",
            "howToUse": "Call this method whenever the game state changes to update the deck view accordingly.",
            "layer": "UI",
            "postConditions": [
              "The button's graphic is updated based on whether the deck is empty or not."
            ],
            "preConditions": [
              "aModel is an instance of GameModel.",
              "getChildren() returns a list containing at least one element."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile from which to remove the top card."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The foundation pile where the card will be added."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void perform() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.Move move : aMoves) {\r\n        move.perform();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the logic of performing a composite move in the solitaire game.",
            "howItWorks": "The method iterates over a list of Move objects, calling the perform() method on each one. This allows for the execution of multiple moves as a single composite action.",
            "howToUse": "This method should be called to perform a sequence of moves in the solitaire game. It iterates through each move and calls its perform() method.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              {
                "condition": "The move is legal",
                "description": "This precondition ensures that only valid moves are performed."
              }
            ],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getBack()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
            "kind": "static method",
            "sourceText": "/**\r\n * Return an image of the back of a card.\r\n *\r\n * @return An icon representing the back of a card.\r\n */\r\npublic static javafx.scene.image.Image getBack() {\r\n    return ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(\"b\");\r\n}",
            "docComment": "Return an image of the back of a card.\r\n\r\n@return An icon representing the back of a card.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the back image of a card in the solitaire game.",
            "howItWorks": "Calls another method getCard with the string 'b' to retrieve the back image of a card.",
            "howToUse": "Call getBack() to obtain the back image of a card.",
            "layer": "Data",
            "postConditions": [
              "Returns a javafx.scene.image.Image object representing the back of a card."
            ],
            "preConditions": [],
            "returns": "A javafx.scene.image.Image object representing the back of a card.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "undoLast()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
            "kind": "method",
            "sourceText": "/**\r\n * Undoes the last move.\r\n */\r\npublic void undoLast() {\r\n    if (!aMoves.isEmpty()) {\r\n        aMoves.pop().undo();\r\n    }\r\n}",
            "docComment": "Undoes the last move.\r\n",
            "metaSrc": "source code",
            "description": "A method to undo the last move in a solitaire game.",
            "howItWorks": "The method checks if there are any moves in the 'aMoves' stack. If not empty, it pops the last move and calls its 'undo' method to reverse its effect.",
            "howToUse": "Call this method when the user wants to undo their last action in the game.",
            "layer": "Logic",
            "postConditions": [
              "The last move in 'aMoves' stack is undone."
            ],
            "preConditions": [
              "There must be at least one move in the 'aMoves' stack for this method to have any effect."
            ],
            "returns": "Void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns a null move in the game model view.",
            "howItWorks": "The method calls the getNullMove() method on the provided GameModelView instance and returns its result.",
            "howToUse": "Call getLegalMove() with an instance of GameModelView to retrieve a null move object.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "A Move object representing a null move is returned",
                "description": "The method guarantees that the returned Move object represents no actual move."
              }
            ],
            "preConditions": [
              {
                "condition": "pModel is not null",
                "description": "The GameModelView instance must be properly initialized."
              }
            ],
            "returns": "Ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile containing the cards."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String BUTTON_STYLE_PRESSED = \"-fx-background-color: transparent; -fx-padding: 6 4 4 6;\";",
            "visibility": "private",
            "simpleName": "BUTTON_STYLE_PRESSED",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void undo() {\r\n    for (int i = aMoves.size() - 1; i >= 0; i--) {\r\n        aMoves.get(i).undo();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "A method to undo a sequence of moves in the solitaire game.",
            "howItWorks": "The method iterates through a list of moves stored in 'aMoves' in reverse order and calls the 'undo()' method on each move. This effectively reverses the sequence of moves that were previously applied to the game state.",
            "howToUse": "Call this method when the user wants to undo their last action in the game, which will reverse the effects of all moves made since the last undo operation.",
            "layer": "Logic",
            "postConditions": [
              "All moves in the 'aMoves' list will have been undone in reverse order, effectively reverting the game state to its previous configuration before the last set of moves was applied."
            ],
            "preConditions": [
              "The 'aMoves' list must not be empty, as attempting to undo an empty list would result in a runtime error."
            ],
            "returns": "Void. The method does not return any value.",
            "stereotype": "Collaborational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int NUMBER_OF_GAMES = 10000;",
            "visibility": "private",
            "simpleName": "NUMBER_OF_GAMES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Application head.\r\n */\r\npublic Solitaire() {\r\n}",
            "docComment": "Application head.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pDeck",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The deck from which cards are drawn to initialize the tableau."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "solitaire",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Removes the top card from the pile at pIndex.\r\n *\r\n * @param pIndex\r\n * \t\tThe index of the pile to pop.\r\n * @pre !isEmpty(pIndex)\r\n */\r\nvoid pop(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert !aPiles.get(pIndex).isEmpty();\r\n    aVisible.remove(aPiles.get(pIndex).pop());\r\n}",
            "docComment": "Removes the top card from the pile at pIndex.\r\n\r\n@param pIndex\r\n\t\tThe index of the pile to pop.\r\n@pre !isEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Removes the top card from a tableau pile.",
            "howItWorks": "The method checks if the specified tableau pile is not empty using the isEmpty() method of CardStack. If it's not empty, it removes the top card using pop() and then removes this card from the list of visible cards.",
            "howToUse": "Call this method on an instance of Tableau with a valid TableauPile index to remove the top card from that pile.",
            "layer": "Logic",
            "postConditions": [
              "The specified tableau pile is not empty after the method execution.",
              "The top card has been removed from the specified tableau pile and added to the list of visible cards."
            ],
            "preConditions": [
              "The specified tableau pile is not empty before the method execution."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "reset()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
            "kind": "method",
            "sourceText": "/**\r\n * Restores the model to the state corresponding to the start of a new game.\r\n */\r\npublic void reset() {\r\n    aMoves.clear();\r\n    aDeck.shuffle();\r\n    aDiscard.clear();\r\n    aFoundations.initialize();\r\n    aTableau.initialize(aDeck);\r\n    notifyListeners();\r\n}",
            "docComment": "Restores the model to the state corresponding to the start of a new game.\r\n",
            "metaSrc": "source code",
            "description": "Resets the game state by clearing moves, shuffling the deck, clearing the discard pile, initializing foundations and tableau.",
            "howItWorks": "The method clears the list of moves, shuffles the deck, clears the discard pile, initializes the foundations, and initializes the tableau with cards from the shuffled deck. It then notifies all registered listeners that the game state has changed.",
            "howToUse": "Call reset() on an instance of GameModel to reset the game state before starting a new game.",
            "layer": "Logic",
            "postConditions": [
              "aMoves is empty",
              "aDeck is shuffled",
              "aDiscard is empty",
              "foundations are initialized with four empty piles",
              "tableau is initialized with cards from the shuffled deck"
            ],
            "preConditions": [],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check for."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.List<ca.mcgill.cs.stg.solitaire.cards.Card> aCards;",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int IMAGE_NEW_LINE_WIDTH = 10;",
            "visibility": "private",
            "simpleName": "IMAGE_NEW_LINE_WIDTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "peekDiscardPile()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peekDiscardPile() {\r\n    assert aDiscard.size() != 0;\r\n    return aDiscard.peek();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves the top card of the discard pile without removing it.",
            "howItWorks": "The method checks if the discard pile is not empty using an assertion, then retrieves and returns the top card using the peek() method of the CardStack class.",
            "howToUse": "Call this method on an instance of GameModel to get the top card from the discard pile without removing it.",
            "layer": "Logic",
            "postConditions": [
              "The discard pile remains unchanged after the method call."
            ],
            "preConditions": [
              "The discard pile must not be empty before calling this method."
            ],
            "returns": "A Card object representing the top card of the discard pile.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String[] RANK_CODES = new java.lang.String[]{ \"a\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"t\", \"j\", \"q\", \"k\" };",
            "visibility": "private",
            "simpleName": "RANK_CODES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "An immutable description of a playing card. This abstraction\r\nis designed to be independent of game logic, so it does\r\nnot provide any service that relies on the knowledge\r\nof the rules of any particular game.\r\n\r\nThis class implements the Flyweight design pattern: \r\nthere can only ever be one instance of a card that \r\nrepresents a specific real-world playing card (such as ace\r\nof spaces). In the absence of serialization and reflection,\r\nthis ensures that the behavior of the == operator is identical \r\nto that of the equals method when two card arguments are \r\nprovided.\r\n",
            "simpleName": "Card",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "(no description)",
            "roleStereotype": "Information Holder"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FOURTH",
            "visibility": "public",
            "simpleName": "FOURTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile that the CardPileView will display."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pLocation\r\n * \t\tThe location of the pile to peek at\r\n * @return The card on top of the pile at pLocation\r\n * @pre pLocation != null & !aPiles.get(pLocation).isEmpty();\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.Card peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pLocation != null) && (!aPiles.get(pLocation).isEmpty());\r\n    return aPiles.get(pLocation).peek();\r\n}",
            "docComment": "\r\n@param pLocation\r\n\t\tThe location of the pile to peek at\r\n@return The card on top of the pile at pLocation\r\n@pre pLocation != null & !aPiles.get(pLocation).isEmpty();\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the top card of a foundation pile without removing it.",
            "howItWorks": "The method checks if the foundation pile is not null and not empty, then retrieves the top card using the peek() method of the CardStack class.",
            "howToUse": "Call this method on an instance of FoundationPile to get the top card without removing it from the pile.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pLocation != null",
              "!aPiles.get(pLocation).isEmpty()"
            ],
            "returns": "The top card of the foundation pile.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
            "kind": "constructor",
            "sourceText": "FoundationPile() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
            "kind": "constructor",
            "sourceText": "private Driver() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "constructor",
            "sourceText": "CardMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    aCard = pCard;\r\n    aDestination = pDestination;\r\n    aOrigin = find(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes a CardMove object with a card and its destination location.",
            "howItWorks": "The constructor initializes the card, destination, and origin properties of the CardMove object. The origin is determined by calling the find method with the provided card.",
            "howToUse": "Create a new CardMove object by passing a card and its destination location to the constructor.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "The card must be in a location where it can be found and moved."
            ],
            "returns": "A new instance of CardMove with the specified card and destination.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SEVEN",
            "visibility": "public",
            "simpleName": "SEVEN",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "TEN",
            "visibility": "public",
            "simpleName": "TEN",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String VERSION = \"1.0\";",
            "visibility": "private",
            "simpleName": "VERSION",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String IMAGE_SUFFIX = \".gif\";",
            "visibility": "private",
            "simpleName": "IMAGE_SUFFIX",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "SIX",
            "visibility": "public",
            "simpleName": "SIX",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "java.lang.String",
          "labels": [
            "Structure"
          ],
          "properties": {
            "simpleName": "String",
            "qualifiedName": "java.lang.String",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "ai",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai",
            "kind": "package",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int HEIGHT = 500;",
            "visibility": "private",
            "simpleName": "HEIGHT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
            "kind": "constructor",
            "sourceText": "private CrashTest() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "private static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDiscardPileEmpty()) {\r\n        return pModel.getNullMove();\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (pModel.isLegalMove(pModel.peekDiscardPile(), pile)) {\r\n            return pModel.getCardMove(pModel.peekDiscardPile(), pile);\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "ACE",
            "visibility": "public",
            "simpleName": "ACE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int WIDTH = 680;",
            "visibility": "private",
            "simpleName": "WIDTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if and only if the stack has no cards in it.\r\n */\r\npublic boolean isEmpty() {\r\n    return aCards.size() == 0;\r\n}",
            "docComment": "\r\n@return True if and only if the stack has no cards in it.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the card stack is empty.",
            "howItWorks": "The method checks if the size of the 'aCards' list is equal to zero.",
            "howToUse": "Call this method on an instance of CardStack to determine if it contains any cards.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if 'aCards' is empty, otherwise false."
            ],
            "preConditions": [
              "The method assumes that 'aCards' is a list containing card objects."
            ],
            "returns": "A boolean indicating whether the card stack is empty or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.cards.CardStack getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    return aTableau.getPile(pIndex);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Retrieves a card stack from the tableau based on the given pile.",
            "howItWorks": "This method calls another method on aTableau object to retrieve a card stack based on the provided pile index.",
            "howToUse": "Call this method with an instance of TableauPile to get the corresponding card stack.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pIndex != null"
            ],
            "returns": "Ca.mcgill.cs.stg.solitaire.cards.CardStack",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents seven piles of cards that fan downwards, where cards\r\nmust be stacked in alternating suit colors, and where cards can \r\nbe moved from pile to pile.\r\n",
            "simpleName": "Tableau",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "Domain Layer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "// CSOFF:\r\nprivate static final java.lang.String BORDER_STYLE = \"-fx-border-color: lightgray;\" + (\"-fx-border-width: 3;\" + \" -fx-border-radius: 10.0\");",
            "visibility": "private",
            "simpleName": "BORDER_STYLE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Never does anything.\r\n",
            "simpleName": "NullPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A null playing strategy implementation for a solitaire card game.",
            "keywords": [
              "solitaire",
              "card game",
              "strategy",
              "null move"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Makes the first possible move in this order: \r\n1. Discarding if the discard pile is empty;\r\n2. Moving a card from the discard pile to a foundation pile;\r\n3. Moving a card from the discard pile to the tableau;\r\n4. Moving a card from the tableau to a foundation pile, in order\r\nof piles;\r\n5. Moving from one pile in the tableau to another, if this either reveals\r\na fresh card or frees up a pile for a king.\r\n6. None of the above was possible, discards if possible.\r\n7. If discarding was not possible, return the null move.\r\n",
            "simpleName": "GreedyPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String[] SUIT_CODES = new java.lang.String[]{ \"c\", \"d\", \"h\", \"s\" };",
            "visibility": "private",
            "simpleName": "SUIT_CODES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "peekDiscardPile()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The card on top of the discard pile.\r\n * @pre !emptyDiscardPile()\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.Card peekDiscardPile();",
            "docComment": "\r\n@return The card on top of the discard pile.\r\n@pre !emptyDiscardPile()\r\n",
            "metaSrc": "source code",
            "description": "Returns the top card of the discard pile without removing it.",
            "howItWorks": "The method retrieves the last card from the discard pile list and returns it.",
            "howToUse": "Call peekDiscardPile() to get the top card of the discard pile without removing it.",
            "layer": "Logic",
            "postConditions": [
              "The discard pile remains unchanged."
            ],
            "preConditions": [
              "The discard pile must not be empty."
            ],
            "returns": "A ca.mcgill.cs.stg.solitaire.cards.Card object representing the top card of the discard pile.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "start(javafx.stage.Stage)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void start(javafx.stage.Stage pPrimaryStage) {\r\n    pPrimaryStage.setTitle((ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE + \" \") + ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION);\r\n    javafx.scene.layout.GridPane root = new javafx.scene.layout.GridPane();\r\n    root.setStyle(\"-fx-background-color: green;\");\r\n    root.setHgap(ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER);\r\n    root.setVgap(ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER);\r\n    root.setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER));\r\n    final ca.mcgill.cs.stg.solitaire.model.GameModel model = new ca.mcgill.cs.stg.solitaire.model.GameModel(new ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy());\r\n    ca.mcgill.cs.stg.solitaire.gui.DeckView deckView = new ca.mcgill.cs.stg.solitaire.gui.DeckView(model);\r\n    ca.mcgill.cs.stg.solitaire.gui.DiscardPileView discardPileView = new ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(model);\r\n    root.add(deckView, 0, 0);\r\n    root.add(discardPileView, 1, 0);\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile index : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        root.add(new ca.mcgill.cs.stg.solitaire.gui.SuitStack(model, index), 3 + index.ordinal(), 0);\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        root.add(new ca.mcgill.cs.stg.solitaire.gui.CardPileView(model, index), index.ordinal(), 1);\r\n    }\r\n    root.setOnKeyTyped(new javafx.event.EventHandler<javafx.scene.input.KeyEvent>() {\r\n        @java.lang.Override\r\n        public void handle(final javafx.scene.input.KeyEvent pEvent) {\r\n            if (pEvent.getCharacter().equals(\"\\r\")) {\r\n                model.tryToAutoPlay();\r\n            } else if (pEvent.getCharacter().equals(\"\\b\")) {\r\n                model.undoLast();\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    });\r\n    pPrimaryStage.setResizable(false);\r\n    pPrimaryStage.setScene(new javafx.scene.Scene(root, ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH, ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT));\r\n    pPrimaryStage.show();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates an initialized FoundationPiles object that consists of four empty piles.\r\n */\r\nFoundations() {\r\n    initialize();\r\n}",
            "docComment": "Creates an initialized FoundationPiles object that consists of four empty piles.\r\n",
            "metaSrc": "source code",
            "description": "Initializes the foundations in a solitaire game by creating new card stacks for each foundation pile.",
            "howItWorks": "Calls the initialize() method to set up the foundations before starting a game of solitaire.",
            "howToUse": "Call this constructor to create an instance of Foundations and initialize it with four empty piles.",
            "layer": "Logic",
            "postConditions": [
              "Four empty card stacks are created and assigned to the Foundations object."
            ],
            "preConditions": [
              "None"
            ],
            "returns": "Void. The constructor does not return any value.",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.Set<ca.mcgill.cs.stg.solitaire.cards.Card> aVisible = new java.util.HashSet<>();",
            "visibility": "private",
            "simpleName": "aVisible",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Plays N games and, for each game, undo\r\nall moves and redo them.\r\n",
            "simpleName": "CrashTest",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "A class for crash testing a solitaire card game implementation.",
            "keywords": [
              "solitaire",
              "crash test",
              "game model",
              "greedy strategy"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Places where a visible card can be located, \r\nexcept for the foundation piles and the tableau.\r\n",
            "simpleName": "OtherLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Represents a location other than the tableau in solitaire, specifically the discard pile.",
            "keywords": [
              "solitaire",
              "discard pile",
              "location"
            ],
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Observer interface to be implemented by classes whose\r\nobjects are interested in being notified of a change\r\nin the state of the game model.\r\n",
            "simpleName": "GameModelListener",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Notifies listeners that the game state has changed.",
            "keywords": [
              "gameState",
              "listeners"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getDiscardMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return An instance of the Move interface\r\nthat represents discarding a card from the deck.\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getDiscardMove();",
            "docComment": "\r\n@return An instance of the Move interface\r\nthat represents discarding a card from the deck.\r\n",
            "metaSrc": "source code",
            "description": "A method that returns a discard move in the solitaire card game.",
            "howItWorks": "The method likely checks the current state of the game, determines if a discard move is possible based on the rules of solitaire, and creates a new Move object to represent this action.",
            "howToUse": "This method should be called when the player wants to make a discard move during the game. It does not require any parameters and returns an instance of Move representing the discard move.",
            "layer": "Logic",
            "postConditions": [
              "A Move object representing the discard move should be returned.",
              "The game model should reflect the changes resulting from the discard move."
            ],
            "preConditions": [
              "The game model should be in a valid state where a discard move can be made.",
              "There should be cards available in the discard pile."
            ],
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The bottom card in the sequence."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "iterator()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic java.util.Iterator<ca.mcgill.cs.stg.solitaire.cards.Card> iterator() {\r\n    return aCards.iterator();\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pMouseEvent",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The mouse event that triggered the drag-and-drop operation."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a sequence of cards starting at pCard and including\r\n * all cards on top of it.\r\n *\r\n * @param pCard\r\n * \t\tThe bottom card in the sequence\r\n * @param pPile\r\n * \t\tThe target pile\r\n * @return A copy of the requested sequence.\r\n * @pre pCard != null && pPile != null\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.CardStack getSequence(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert (pCard != null) && (pPile != null);\r\n    ca.mcgill.cs.stg.solitaire.cards.CardStack stack = aPiles.get(pPile);\r\n    java.util.List<ca.mcgill.cs.stg.solitaire.cards.Card> lReturn = new java.util.ArrayList<>();\r\n    boolean aSeen = false;\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : stack) {\r\n        if (card == pCard) {\r\n            aSeen = true;\r\n        }\r\n        if (aSeen) {\r\n            lReturn.add(card);\r\n        }\r\n    }\r\n    return new ca.mcgill.cs.stg.solitaire.cards.CardStack(lReturn);\r\n}",
            "docComment": "Returns a sequence of cards starting at pCard and including\r\nall cards on top of it.\r\n\r\n@param pCard\r\n\t\tThe bottom card in the sequence\r\n@param pPile\r\n\t\tThe target pile\r\n@return A copy of the requested sequence.\r\n@pre pCard != null && pPile != null\r\n",
            "metaSrc": "source code",
            "description": "Retrieves a sequence of cards starting from a given card in a tableau pile.",
            "howItWorks": "The method iterates through the cards in the specified tableau pile, collecting them into a stack until it encounters the given card. Once the given card is found, all subsequent cards are added to the stack.",
            "howToUse": "Call this method with a specific card and the tableau pile from which you want to retrieve the sequence of cards.",
            "layer": "Logic",
            "postConditions": [
              "The returned CardStack contains all cards from pCard to the end of the pile.",
              "The order of cards in the stack is preserved."
            ],
            "preConditions": [
              "pCard and pPile are not null."
            ],
            "returns": "A CardStack containing the sequence of cards starting from pCard.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isCompleted()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the game is completed.\r\n */\r\npublic boolean isCompleted() {\r\n    return aFoundations.getTotalSize() == (ca.mcgill.cs.stg.solitaire.cards.Rank.values().length * ca.mcgill.cs.stg.solitaire.cards.Suit.values().length);\r\n}",
            "docComment": "\r\n@return True if the game is completed.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the game is completed by verifying if all cards are in their respective foundations.",
            "howItWorks": "The method calls getTotalSize() on an instance of Foundations to get the total number of cards across all stacks. It then compares this value with the product of the number of ranks and suits, which represents the total number of cards in a standard deck. If they are equal, the game is considered completed.",
            "howToUse": "Call isCompleted() on an instance of GameModel to check if the game has been completed.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if all cards are in their respective foundations, otherwise false."
            ],
            "preConditions": [
              "The Foundations instance must be properly initialized and contain valid card stacks."
            ],
            "returns": "A boolean indicating whether the game is completed or not.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card we wish to move."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Represents the four piles that must be completed to win the game, with the ace\r\nat the bottom, face up, and all cards of the same suit on top, in sequence.\r\n",
            "simpleName": "Foundations",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "(no description)",
            "roleStereotype": "Structurer"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui",
          "labels": [
            "Container"
          ],
          "properties": {
            "simpleName": "gui",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui",
            "kind": "package",
            "metaSrc": "source code",
            "description": "A package containing classes related to the graphical user interface of a solitaire card game.",
            "title": "GUI Components",
            "keywords": [
              "CardDragHandler",
              "DeckView",
              "DiscardPileView",
              "Solitaire",
              "SuitStack"
            ],
            "layer": "UI"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "byte",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "byte",
            "qualifiedName": "byte",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tA card to test for visibility.\r\n * @return True if the card's value is visible in\r\nthe tableau;\r\n */\r\nboolean isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard);",
            "docComment": "\r\n@param pCard\r\n\t\tA card to test for visibility.\r\n@return True if the card's value is visible in\r\nthe tableau;\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "canUndo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return If there is a move to undo.\r\n */\r\npublic boolean canUndo() {\r\n    return !aMoves.isEmpty();\r\n}",
            "docComment": "\r\n@return If there is a move to undo.\r\n",
            "metaSrc": "source code",
            "description": "Checks if there are any moves that can be undone in the game.",
            "howItWorks": "The method checks if the 'aMoves' list is empty. If it's not empty, it returns true; otherwise, it returns false.",
            "howToUse": "Call this method to determine if the player can undo their last move in the game.",
            "layer": "Logic",
            "postConditions": [
              "The method returns true if there are moves in 'aMoves', otherwise false."
            ],
            "preConditions": [
              "The 'aMoves' list should be initialized before calling this method."
            ],
            "returns": "A boolean value indicating whether an undo operation is possible.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "reset()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()",
            "kind": "method",
            "sourceText": "public void reset() {\r\n    getChildren().get(0).setVisible(true);\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int NUMBER_OF_GAMES = 1000;",
            "visibility": "private",
            "simpleName": "NUMBER_OF_GAMES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n * Pushes pCard onto the stack.\r\n *\r\n * @param pCard\r\n * \t\tThe card to push.\r\n * @pre pCard != null;\r\n * @pre !aCards.contains(pCard)\r\n */\r\npublic void push(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && (!aCards.contains(pCard));\r\n    aCards.add(pCard);\r\n}",
            "docComment": "Pushes pCard onto the stack.\r\n\r\n@param pCard\r\n\t\tThe card to push.\r\n@pre pCard != null;\r\n@pre !aCards.contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Adds a card to the stack.",
            "howItWorks": "The method checks if the card is not null and not already in the stack, then adds it to the stack.",
            "howToUse": "Call push with an instance of Card to add it to the stack.",
            "layer": "Logic",
            "postConditions": [
              "The card is added to the stack.",
              "The stack contains the new card."
            ],
            "preConditions": [
              "The card is not null.",
              "The card is not already in the stack."
            ],
            "returns": "void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
            "kind": "static method",
            "sourceText": "/**\r\n * Converts an array of cards into an id string\r\n * that can be deserialized by the constructor.\r\n *\r\n * @param pCards\r\n * \t\tThe array of cards with high-ranking cards first.\r\n * @return The id string.\r\n */\r\npublic static java.lang.String serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack pCards) {\r\n    java.lang.String result = \"\";\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : pCards) {\r\n        result += card.getIDString() + ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR;\r\n    }\r\n    if (result.length() > 0) {\r\n        result = result.substring(0, result.length() - 1);\r\n    }\r\n    return result;\r\n}",
            "docComment": "Converts an array of cards into an id string\r\nthat can be deserialized by the constructor.\r\n\r\n@param pCards\r\n\t\tThe array of cards with high-ranking cards first.\r\n@return The id string.\r\n",
            "metaSrc": "source code",
            "description": "Converts a CardStack into a serialized string representation.",
            "howItWorks": "Iterates through each card in the CardStack, retrieves its unique identifier using getIDString(), and concatenates these identifiers with a separator. The resulting string is trimmed of the trailing separator before being returned.",
            "howToUse": "Call serialize() on an instance of CardTransfer, passing a CardStack as the parameter to obtain a serialized string representation of the cards in the stack.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The returned string is a concatenation of unique identifiers for each card in the CardStack, separated by a predefined separator."
              },
              {
                "condition": "The trailing separator is removed from the result before returning."
              }
            ],
            "preConditions": [
              {
                "condition": "pCards is not null."
              }
            ],
            "returns": "A java.lang.String representing the serialized CardStack.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
            "kind": "parameter",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
            "kind": "method",
            "sourceText": "/**\r\n * Performs the move.\r\n *\r\n * @pre The move is legal\r\n */\r\nvoid perform();",
            "docComment": "Performs the move.\r\n\r\n@pre The move is legal\r\n",
            "metaSrc": "source code",
            "description": "Handles the logic of performing a move in the solitaire game.",
            "howItWorks": "This method is part of an interface and does not contain any implementation details as it's just a declaration.",
            "howToUse": "This method should be implemented by classes that handle the logic for moving cards in the game.",
            "layer": "Logic",
            "postConditions": [
              "The move should be successfully performed according to the game rules."
            ],
            "preConditions": [
              "A valid move should be provided before calling this method."
            ],
            "returns": "void",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "/**\r\n * Determines if pCard can be moved to pLocation\r\n * according to the rules of the game and given the current\r\n * game state.\r\n *\r\n * @param pCard\r\n * \t\tThe card to move.\r\n * @param pDestination\r\n * \t\tThe destination of the move.\r\n * @return True if the move is a legal move.\r\n */\r\nboolean isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination);",
            "docComment": "Determines if pCard can be moved to pLocation\r\naccording to the rules of the game and given the current\r\ngame state.\r\n\r\n@param pCard\r\n\t\tThe card to move.\r\n@param pDestination\r\n\t\tThe destination of the move.\r\n@return True if the move is a legal move.\r\n",
            "metaSrc": "source code",
            "description": "Determines if a move is legal in the solitaire game.",
            "howItWorks": "Checks if the given card can be moved to the specified destination based on the rules of solitaire.",
            "howToUse": "Call this method with a Card object and a Location object representing the potential move.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if the move is legal, false otherwise."
            ],
            "preConditions": [],
            "returns": "boolean indicating whether the move is legal.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The TableauPile from which the top card will be hidden."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n * Launches the application.\r\n *\r\n * @param pArgs\r\n * \t\tThis program takes no argument.\r\n */\r\npublic static void main(java.lang.String[] pArgs) {\r\n    javafx.application.Application.launch(pArgs);\r\n}",
            "docComment": "Launches the application.\r\n\r\n@param pArgs\r\n\t\tThis program takes no argument.\r\n",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "constructor",
            "sourceText": "DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    aModel = pModel;\r\n    final javafx.scene.control.Button button = new javafx.scene.control.Button();\r\n    button.setGraphic(new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()));\r\n    button.setStyle(ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL);\r\n    button.setOnMousePressed(new javafx.event.EventHandler<javafx.scene.input.MouseEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.MouseEvent pEvent) {\r\n            ((javafx.scene.control.Button) (pEvent.getSource())).setStyle(ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED);\r\n        }\r\n    });\r\n    button.setOnMouseReleased(new javafx.event.EventHandler<javafx.scene.input.MouseEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.MouseEvent pEvent) {\r\n            ((javafx.scene.control.Button) (pEvent.getSource())).setStyle(ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL);\r\n            if (aModel.isDeckEmpty()) {\r\n                aModel.reset();\r\n            } else {\r\n                aModel.getDiscardMove().perform();\r\n            }\r\n        }\r\n    });\r\n    getChildren().add(button);\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "ca.mcgill.cs.stg.solitaire.model.GameModel": "pModel",
            "description": "(no description)"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
            "kind": "method",
            "sourceText": "/**\r\n * Fills the tableau by drawing cards from the deck.\r\n *\r\n * @param pDeck\r\n * \t\ta deck of card to use to fill the piles initially.\r\n * @pre pDeck != null\r\n */\r\nvoid initialize(ca.mcgill.cs.stg.solitaire.cards.Deck pDeck) {\r\n    assert pDeck != null;\r\n    aVisible.clear();\r\n    for (int i = 0; i < ca.mcgill.cs.stg.solitaire.model.TableauPile.values().length; i++) {\r\n        aPiles.get(ca.mcgill.cs.stg.solitaire.model.TableauPile.values()[i]).clear();\r\n        for (int j = 0; j < (i + 1); j++) {\r\n            ca.mcgill.cs.stg.solitaire.cards.Card card = pDeck.draw();\r\n            aPiles.get(ca.mcgill.cs.stg.solitaire.model.TableauPile.values()[i]).push(card);\r\n            if (j == i) {\r\n                aVisible.add(card);\r\n            }\r\n        }\r\n    }\r\n}",
            "docComment": "Fills the tableau by drawing cards from the deck.\r\n\r\n@param pDeck\r\n\t\ta deck of card to use to fill the piles initially.\r\n@pre pDeck != null\r\n",
            "metaSrc": "source code",
            "description": "Initializes the tableau with cards from a deck.",
            "howItWorks": "The method initializes the tableau by clearing existing piles and drawing cards from the provided deck to populate each pile. The top card of each pile is marked as visible.",
            "howToUse": "Call initialize with an instance of Deck to set up the tableau for a new game.",
            "layer": "Logic",
            "postConditions": [
              "All piles in the tableau are cleared.",
              "Cards are drawn from the provided deck and added to the tableau piles.",
              "The top card of each pile is marked as visible."
            ],
            "preConditions": [
              "pDeck is not null."
            ],
            "returns": "Void",
            "stereotype": "Mutator"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "private static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile tableauPile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        ca.mcgill.cs.stg.solitaire.cards.CardStack stack = pModel.getTableauPile(tableauPile);\r\n        if (!stack.isEmpty()) {\r\n            ca.mcgill.cs.stg.solitaire.cards.Card card = stack.peek();\r\n            for (ca.mcgill.cs.stg.solitaire.model.FoundationPile foundationPile : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n                if (pModel.isLegalMove(card, foundationPile)) {\r\n                    return pModel.getCardMove(card, foundationPile);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "Attempts to find and return a move that moves a card from a tableau pile to a foundation pile in the game. If no such move exists, returns a null move.",
            "metaSrc": "source code",
            "description": "The substrategyMoveFromTableauToFoundation method is a private static method within the GreedyPlayingStrategy class that attempts to move cards from tableau piles to foundation piles in a solitaire game. It iterates through each tableau pile and checks if there are any legal moves to a foundation pile. If a legal move is found, it returns the corresponding Move object; otherwise, it returns a null move.",
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "howToUse": "Call this method with an instance of GameModelView representing the current state of the game. It will return a Move object if a legal move is found, or a null move otherwise.",
            "preconditions": [
              {
                "description": "The GameModelView instance passed as an argument should not be null.",
                "condition": "pModel != null"
              }
            ],
            "postconditions": [
              {
                "description": "If a legal move is found, the returned Move object represents moving a card from a tableau pile to a foundation pile. If no legal move is found, the returned Move object is a null move.",
                "condition": "The returned Move object is either a valid move or a null move."
              }
            ],
            "possibleArchitecturalLayers": [
              {
                "layer": "Logic",
                "description": "This method is part of the application logic layer, specifically within the AI strategy for playing solitaire. It does not handle user interface elements or data access directly."
              }
            ]
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "/* Removes the moveable card from pLocation. */\r\nprivate void absorbCard(ca.mcgill.cs.stg.solitaire.model.Location pLocation) {\r\n    if (pLocation == ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE) {\r\n        assert !aDiscard.isEmpty();\r\n        aDiscard.pop();\r\n    } else if (pLocation instanceof ca.mcgill.cs.stg.solitaire.model.FoundationPile) {\r\n        assert !aFoundations.isEmpty(((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pLocation)));\r\n        aFoundations.pop(((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pLocation)));\r\n    } else {\r\n        assert pLocation instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile;\r\n        aTableau.pop(((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pLocation)));\r\n    }\r\n}",
            "docComment": "@param pLocation The location where to obtain the card. @pre !isEmpty(pLocation)",
            "metaSrc": "source code",
            "description": "Removes the top card from a specified location in the game model.",
            "howItWorks": "The method checks the type of location (Discard Pile, Foundation Pile, or Tableau Pile) and removes the top card accordingly. It uses assertions to ensure that the location is not empty before attempting to pop a card.",
            "howToUse": "Call this method with an instance of Location to remove the top card from that location in the game model.",
            "returns": "Void",
            "stereotype": "Logic"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be added."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "FIRST",
            "visibility": "public",
            "simpleName": "FIRST",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.TableauPile getPile(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert contains(pCard);\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (contains(pCard, pile)) {\r\n            return pile;\r\n        }\r\n    }\r\n    assert false;\r\n    return null;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a specific card is present in any of the tableau piles and returns the corresponding pile.",
            "howItWorks": "The method iterates through all possible tableau piles and checks if the given card is present in each one using the contains method. If found, it returns the corresponding pile; otherwise, it asserts false.",
            "howToUse": "Call this method with an instance of Card to get the tableau pile that contains the card.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "If the card is found in any pile, the method returns the corresponding TableauPile."
              },
              {
                "condition": "If the card is not found in any pile, the method asserts false."
              }
            ],
            "preConditions": [
              {
                "condition": "pCard != null"
              }
            ],
            "returns": "The TableauPile that contains the given card.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final java.lang.String BORDER_STYLE_NORMAL = \"-fx-border-color: lightgray;\" + (\"-fx-border-width: 3;\" + \" -fx-border-radius: 10.0\");",
            "visibility": "private",
            "simpleName": "BORDER_STYLE_NORMAL",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card whose image is to be retrieved."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    for (java.util.function.Function<ca.mcgill.cs.stg.solitaire.model.GameModelView, ca.mcgill.cs.stg.solitaire.model.Move> substrategy : ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES) {\r\n        ca.mcgill.cs.stg.solitaire.model.Move move = substrategy.apply(pModel);\r\n        if (!move.isNull()) {\r\n            return move;\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Determines the next legal move in a solitaire game using a greedy strategy.",
            "howItWorks": "Iterates through a list of substrategies, applying each one to the game model. Returns the first non-null move found; otherwise, returns a null move.",
            "howToUse": "Call this method with an instance of GameModelView to get the next legal move according to a greedy strategy.",
            "layer": "Logic",
            "postConditions": [
              "A legal move is returned if available; otherwise, a null move is returned."
            ],
            "preConditions": [
              "pModel is not null."
            ],
            "returns": "ca.mcgill.cs.stg.solitaire.model.Move",
            "stereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to test\r\n * @return True if pCard is in the tableau and is\r\nthe lowest card visible in its pile, including\r\nthe case where it's the only card in the pile.\r\n */\r\nboolean isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard);",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to test\r\n@return True if pCard is in the tableau and is\r\nthe lowest card visible in its pile, including\r\nthe case where it's the only card in the pile.\r\n",
            "metaSrc": "source code",
            "description": "Determines if a card is the lowest visible card in the tableau.",
            "howItWorks": "The method checks if the given card is the last visible card in its column within the tableau.",
            "howToUse": "Call this method with a Card object to determine if it is the lowest visible card in the tableau.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [],
            "returns": "boolean indicating whether the card is the lowest visible in the tableau.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int MARGIN_OUTER = 10;",
            "visibility": "private",
            "simpleName": "MARGIN_OUTER",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to add to the deck."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private final java.util.List<ca.mcgill.cs.stg.solitaire.model.Move> aMoves = new java.util.ArrayList<>();",
            "visibility": "private",
            "simpleName": "aMoves",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "// CSON:\r\nprivate ca.mcgill.cs.stg.solitaire.gui.CardDragHandler aDragHandler;",
            "visibility": "private",
            "simpleName": "aDragHandler",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "short",
          "labels": [
            "Primitive"
          ],
          "properties": {
            "simpleName": "short",
            "qualifiedName": "short",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile pPile) {\r\n    return aFoundations.isEmpty(pPile);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a FoundationPile is empty.",
            "howItWorks": "The method calls the isEmpty method of the Foundations class to determine if the provided FoundationPile is empty.",
            "howToUse": "Call this method with an instance of FoundationPile to check if it contains any cards.",
            "layer": "Logic",
            "postConditions": [
              {
                "condition": "The method returns true if the FoundationPile is empty, and false otherwise."
              }
            ],
            "preConditions": [
              {
                "condition": "pPile is not null."
              }
            ],
            "returns": "A boolean indicating whether the FoundationPile is empty or not.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "labels": [
            "Structure"
          ],
          "properties": {
            "docComment": "Game-playing behavior. Implementations of this interface\r\nare responsible for ensuring that the sequence of Move \r\ninstances returned does not put the game in and endless\r\ncycle.\r\n",
            "simpleName": "PlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Determines the legal moves in a solitaire game based on the current game model.",
            "keywords": [
              "solitaire",
              "game",
              "legal moves",
              "GameModelView",
              "Move"
            ],
            "roleStereotype": "Service Provider"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The ImageView that represents a card and will have its effects removed when the drag exits."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check\r\n * @param pIndex\r\n * \t\tThe index of the pile to check\r\n * @return True if pIndex contains pCard\r\n * @pre pCard != null && pIndex != null\r\n */\r\nboolean contains(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert (pCard != null) && (pIndex != null);\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : aPiles.get(pIndex)) {\r\n        if (card == pCard) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check\r\n@param pIndex\r\n\t\tThe index of the pile to check\r\n@return True if pIndex contains pCard\r\n@pre pCard != null && pIndex != null\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific card is present in a given tableau pile.",
            "howItWorks": "The method iterates through the cards in the specified tableau pile and compares each card with the provided card. If a match is found, it returns true; otherwise, it returns false.",
            "howToUse": "Call this method with an instance of Card and an index representing the tableau pile to check if the card is present in that pile.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if the card is found in the specified pile.",
              "Returns false if the card is not found in the specified pile."
            ],
            "preConditions": [
              "pCard must not be null.",
              "pIndex must not be null."
            ],
            "returns": "A boolean indicating whether the card is present in the tableau pile.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
          "labels": [
            "Variable"
          ],
          "properties": {
            "sourceText": "private static final int IMAGE_FONT_SIZE = 15;",
            "visibility": "private",
            "simpleName": "IMAGE_FONT_SIZE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
            "kind": "field",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns true if moving pCard away reveals the top of the card.\r\n *\r\n * @param pCard\r\n * \t\tThe card to test\r\n * @return true if the card above pCard is not visible and pCard\r\nis visible.\r\n * @pre pCard != null && contains(pCard)\r\n */\r\nboolean revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && contains(pCard);\r\n    java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> previous = getPreviousCard(pCard);\r\n    if (!previous.isPresent()) {\r\n        return false;\r\n    }\r\n    return aVisible.contains(pCard) && (!aVisible.contains(previous.get()));\r\n}",
            "docComment": "Returns true if moving pCard away reveals the top of the card.\r\n\r\n@param pCard\r\n\t\tThe card to test\r\n@return true if the card above pCard is not visible and pCard\r\nis visible.\r\n@pre pCard != null && contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific card is the top visible card in its pile.",
            "howItWorks": "The method first asserts that the provided card is not null and is contained within the tableau. It then retrieves the previous card in the same pile using getPreviousCard(). If there is no previous card, it returns false. Otherwise, it checks if the current card is visible and the previous card is not.",
            "howToUse": "Call this method with an instance of Card to determine if it is the top visible card in its pile.",
            "layer": "Logic",
            "postConditions": [
              "Returns true if pCard is the top visible card in its pile and false otherwise."
            ],
            "preConditions": [
              "pCard != null",
              "pCard is contained within the tableau"
            ],
            "returns": "A boolean indicating whether pCard is the top visible card in its pile.",
            "stereotype": "Accessor"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void perform() {\r\n    aTableau.showTop(aIndex);\r\n    aMoves.push(this);\r\n    notifyListeners();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Displays the top card of a TableauPile and notifies listeners that the game state has changed.",
            "howItWorks": "The perform() method calls showTop() on aTableau with aIndex to display the top card. It then pushes this move onto aMoves stack and notifies all registered listeners about the change in game state.",
            "howToUse": "Call perform() on an instance of GameModel$RevealTopMove, passing the index of the TableauPile whose top card should be displayed.",
            "layer": "Logic",
            "postConditions": [
              "The top card of the specified TableauPile is displayed.",
              "This move is added to the moves stack.",
              "All registered listeners are notified about the change in game state."
            ],
            "preConditions": [
              "aIndex is not null and the pile at aIndex is not empty."
            ],
            "returns": "Void. This method does not return any value.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "labels": [
            "Operation"
          ],
          "properties": {
            "visibility": "public",
            "simpleName": "isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return aTableau.contains(pCard) && aTableau.isLowestVisible(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a specific card is the lowest visible card in any of the tableau piles.",
            "howItWorks": "The method checks if the card is present in the tableau and if it is the lowest visible card in its pile.",
            "howToUse": "Call this method with an instance of Card to determine if it is the lowest visible card in any of the tableau piles.",
            "layer": "Logic",
            "postConditions": [],
            "preConditions": [
              "pCard != null",
              "contains(pCard)"
            ],
            "returns": "A boolean indicating whether the given card is the lowest visible card in any of the tableau piles.",
            "stereotype": "Other"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
            "kind": "constructor",
            "sourceText": "OtherLocation() {\r\n}",
            "docComment": "",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The FoundationPile from which the top card will be removed."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
          "labels": [
            "Variable"
          ],
          "properties": {
            "simpleName": "pCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "An iterable collection of cards to be added to the stack."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "labels": [
            "Constructor"
          ],
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "constructor",
            "sourceText": "DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    aModel = pModel;\r\n    setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING));\r\n    final javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack());\r\n    image.setVisible(false);\r\n    getChildren().add(image);\r\n    aDragHandler = new ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(image);\r\n    image.setOnDragDetected(aDragHandler);\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes the DiscardPileView with a reference to the GameModel and sets up the initial state of the view.",
            "howItWorks": "The constructor initializes the DiscardPileView by setting its model, padding, adding an image representing the back of a card, and attaching a drag handler. It also adds itself as a listener to the game model.",
            "howToUse": "Create an instance of DiscardPileView by passing a GameModel object to its constructor.",
            "layer": "UI",
            "postConditions": [
              "The DiscardPileView is initialized with a reference to the GameModel.",
              "The padding of the view is set to a predefined value.",
              "An image representing the back of a card is added to the view and made invisible.",
              "A drag handler is attached to the image for handling drag events.",
              "The DiscardPileView registers itself as a listener to the game model."
            ],
            "preConditions": [
              "pModel is not null."
            ],
            "returns": "Void",
            "stereotype": "Creational"
          }
        }
      },
      {
        "data": {
          "id": "layer:UI",
          "labels": [
            "Grouping"
          ],
          "properties": {
            "kind": "architectural layer",
            "simpleName": "UI",
            "qualifiedName": "UI",
            "description": "Handles user interface, such as instatiating, setting properties of, or laying out widget objects and capturing user interactions.",
            "layerOrder": 0
          }
        }
      },
      {
        "data": {
          "id": "layer:Logic",
          "labels": [
            "Grouping"
          ],
          "properties": {
            "kind": "architectural layer",
            "simpleName": "Logic",
            "qualifiedName": "Logic",
            "description": "Handles application and domain logic, i.e., neither UI nor data access.",
            "layerOrder": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:Data",
          "labels": [
            "Grouping"
          ],
          "properties": {
            "kind": "architectural layer",
            "simpleName": "Data",
            "qualifiedName": "Data",
            "description": "Handles loading and storing data from/to external services, including database systems, web services, filesystems, hardware, etc.",
            "layerOrder": 2
          }
        }
      }
    ],
    "edges": [
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasVariable-ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasVariable-ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasVariable-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove-hasVariable-ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver-hasVariable-ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasVariable-ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasVariable-ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasVariable-ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasVariable-ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasVariable-ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasVariable-ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver-hasVariable-ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest-hasVariable-ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasVariable-ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasVariable-ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasVariable-ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasVariable-ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation-hasVariable-ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck-hasVariable-ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView-hasVariable-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler-hasVariable-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasVariable-ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasVariable-ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasVariable-ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasVariable-ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver-hasVariable-ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasVariable-ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove-type-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau-type-ca.mcgill.cs.stg.solitaire.model.Tableau",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0-type-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards-type-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles-type-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves-type-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves-type-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE-type-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0-type-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0-type-ca.mcgill.cs.stg.solitaire.cards.Deck",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler-type-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy-type-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles-type-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE-type-ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard-type-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations-type-ca.mcgill.cs.stg.solitaire.model.Foundations",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0-type-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners-type-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1-type-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0-type-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck-type-ca.mcgill.cs.stg.solitaire.cards.Deck",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS-type-int",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
          "target": "int",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0-type-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler-type-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH-type-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0-type-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION-type-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
          "target": "java.lang.String",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel-type-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles-type-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK-type-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])-hasParameter-ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])-hasParameter-ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])-hasParameter-ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])-hasParameter-ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)-hasParameter-ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-hasParameter-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-hasParameter-ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()-returnType-int",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()-returnType-ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()-returnType-int",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()-returnType-int",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()-returnType-ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()-returnType-ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)-returnType-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()-returnType-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver()-returnType-ca.mcgill.cs.stg.solitaire.ai.Driver",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()-returnType-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck()-returnType-ca.mcgill.cs.stg.solitaire.cards.Deck",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank()-returnType-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()-returnType-ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)-returnType-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations()-returnType-ca.mcgill.cs.stg.solitaire.model.Foundations",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)-returnType-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-returnType-ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])-returnType-ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile()-returnType-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()-returnType-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau()-returnType-ca.mcgill.cs.stg.solitaire.model.Tableau",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages()-returnType-ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)-returnType-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()-returnType-java.lang.String",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "target": "java.lang.String",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit()-returnType-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()-returnType-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()-returnType-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-returnType-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()-returnType-int",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "target": "int",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)-returnType-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-boolean",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "boolean",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack()-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)-returnType-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)-returnType-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-returnType-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()-invokes-ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])-invokes-ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()-invokes-ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck()-invokes-ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)-invokes-ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()-invokes-ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])-invokes-ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)-invokes-ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()-invokes-ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()-invokes-ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()-invokes-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations()-invokes-ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)-invokes-ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-invokes-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-specializes-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-specializes-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove-specializes-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove-specializes-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-specializes-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy-specializes-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView-specializes-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-specializes-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-specializes-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile-specializes-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-specializes-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-specializes-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation-specializes-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasScript-ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation-hasScript-ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck-hasScript-ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove-hasScript-ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit-hasScript-ca.mcgill.cs.stg.solitaire.cards.Suit()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move-hasScript-ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasScript-ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardImages()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasScript-ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move-hasScript-ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move-hasScript-ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasScript-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver-hasScript-ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck-hasScript-ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck-hasScript-ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank-hasScript-ca.mcgill.cs.stg.solitaire.cards.Rank()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelListener-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest-hasScript-ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck-hasScript-ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasScript-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove-hasScript-ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasScript-ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver-hasScript-ca.mcgill.cs.stg.solitaire.ai.Driver()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit-hasScript-ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver-hasScript-ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove-hasScript-ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasScript-ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasScript-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile-hasScript-ca.mcgill.cs.stg.solitaire.model.TableauPile()",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasScript-ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasScript-ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView-hasScript-ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy-hasScript-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest-hasScript-ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile-hasScript-ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack-hasScript-ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire-hasScript-ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck-hasScript-ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack-hasScript-ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView-hasScript-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest-hasScript-ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations-hasScript-ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler-hasScript-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card-hasScript-ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau-hasScript-ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-hasScript-ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-instantiates-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-instantiates-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-instantiates-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "instantiates",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-instantiates-ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-instantiates-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-instantiates-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])-instantiates-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-instantiates-ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-instantiates-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-instantiates-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()-instantiates-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)-instantiates-ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau()-instantiates-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()-instantiates-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])-instantiates-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()-instantiates-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])-instantiates-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])-instantiates-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()-instantiates-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs-contains-ca.mcgill.cs.stg",
          "source": "ca.mcgill.cs",
          "target": "ca.mcgill.cs.stg",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-contains-ca.mcgill.cs.stg.solitaire.cards.Card",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire-contains-ca.mcgill.cs.stg.solitaire.cards",
          "source": "ca.mcgill.cs.stg.solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-contains-ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-contains-ca.mcgill.cs.stg.solitaire.cards.Rank",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-contains-ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-contains-ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-contains-ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill-contains-ca.mcgill.cs",
          "source": "ca.mcgill",
          "target": "ca.mcgill.cs",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg-contains-ca.mcgill.cs.stg.solitaire",
          "source": "ca.mcgill.cs.stg",
          "target": "ca.mcgill.cs.stg.solitaire",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire-contains-ca.mcgill.cs.stg.solitaire.gui",
          "source": "ca.mcgill.cs.stg.solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-contains-ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire-contains-ca.mcgill.cs.stg.solitaire.model",
          "source": "ca.mcgill.cs.stg.solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.Location",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.Location",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca-contains-ca.mcgill",
          "source": "ca",
          "target": "ca.mcgill",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.Move",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-contains-ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-contains-ca.mcgill.cs.stg.solitaire.ai.Driver",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-contains-ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.GameModel",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.Foundations",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire-contains-ca.mcgill.cs.stg.solitaire.ai",
          "source": "ca.mcgill.cs.stg.solitaire",
          "target": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-contains-ca.mcgill.cs.stg.solitaire.cards.Suit",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-contains-ca.mcgill.cs.stg.solitaire.model.Tableau",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-contains-ca.mcgill.cs.stg.solitaire.cards.Deck",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-nests-ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "nests",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel-nests-ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "nests",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          }
        }
      },
      {
        "data": {
          "id": "layer:UI-allowedDependency-layer:Logic",
          "source": "layer:UI",
          "target": "layer:Logic",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "layer:Logic-allowedDependency-layer:Data",
          "source": "layer:Logic",
          "target": "layer:Data",
          "label": "allowedDependency",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.perform()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.undo()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)-implements-layer:Data",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "target": "layer:Data",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()-implements-layer:Data",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "target": "layer:Data",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards-implements-layer:Logic",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "target": "layer:Logic",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-implements-layer:UI",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "layer:UI",
          "label": "implements",
          "properties": {
            "weight": 1
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-dependsOn-ca.mcgill.cs.stg.solitaire.cards",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "dependsOn",
          "properties": {
            "description": "The `ca.mcgill.cs.stg.solitaire.gui` package and the `ca.mcgill.cs.stg.solitaire.cards` package interact through a dependency that facilitates the graphical representation and manipulation of card objects within a solitaire game. The GUI package relies on the cards package to manage card data, such as ranks, suits, and images, while also using it for operations like serialization and deserialization of card stacks during drag-and-drop interactions. This interaction ensures that the visual components of the game are accurately synchronized with the underlying card model."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-dependsOn-ca.mcgill.cs.stg.solitaire.cards",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "dependsOn",
          "properties": {
            "description": "The ca.mcgill.cs.stg.solitaire.model package and the ca.mcgill.cs.stg.solitaire.cards package are interconnected through a dependency that facilitates the management and manipulation of card objects within the game's logic. The model package relies on the cards package to represent, store, and operate on individual cards, thereby enabling the implementation of game rules and interactions involving these elements."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-dependsOn-ca.mcgill.cs.stg.solitaire.cards",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "dependsOn",
          "properties": {
            "description": "The `ca.mcgill.cs.stg.solitaire.ai` package interacts with the `ca.mcgill.cs.stg.solitaire.cards` package to manage and manipulate card game components, such as decks, cards, and stacks, during the execution of a solitaire game strategy. This interaction facilitates the implementation of playing strategies by providing access to card data and operations necessary for determining legal moves and managing the game state."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui-dependsOn-ca.mcgill.cs.stg.solitaire.model",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "target": "ca.mcgill.cs.stg.solitaire.model",
          "label": "dependsOn",
          "properties": {
            "description": "The ca.mcgill.cs.stg.solitaire.gui package is dependent on the ca.mcgill.cs.stg.solitaire.model package for its functionality, as it relies on the model to manage game state and provide data necessary for the graphical user interface to display and interact with the game elements. This design ensures that the GUI can accurately reflect the current state of the game without duplicating logic or managing game data internally."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai-dependsOn-ca.mcgill.cs.stg.solitaire.model",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "target": "ca.mcgill.cs.stg.solitaire.model",
          "label": "dependsOn",
          "properties": {
            "description": "The ca.mcgill.cs.stg.solitaire.ai package interacts with the ca.mcgill.cs.stg.solitaire.model package to implement and utilize game logic, strategies, and data structures for simulating and automating solitaire games. This interaction is designed to separate concerns between game mechanics (model) and artificial intelligence or user interface components (ai), promoting modularity and maintainability in the codebase."
          }
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model-dependsOn-ca.mcgill.cs.stg.solitaire.ai",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "target": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "dependsOn",
          "properties": {
            "description": "The `ca.mcgill.cs.stg.solitaire.model` package contains the core logic for managing the state and rules of a solitaire game, including handling moves and determining legal actions. The `ca.mcgill.cs.stg.solitaire.ai` package provides an interface (`PlayingStrategy`) and concrete implementations (like `GreedyPlayingStrategy`) that define how to determine legal moves based on the current game state. The interaction between these packages is primarily through the `GameModel` class invoking methods from the `PlayingStrategy` interface to automatically play moves, demonstrating a clear separation of concerns where the model handles game logic and AI strategies handle decision-making based on that logic."
          }
        }
      }
    ]
  }
}
